{"version":3,"sources":["components/TabToggle/index.tsx","state/info/types.ts","views/Info/utils/infoDataHelpers.ts","state/info/queries/protocol/overview.ts","state/info/queries/helpers.ts","views/Info/components/InfoCharts/ChartCard/index.tsx","state/info/queries/protocol/chart.ts","state/info/queries/protocol/transactions.ts","state/info/queries/pools/topPools.ts","state/info/queries/pools/poolData.ts","views/Info/hooks/useBnbPrices.ts","state/info/queries/tokens/tokenData.ts","state/info/queries/tokens/topTokens.ts","state/info/queries/pools/chartData.ts","state/info/queries/pools/transactions.ts","state/info/queries/tokens/chartData.ts","state/info/queries/tokens/transactions.ts","state/info/queries/tokens/priceData.ts","state/info/queries/tokens/poolsForToken.ts","state/info/hooks.ts","state/info/updaters.ts","state/info/queries/search/index.ts","views/Info/components/CurrencyLogo/LogoLoader.tsx","views/Info/components/CurrencyLogo/index.tsx","views/Info/components/SaveIcon/index.tsx","views/Info/components/InfoSearch/index.tsx","views/Info/components/InfoNav/index.tsx","views/Info/components/InfoCharts/LineChart/index.tsx","views/Info/components/Percent/index.tsx","views/Info/components/InfoTables/shared.tsx","views/Info/components/InfoTables/TokensTable.tsx","views/Info/components/InfoTables/PoolsTable.tsx","views/Info/components/InfoCharts/BarChart/index.tsx","views/Info/components/InfoTables/TransactionsTable.tsx","views/Info/Overview/index.tsx","views/Info/Pools/index.tsx","views/Info/components/InfoCharts/CandleChart/index.tsx","views/Info/Pools/PoolPage.tsx","views/Info/components/TopTokenMovers/index.tsx","views/Info/Tokens/index.tsx","views/Info/hooks/useCMCLink.ts","views/Info/Tokens/TokenPage.tsx","views/Info/Tokens/redirects.tsx","views/Info/index.tsx"],"names":["Wrapper","styled","Flex","Inner","theme","colors","input","TabToggle","button","isActive","text","textSubtle","card","background","TabToggleGroup","children","p","TransactionType","getAmountChange","valueNow","valueBefore","getPercentChange","getChangeForPeriod","valueOnePeriodAgo","valueTwoPeriodsAgo","currentPeriodAmount","previousPeriodAmount","getLpFeesAndApr","volumeUSD","volumeUSDWeek","liquidityUSD","totalFees24h","TOTAL_FEE","totalFees7d","lpFees24h","LP_HOLDERS_FEE","lpFees7d","lpApr7d","WEEKS_IN_YEAR","Infinity","getOverviewData","block","a","query","gql","request","INFO_CLIENT","data","error","console","formatpattieswapFactoryResponse","rawpattieswapFactory","totalTransactions","parseFloat","totalVolumeUSD","totalLiquidityUSD","useFetchProtocolData","useState","fetchState","setFetchState","getDeltaTimestamps","t24","t48","useBlocksFromTimestamps","blocks","blockError","block24","block48","useEffect","fetch","number","undefined","error24","data24","error48","data48","anyError","overviewData","pattieswapFactories","overviewData24","overviewData48","allDataAvailable","volumeUSDChange","liquidityUSDChange","txCount","txCountChange","protocolData","ChartView","mapMints","mint","type","MINT","hash","id","split","timestamp","sender","to","token0Symbol","pair","token0","symbol","token1Symbol","token1","token0Address","token1Address","amountUSD","amountToken0","amount0","amountToken1","amount1","mapBurns","burn","BURN","mapSwaps","swap","SWAP","from","amount0In","amount0Out","amount1In","amount1Out","mapDayData","tokenDayData","date","dailyVolumeUSD","mapPairDayData","pairDayData","reserveUSD","fetchChartData","getEntityDayDatas","address","chartEntries","skip","allFound","fetchError","length","concat","formattedDayDatas","reduce","accum","dayData","dayOrdinal","parseInt","ONE_DAY_UNIX","toFixed","availableDays","Object","keys","map","firstAvailableDayData","PCS_V2_START","latestLiquidityUSD","endTimestamp","getUnixTime","Date","includes","toString","values","PANCAKE_DAY_DATAS","getOverviewChartData","startTime","pattieswapDayDatas","useFetchGlobalChartData","overviewChartData","setOverviewChartData","setError","GLOBAL_TRANSACTIONS","fetchTopTransactions","mints","burns","swaps","sort","b","fetchTopPools","timestamp24hAgo","blacklist","TOKEN_BLACKLIST","pairDayDatas","useTopPoolAddresses","topPoolAddresses","setTopPoolAddresses","addresses","POOL_AT_BLOCK","pools","blockString","addressesString","join","fetchPoolData","block24h","block48h","block7d","block14d","poolAddresses","parsePoolData","pairs","poolData","reserve0","reserve1","token0Price","token1Price","usePoolDatas","t24h","t48h","t7d","t14d","formattedPoolData","now","formattedPoolData24h","oneDayAgo","formattedPoolData48h","twoDaysAgo","formattedPoolData7d","oneWeekAgo","formattedPoolData14d","twoWeeksAgo","formatted","current","oneDay","twoDays","week","twoWeeks","volumeUSDChangeWeek","liquidityToken0","liquidityToken1","name","allBlocksAvailable","BNB_PRICES","fetchBnbPrices","blockWeek","bnbPrices","bnbPrice","twoDay","oneWeek","TOKEN_AT_BLOCK","tokens","fetchTokenData","tokenAddresses","parseTokenData","tokenData","derivedBNB","derivedUSD","tradeVolumeUSD","totalLiquidity","useFetchedTokenDatas","prices","setPrices","tWeek","useBnbPrices","parsed","parsed24","parsed48","parsed7d","parsed14d","liquidityUSDOneDayAgo","liquidityToken","priceUSD","priceUSDOneDay","priceUSDWeek","priceUSDChange","priceUSDChangeWeek","exists","fetchTopTokens","tokenDayDatas","t","useTopTokenAddresses","topTokenAddresses","setTopTokenAddresses","getPoolChartData","fetchPoolChartData","POOL_TRANSACTIONS","fetchPoolTransactions","getTokenChartData","fetchTokenChartData","TOKEN_TRANSACTIONS","fetchTokenTransactions","mints0","mintsAs0","mints1","mintsAs1","burns0","burnsAs0","burns1","burnsAs1","swaps0","swapsAs0","swaps1","swapsAs1","getPriceSubqueries","tokenAddress","priceQueryConstructor","subqueries","fetchTokenPriceData","interval","startTimestamp","timestamps","time","push","getBlocksFromTimestamps","multiQuery","tokenPrices","forEach","priceKey","tokenPriceIndex","findIndex","tokenPrice","formattedHistory","i","open","close","high","low","POOLS_FOR_TOKEN","fetchPoolsForToken","asToken0","asToken1","useProtocolData","useSelector","state","info","protocol","overview","dispatch","useDispatch","useCallback","updateProtocolData","useProtocolChartData","chartData","updateProtocolChartData","useProtocolTransactions","transactions","transactionsData","updateProtocolTransactions","useAllPoolData","byAddress","useAddPoolKeys","addPoolKeys","allPoolData","addNewPoolKeys","untrackedAddresses","filter","pool","useAllTokenData","useAddTokenKeys","addTokenKeys","useTokenDatas","allTokenData","addNewTokenKeys","useMemo","token","ProtocolUpdater","setProtocolData","fetchedProtocolData","updateChartData","fetchedChartData","chartError","updateTransactions","PoolUpdater","updatePoolData","useUpdatePoolData","unfetchedPoolAddresses","poolDataError","poolDatas","TokenUpdater","updateTokenDatas","updateTokenData","useUpdateTokenData","unfetchedTokenAddresses","key","tokenDataError","tokenDatas","TOKEN_SEARCH","POOL_SEARCH","getIds","entityArrays","ids","entities","currentTokenArray","entity","Array","Set","useFetchSearchResults","searchString","loading","searchResults","setSearchResults","searchStringTooShort","MINIMUM_SEARCH_CHARACTERS","toUpperCase","charAt","slice","toLowerCase","tokenIds","asAddress","asSymbol","asName","as0","as1","search","tokenDatasFull","poolDatasFull","tokensLoading","poolsLoading","BAD_SRCS","LogoLoader","src","alt","rest","refresh","srcFailedLoading","onError","StyledLogo","size","CurrencyLogo","checksummedAddress","isAddress","DoubleCurrencyWrapper","div","DoubleCurrencyLogo","address0","address1","HoverIcon","SaveIcon","fill","useTheme","stroke","warning","color","textDisabled","Container","StyledInput","Input","inputSecondary","Menu","hide","secondary","mediaQueries","sm","md","Blackout","ResponsiveGrid","Break","cardBorder","HoverText","HoverRowLink","OptionButton","enabled","primary","tokenIncludesSearchTerm","value","Search","history","useHistory","useMatchBreakpoints","isXs","isSm","useTranslation","inputRef","useRef","menuRef","showMoreRef","showMenu","setShowMenu","setValue","debouncedSearchTerm","useDebounce","tokensShown","setTokensShown","poolsShown","setPoolsShown","handleOutsideClick","e","menuClick","contains","target","inputCLick","showMoreClick","document","addEventListener","querySelector","style","overflow","removeEventListener","useWatchlistTokens","savedTokens","addSavedToken","useWatchlistPools","savedPools","addSavedPool","handleItemClick","watchListTokenData","watchListTokenLoading","watchListPoolData","watchListPoolLoading","showWatchlist","setShowWatchlist","tokensForList","t0","t1","poolForList","poolIncludesSearchTerm","p0","p1","onChange","placeholder","ref","onFocus","mb","onClick","bold","textAlign","fontSize","ml","marginLeft","stopPropagation","formatAmount","isLoading","noTokensFound","noWatchlistTokens","showMessage","noTokensMessage","contentUnderTokenList","whiteSpace","noPoolsFound","noWatchlistPools","noPoolsMessage","contentUnderPoolList","NavWrapper","gradients","cardHeader","InfoNav","activeIndex","useRouteMatch","scale","variant","as","Link","width","HoverUpdater","locale","payload","setHoverValue","setHoverDate","toLocaleString","year","day","month","LineChart","currentLanguage","ResponsiveContainer","AreaChart","height","margin","top","right","left","bottom","onMouseLeave","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","dataKey","axisLine","tickLine","tickFormatter","toLocaleDateString","minTickGap","YAxis","tickCount","val","orientation","tick","dx","Tooltip","cursor","contentStyle","display","formatter","tooltipValue","props","Area","strokeWidth","Percent","Number","isNaN","isNegative","Math","abs","ClickableColumnHeader","Text","TableWrapper","radii","PageButtons","Arrow","LinkWrapper","ResponsiveLogo","TableLoader","loadingRow","DataRow","index","alignItems","fontWeight","notation","SORT_FIELD","TokenTable","maxItems","sortField","setSortField","sortDirection","setSortDirection","page","setPage","maxPage","setMaxPage","extraPages","floor","sortedTokens","handleSort","newField","arrow","field","textTransform","Fragment","LoadingRow","PoolTable","ITEMS_PER_INFO_TABLE_PAGE","sortedPools","CustomBar","x","y","rx","Chart","BarChart","backgroundDisabled","Bar","shape","RadioGroup","transaction","abs0","abs1","outputTokenSymbol","inputTokenSymbol","href","getBscScanLink","truncateHash","formatDistanceToNowStrict","TransactionTable","txFilter","setTxFilter","sortedTransactions","toBeAbsList","firstField","secondField","filteredTransactions","tx","handleFilter","newFilter","flexDirection","checked","justifyContent","ChartCardsContainer","Overview","liquidityHover","setLiquidityHover","liquidityDateHover","setLiquidityDateHover","volumeHover","setVolumeHover","volumeDateHover","setVolumeDateHover","currentDate","formattedLiquidityData","fromUnixTime","formattedVolumeData","allTokens","formattedTokens","somePoolsAreLoading","some","Page","mt","PoolsOverview","watchlistPools","px","py","CandleChart","setLabel","chartRef","chartCreated","setChart","handleResize","parentElement","resize","clientWidth","timeScale","fitContent","scrollToPosition","isClient","window","chart","createChart","layout","backgroundColor","textColor","fontFamily","rightPriceScale","scaleMargins","borderVisible","secondsVisible","tickMarkFormatter","unixTime","format","watermark","visible","grid","horzLines","vertLines","crosshair","horzLine","labelVisible","mode","vertLine","labelBackgroundColor","series","addCandlestickSeries","upColor","success","downColor","failure","borderDownColor","borderUpColor","wickDownColor","wickUpColor","setData","subscribeCrosshairMove","param","point","hour","minute","timeZone","seriesPrices","get","ChartCard","tokenPriceData","VOLUME","view","setView","hoverValue","hoverDate","formattedTvlData","LIQUIDITY","PRICE","pt","valueToDisplay","getLatestValueDisplay","small","ContentLayout","TokenButton","LockedTokensContainer","PoolPage","routeAddress","match","params","showWeeklyData","setShowWeeklyData","useTooltip","tooltip","tooltipVisible","targetRef","scrollTo","updatePoolChartData","poolAddress","usePoolChartData","updatePoolTransactions","usePoolTransactions","addPoolToWatchlist","mr","displayThreshold","tokenPrecision","flex","onItemClick","totalFees","CardWrapper","TopMoverCard","Box","ScrollableRow","DataCard","lineHeight","TopTokenMovers","topPriceIncrease","min","increaseRef","moveLeftRef","scrollInterval","setInterval","scrollLeft","scrollWidth","clearInterval","entry","my","TokensOverview","watchListTokens","useCMCLink","cmcPageUrl","setCMCPageUrl","result","status","json","then","url","fetchLink","StyledCMCLink","UIKitLink","DEFAULT_TIME_WINDOW","weeks","TokenPage","cmcLink","useTokenData","poolsForToken","addTokenPoolAddresses","usePoolsForToken","updateTokenTransactions","useTokenTransactions","updateTokenChartData","useTokenChartData","priceData","timeWindow","oldestTimestampFetched","oldestFetchedTimestamp","utcCurrentTime","startOfHour","sub","fetchingError","updateTokenPriceData","secondsInterval","useTokenPriceData","ONE_HOUR_SECONDS","adjustedPriceData","getTime","watchlistTokens","addWatchlistToken","rel","isInteger","RedirectInvalidToken","Info","path","exact","Pools","Tokens","component"],"mappings":"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","file":"static/js/34.e3bc5987.chunk.js","sourcesContent":["import React from 'react'\nimport { Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst Wrapper = styled(Flex)`\n  overflow-x: scroll;\n  padding: 0;\n  border-radius: 24px 24px 0 0;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  scrollbar-width: none; /* Firefox */\n`\n\nconst Inner = styled(Flex)`\n  justify-content: space-between;\n  background-color: ${({ theme }) => theme.colors.input};\n  width: 100%;\n`\n\ninterface TabProps {\n  isActive?: boolean\n  onClick?: () => void\n}\n\nexport const TabToggle = styled.button<TabProps>`\n  display: inline-flex;\n  justify-content: center;\n  cursor: pointer;\n  flex: 1;\n  border: 0;\n  outline: 0;\n  padding: 16px;\n  margin: 0;\n  border-radius: 24px 24px 0 0;\n  font-size: 16px;\n  font-weight: 600;\n  color: ${({ theme, isActive }) => (isActive ? theme.colors.text : theme.colors.textSubtle)};\n  background-color: ${({ theme, isActive }) => (isActive ? theme.card.background : theme.colors.input)};\n`\n\ninterface TabToggleGroupProps {\n  children: React.ReactElement[]\n}\n\nexport const TabToggleGroup: React.FC<TabToggleGroupProps> = ({ children }) => {\n  return (\n    <Wrapper p={['0 4px', '0 16px']}>\n      <Inner>{children}</Inner>\n    </Wrapper>\n  )\n}\n","export interface Block {\n  number: number\n  timestamp: string\n}\n\nexport interface ChartEntry {\n  date: number\n  volumeUSD: number\n  liquidityUSD: number\n}\n\n/**\n * Formatted type for Candlestick charts\n */\nexport interface PriceChartEntry {\n  time: number\n  open: number\n  close: number\n  high: number\n  low: number\n}\n\nexport enum TransactionType {\n  SWAP,\n  MINT,\n  BURN,\n}\n\nexport type Transaction = {\n  type: TransactionType\n  hash: string\n  timestamp: string\n  sender: string\n  token0Symbol: string\n  token1Symbol: string\n  token0Address: string\n  token1Address: string\n  amountUSD: number\n  amountToken0: number\n  amountToken1: number\n}\n\nexport interface ProtocolData {\n  volumeUSD: number\n  volumeUSDChange: number // in 24h, as percentage\n\n  liquidityUSD: number\n  liquidityUSDChange: number // in 24h, as percentage\n\n  txCount: number\n  txCountChange: number\n}\n\nexport interface ProtocolState {\n  readonly overview?: ProtocolData\n\n  readonly chartData?: ChartEntry[]\n\n  readonly transactions?: Transaction[]\n}\n\n// POOLS\n\nexport interface PoolData {\n  address: string\n\n  token0: {\n    name: string\n    symbol: string\n    address: string\n  }\n\n  token1: {\n    name: string\n    symbol: string\n    address: string\n  }\n\n  volumeUSD: number\n  volumeUSDChange: number\n  volumeUSDWeek: number\n  volumeUSDChangeWeek: number\n\n  totalFees24h: number\n  totalFees7d: number\n  lpFees24h: number\n  lpFees7d: number\n  lpApr7d: number\n\n  liquidityUSD: number\n  liquidityUSDChange: number\n\n  token0Price: number\n  token1Price: number\n\n  liquidityToken0: number\n  liquidityToken1: number\n}\n\nexport interface PoolsState {\n  byAddress: {\n    [address: string]: {\n      data?: PoolData\n      chartData?: ChartEntry[]\n      transactions?: Transaction[]\n    }\n  }\n}\n\n// TOKENS\n\nexport type TokenData = {\n  exists: boolean\n\n  name: string\n  symbol: string\n  address: string\n\n  volumeUSD: number\n  volumeUSDChange: number\n  volumeUSDWeek: number\n  txCount: number\n\n  liquidityToken: number\n  liquidityUSD: number\n  liquidityUSDChange: number\n\n  priceUSD: number\n  priceUSDChange: number\n  priceUSDChangeWeek: number\n}\n\nexport interface TokensState {\n  byAddress: {\n    [address: string]: {\n      data?: TokenData\n      poolAddresses?: string[]\n      chartData?: ChartEntry[]\n      priceData: {\n        oldestFetchedTimestamp?: number\n        [secondsInterval: number]: PriceChartEntry[] | undefined\n      }\n      transactions?: Transaction[]\n    }\n  }\n}\n\n// Info redux state\nexport interface InfoState {\n  protocol: ProtocolState\n  pools: PoolsState\n  tokens: TokensState\n}\n","import { TOTAL_FEE, LP_HOLDERS_FEE, WEEKS_IN_YEAR } from 'config/constants/info'\n\n/**\n * Get increase/decrease of value compared to the previous value (e.g. 24h volume compared to 24h volume the day before )\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\nexport const getAmountChange = (valueNow?: number, valueBefore?: number) => {\n  if (valueNow && valueBefore) {\n    return valueNow - valueBefore\n  }\n  if (valueNow) {\n    return valueNow\n  }\n  return 0\n}\n\n/**\n * Get increase/decrease of value compared to the previous value as a percentage\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\nexport const getPercentChange = (valueNow?: number, valueBefore?: number): number => {\n  if (valueNow && valueBefore) {\n    return ((valueNow - valueBefore) / valueBefore) * 100\n  }\n  return 0\n}\n\n/**\n * Given current value and value 1 and 2 periods (e.g. 1day + 2days, 1week - 2weeks) returns the amount change for latest period\n * and percentage change compared to the previous period.\n * @param valueNow - current value\n * @param valueOnePeriodAgo - value 1 period ago (e.g. 1 day or 1 week ago), period unit must be same as valueTwoPeriodsAgo\n * @param valueTwoPeriodsAgo - value 2 periods ago (e.g. 2 days or 2 weeks ago), period unit must be same as valueOnePeriodAgo\n * @returns amount change for the latest period and percentage change compared to previous period\n */\nexport const getChangeForPeriod = (\n  valueNow?: number,\n  valueOnePeriodAgo?: number,\n  valueTwoPeriodsAgo?: number,\n): [number, number] => {\n  const currentPeriodAmount = getAmountChange(valueNow, valueOnePeriodAgo)\n  const previousPeriodAmount = getAmountChange(valueOnePeriodAgo, valueTwoPeriodsAgo)\n  const percentageChange = getPercentChange(currentPeriodAmount, previousPeriodAmount)\n  return [currentPeriodAmount, percentageChange]\n}\n\nexport const getLpFeesAndApr = (volumeUSD: number, volumeUSDWeek: number, liquidityUSD: number) => {\n  const totalFees24h = volumeUSD * TOTAL_FEE\n  const totalFees7d = volumeUSDWeek * TOTAL_FEE\n  const lpFees24h = volumeUSD * LP_HOLDERS_FEE\n  const lpFees7d = volumeUSDWeek * LP_HOLDERS_FEE\n\n  const lpApr7d = liquidityUSD > 0 ? (volumeUSDWeek * LP_HOLDERS_FEE * WEEKS_IN_YEAR * 100) / liquidityUSD : 0\n  return {\n    totalFees24h,\n    totalFees7d,\n    lpFees24h,\n    lpFees7d,\n    lpApr7d: lpApr7d !== Infinity ? lpApr7d : 0,\n  }\n}\n","import { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { getChangeForPeriod, getPercentChange } from 'views/Info/utils/infoDataHelpers'\nimport { ProtocolData } from 'state/info/types'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\n\ninterface pattieswapFactory {\n  totalTransactions: string\n  totalVolumeUSD: string\n  totalLiquidityUSD: string\n}\n\ninterface OverviewResponse {\n  pattieswapFactories: pattieswapFactory[]\n}\n\n/**\n * Latest Liquidity, Volume and Transaction count\n */\nconst getOverviewData = async (block?: number): Promise<{ data?: OverviewResponse; error: boolean }> => {\n  try {\n    const query = gql`query overview {\n      pattieswapFactories(\n        ${block ? `block: { number: ${block}}` : ``} \n        first: 1) {\n        totalTransactions\n        totalVolumeUSD\n        totalLiquidityUSD\n      }\n    }`\n    const data = await request<OverviewResponse>(INFO_CLIENT, query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch info overview', error)\n    return { data: null, error: true }\n  }\n}\n\nconst formatpattieswapFactoryResponse = (rawpattieswapFactory?: pattieswapFactory) => {\n  if (rawpattieswapFactory) {\n    return {\n      totalTransactions: parseFloat(rawpattieswapFactory.totalTransactions),\n      totalVolumeUSD: parseFloat(rawpattieswapFactory.totalVolumeUSD),\n      totalLiquidityUSD: parseFloat(rawpattieswapFactory.totalLiquidityUSD),\n    }\n  }\n  return null\n}\n\ninterface ProtocolFetchState {\n  error: boolean\n  data?: ProtocolData\n}\n\nconst useFetchProtocolData = (): ProtocolFetchState => {\n  const [fetchState, setFetchState] = useState<ProtocolFetchState>({\n    error: false,\n  })\n  const [t24, t48] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24, t48])\n  const [block24, block48] = blocks ?? []\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await getOverviewData()\n      const { error: error24, data: data24 } = await getOverviewData(block24?.number ?? undefined)\n      const { error: error48, data: data48 } = await getOverviewData(block48?.number ?? undefined)\n      const anyError = error || error24 || error48\n      const overviewData = formatpattieswapFactoryResponse(data?.pattieswapFactories?.[0])\n      const overviewData24 = formatpattieswapFactoryResponse(data24?.pattieswapFactories?.[0])\n      const overviewData48 = formatpattieswapFactoryResponse(data48?.pattieswapFactories?.[0])\n      const allDataAvailable = overviewData && overviewData24 && overviewData48\n      if (anyError || !allDataAvailable) {\n        setFetchState({\n          error: true,\n        })\n      } else {\n        const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n          overviewData.totalVolumeUSD,\n          overviewData24.totalVolumeUSD,\n          overviewData48.totalVolumeUSD,\n        )\n        const liquidityUSDChange = getPercentChange(overviewData.totalLiquidityUSD, overviewData24.totalLiquidityUSD)\n        // 24H transactions\n        const [txCount, txCountChange] = getChangeForPeriod(\n          overviewData.totalTransactions,\n          overviewData24.totalTransactions,\n          overviewData48.totalTransactions,\n        )\n        const protocolData: ProtocolData = {\n          volumeUSD,\n          volumeUSDChange: typeof volumeUSDChange === 'number' ? volumeUSDChange : 0,\n          liquidityUSD: overviewData.totalLiquidityUSD,\n          liquidityUSDChange,\n          txCount,\n          txCountChange,\n        }\n        setFetchState({\n          error: false,\n          data: protocolData,\n        })\n      }\n    }\n    const allBlocksAvailable = block24?.number && block48?.number\n    if (allBlocksAvailable && !blockError && !fetchState.data) {\n      fetch()\n    }\n  }, [block24, block48, blockError, fetchState])\n\n  return fetchState\n}\n\nexport default useFetchProtocolData\n","import { ONE_DAY_UNIX, PCS_V2_START } from 'config/constants/info'\nimport { getUnixTime } from 'date-fns'\nimport { TransactionType } from 'state/info/types'\nimport { ChartEntry } from '../types'\nimport { MintResponse, SwapResponse, BurnResponse, TokenDayData, PairDayData, PancakeDayData } from './types'\n\nexport const mapMints = (mint: MintResponse) => {\n  return {\n    type: TransactionType.MINT,\n    hash: mint.id.split('-')[0],\n    timestamp: mint.timestamp,\n    sender: mint.to,\n    token0Symbol: mint.pair.token0.symbol,\n    token1Symbol: mint.pair.token1.symbol,\n    token0Address: mint.pair.token0.id,\n    token1Address: mint.pair.token1.id,\n    amountUSD: parseFloat(mint.amountUSD),\n    amountToken0: parseFloat(mint.amount0),\n    amountToken1: parseFloat(mint.amount1),\n  }\n}\n\nexport const mapBurns = (burn: BurnResponse) => {\n  return {\n    type: TransactionType.BURN,\n    hash: burn.id.split('-')[0],\n    timestamp: burn.timestamp,\n    sender: burn.sender,\n    token0Symbol: burn.pair.token0.symbol,\n    token1Symbol: burn.pair.token1.symbol,\n    token0Address: burn.pair.token0.id,\n    token1Address: burn.pair.token1.id,\n    amountUSD: parseFloat(burn.amountUSD),\n    amountToken0: parseFloat(burn.amount0),\n    amountToken1: parseFloat(burn.amount1),\n  }\n}\n\nexport const mapSwaps = (swap: SwapResponse) => {\n  return {\n    type: TransactionType.SWAP,\n    hash: swap.id.split('-')[0],\n    timestamp: swap.timestamp,\n    sender: swap.from,\n    token0Symbol: swap.pair.token0.symbol,\n    token1Symbol: swap.pair.token1.symbol,\n    token0Address: swap.pair.token0.id,\n    token1Address: swap.pair.token1.id,\n    amountUSD: parseFloat(swap.amountUSD),\n    amountToken0: parseFloat(swap.amount0In) - parseFloat(swap.amount0Out),\n    amountToken1: parseFloat(swap.amount1In) - parseFloat(swap.amount1Out),\n  }\n}\n\nexport const mapDayData = (tokenDayData: TokenDayData | PancakeDayData): ChartEntry => ({\n  date: tokenDayData.date,\n  volumeUSD: parseFloat(tokenDayData.dailyVolumeUSD),\n  liquidityUSD: parseFloat(tokenDayData.totalLiquidityUSD),\n})\n\nexport const mapPairDayData = (pairDayData: PairDayData): ChartEntry => ({\n  date: pairDayData.date,\n  volumeUSD: parseFloat(pairDayData.dailyVolumeUSD),\n  liquidityUSD: parseFloat(pairDayData.reserveUSD),\n})\n\ntype PoolOrTokenFetchFn = (skip: number, address: string) => Promise<{ data?: ChartEntry[]; error: boolean }>\ntype OverviewFetchFn = (skip: number) => Promise<{ data?: ChartEntry[]; error: boolean }>\n\n// Common helper function to retrieve chart data\n// Used for both Pool and Token charts\nexport const fetchChartData = async (\n  getEntityDayDatas: PoolOrTokenFetchFn | OverviewFetchFn,\n  address?: string,\n): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  let chartEntries: ChartEntry[] = []\n  let error = false\n  let skip = 0\n  let allFound = false\n\n  while (!allFound) {\n    // eslint-disable-next-line no-await-in-loop\n    const { data, error: fetchError } = await getEntityDayDatas(skip, address)\n    skip += 1000\n    allFound = data.length < 1000\n    error = fetchError\n    if (data) {\n      chartEntries = chartEntries.concat(data)\n    }\n  }\n\n  if (error || chartEntries.length === 0) {\n    return {\n      error: true,\n    }\n  }\n\n  const formattedDayDatas = chartEntries.reduce((accum: { [date: number]: ChartEntry }, dayData) => {\n    // At this stage we track unix day ordinal for each data point to check for empty days later\n    const dayOrdinal = parseInt((dayData.date / ONE_DAY_UNIX).toFixed(0))\n    return {\n      [dayOrdinal]: dayData,\n      ...accum,\n    }\n  }, {})\n\n  const availableDays = Object.keys(formattedDayDatas).map((dayOrdinal) => parseInt(dayOrdinal, 10))\n\n  const firstAvailableDayData = formattedDayDatas[availableDays[0]]\n  // fill in empty days ( there will be no day datas if no trades made that day )\n  let timestamp = firstAvailableDayData?.date ?? PCS_V2_START\n  let latestLiquidityUSD = firstAvailableDayData?.liquidityUSD ?? 0\n  const endTimestamp = getUnixTime(new Date())\n  while (timestamp < endTimestamp - ONE_DAY_UNIX) {\n    timestamp += ONE_DAY_UNIX\n    const dayOrdinal = parseInt((timestamp / ONE_DAY_UNIX).toFixed(0), 10)\n    if (!Object.keys(formattedDayDatas).includes(dayOrdinal.toString())) {\n      formattedDayDatas[dayOrdinal] = {\n        date: timestamp,\n        volumeUSD: 0,\n        liquidityUSD: latestLiquidityUSD,\n      }\n    } else {\n      latestLiquidityUSD = formattedDayDatas[dayOrdinal].liquidityUSD\n    }\n  }\n\n  return {\n    data: Object.values(formattedDayDatas),\n    error: false,\n  }\n}\n","import React, { useMemo, useState } from 'react'\nimport { Text, Box, Card, Flex, Skeleton } from '@pancakeswap/uikit'\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\nimport CandleChart from 'views/Info/components/InfoCharts/CandleChart'\nimport { TabToggleGroup, TabToggle } from 'components/TabToggle'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { ChartEntry, TokenData, PriceChartEntry } from 'state/info/types'\nimport { fromUnixTime } from 'date-fns'\n\nenum ChartView {\n  LIQUIDITY,\n  VOLUME,\n  PRICE,\n}\n\ninterface ChartCardProps {\n  variant: 'pool' | 'token'\n  chartData: ChartEntry[]\n  tokenData?: TokenData\n  tokenPriceData?: PriceChartEntry[]\n}\n\nconst ChartCard: React.FC<ChartCardProps> = ({ variant, chartData, tokenData, tokenPriceData }) => {\n  const [view, setView] = useState(ChartView.VOLUME)\n  const [hoverValue, setHoverValue] = useState<number | undefined>()\n  const [hoverDate, setHoverDate] = useState<string | undefined>()\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n\n  const currentDate = new Date().toLocaleString(locale, { month: 'short', year: 'numeric', day: 'numeric' })\n\n  const formattedTvlData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.liquidityUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n  const formattedVolumeData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.volumeUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const getLatestValueDisplay = () => {\n    let valueToDisplay = null\n    if (hoverValue) {\n      valueToDisplay = formatAmount(hoverValue)\n    } else if (view === ChartView.VOLUME && formattedVolumeData.length > 0) {\n      valueToDisplay = formatAmount(formattedVolumeData[formattedVolumeData.length - 1]?.value)\n    } else if (view === ChartView.LIQUIDITY && formattedTvlData.length > 0) {\n      valueToDisplay = formatAmount(formattedTvlData[formattedTvlData.length - 1]?.value)\n    } else if (view === ChartView.PRICE && tokenData?.priceUSD) {\n      valueToDisplay = formatAmount(tokenData.priceUSD)\n    }\n\n    return valueToDisplay ? (\n      <Text fontSize=\"24px\" bold>\n        ${valueToDisplay}\n      </Text>\n    ) : (\n      <Skeleton height=\"36px\" width=\"128px\" />\n    )\n  }\n\n  return (\n    <Card>\n      <TabToggleGroup>\n        <TabToggle isActive={view === ChartView.VOLUME} onClick={() => setView(ChartView.VOLUME)}>\n          <Text>{t('Volume')}</Text>\n        </TabToggle>\n        <TabToggle isActive={view === ChartView.LIQUIDITY} onClick={() => setView(ChartView.LIQUIDITY)}>\n          <Text>{t('Liquidity')}</Text>\n        </TabToggle>\n        {variant === 'token' && (\n          <TabToggle isActive={view === ChartView.PRICE} onClick={() => setView(ChartView.PRICE)}>\n            <Text>{t('Price')}</Text>\n          </TabToggle>\n        )}\n      </TabToggleGroup>\n\n      <Flex flexDirection=\"column\" px=\"24px\" pt=\"24px\">\n        {getLatestValueDisplay()}\n        <Text small color=\"secondary\">\n          {hoverDate || currentDate}\n        </Text>\n      </Flex>\n\n      <Box px=\"24px\" height={variant === 'token' ? '250px' : '335px'}>\n        {view === ChartView.LIQUIDITY ? (\n          <LineChart data={formattedTvlData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n        ) : view === ChartView.VOLUME ? (\n          <BarChart data={formattedVolumeData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n        ) : view === ChartView.PRICE ? (\n          <CandleChart data={tokenPriceData} setValue={setHoverValue} setLabel={setHoverDate} />\n        ) : null}\n      </Box>\n    </Card>\n  )\n}\n\nexport default ChartCard\n","/* eslint-disable no-await-in-loop */\nimport { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { PCS_V2_START } from 'config/constants/info'\nimport { ChartEntry } from 'state/info/types'\nimport { PancakeDayDatasResponse } from '../types'\nimport { fetchChartData, mapDayData } from '../helpers'\n\n/**\n * Data for displaying Liquidity and Volume charts on Overview page\n */\nconst PANCAKE_DAY_DATAS = gql`\n  query overviewCharts($startTime: Int!, $skip: Int!) {\n    pattieswapDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\n      date\n      dailyVolumeUSD\n      totalLiquidityUSD\n    }\n  }\n`\n\nconst getOverviewChartData = async (skip: number): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const { pattieswapDayDatas } = await request<PancakeDayDatasResponse>(INFO_CLIENT, PANCAKE_DAY_DATAS, {\n      startTime: PCS_V2_START,\n      skip,\n    })\n    const data = pattieswapDayDatas.map(mapDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch overview chart data', error)\n    return { error: true }\n  }\n}\n\n/**\n * Fetch historic chart data\n */\nconst useFetchGlobalChartData = (): {\n  error: boolean\n  data: ChartEntry[] | undefined\n} => {\n  const [overviewChartData, setOverviewChartData] = useState<ChartEntry[] | undefined>()\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { data } = await fetchChartData(getOverviewChartData)\n      if (data) {\n        setOverviewChartData(data)\n      } else {\n        setError(true)\n      }\n    }\n    if (!overviewChartData && !error) {\n      fetch()\n    }\n  }, [overviewChartData, error])\n\n  return {\n    error,\n    data: overviewChartData,\n  }\n}\n\nexport default useFetchGlobalChartData\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { Transaction } from 'state/info/types'\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\n\n/**\n * Transactions for Transaction table on the Home page\n */\nconst GLOBAL_TRANSACTIONS = gql`\n  query overviewTransactions {\n    mints: mints(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps: swaps(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burns: burns(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\ninterface TransactionResults {\n  mints: MintResponse[]\n  swaps: SwapResponse[]\n  burns: BurnResponse[]\n}\n\nconst fetchTopTransactions = async (): Promise<Transaction[] | undefined> => {\n  try {\n    const data = await request<TransactionResults>(INFO_CLIENT, GLOBAL_TRANSACTIONS)\n\n    if (!data) {\n      return undefined\n    }\n\n    const mints = data.mints.map(mapMints)\n    const burns = data.burns.map(mapBurns)\n    const swaps = data.swaps.map(mapSwaps)\n\n    return [...mints, ...burns, ...swaps].sort((a, b) => {\n      return parseInt(b.timestamp, 10) - parseInt(a.timestamp, 10)\n    })\n  } catch {\n    return undefined\n  }\n}\n\nexport default fetchTopTransactions\n","import { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\n\ninterface TopPoolsResponse {\n  pairDayDatas: {\n    id: string\n  }[]\n}\n\n/**\n * Initial pools to display on the home page\n */\nconst fetchTopPools = async (timestamp24hAgo: number): Promise<string[]> => {\n  try {\n    const query = gql`\n      query topPools($blacklist: [String!], $timestamp24hAgo: Int) {\n        pairDayDatas(\n          first: 30\n          where: { token0_not_in: $blacklist, token1_not_in: $blacklist, date_gt: $timestamp24hAgo }\n          orderBy: dailyVolumeUSD\n          orderDirection: desc\n        ) {\n          id\n        }\n      }\n    `\n\n    // const query = gql`\n    //   query topPools($blacklist: [String!], $timestamp24hAgo: Int) {\n    //     pairDayDatas(\n    //       first: 30\n    //       where: { dailyTxns_gt: 300, token0_not_in: $blacklist, token1_not_in: $blacklist, date_gt: $timestamp24hAgo }\n    //       orderBy: dailyVolumeUSD\n    //       orderDirection: desc\n    //     ) {\n    //       id\n    //     }\n    //   }\n    // `\n    const data = await request<TopPoolsResponse>(INFO_CLIENT, query, { blacklist: TOKEN_BLACKLIST, timestamp24hAgo })\n    // pairDayDatas id has compound id \"0xPOOLADDRESS-NUMBERS\", extracting pool address with .split('-')\n    return data.pairDayDatas.map((p) => p.id.split('-')[0])\n  } catch (error) {\n    console.error('Failed to fetch top pools', error)\n    return []\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useTopPoolAddresses = (): string[] => {\n  const [topPoolAddresses, setTopPoolAddresses] = useState([])\n  const [timestamp24hAgo] = getDeltaTimestamps()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const addresses = await fetchTopPools(timestamp24hAgo)\n      setTopPoolAddresses(addresses)\n    }\n    if (topPoolAddresses.length === 0) {\n      fetch()\n    }\n  }, [topPoolAddresses, timestamp24hAgo])\n\n  return topPoolAddresses\n}\n\nexport default useTopPoolAddresses\n","/* eslint-disable no-param-reassign */\nimport { useEffect, useState } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { PoolData } from 'state/info/types'\nimport { getChangeForPeriod, getLpFeesAndApr, getPercentChange } from 'views/Info/utils/infoDataHelpers'\n\ninterface PoolFields {\n  id: string\n  reserve0: string\n  reserve1: string\n  reserveUSD: string\n  volumeUSD: string\n  token0Price: string\n  token1Price: string\n  token0: {\n    id: string\n    symbol: string\n    name: string\n  }\n  token1: {\n    id: string\n    symbol: string\n    name: string\n  }\n}\n\ninterface FormattedPoolFields\n  extends Omit<PoolFields, 'volumeUSD' | 'reserveUSD' | 'reserve0' | 'reserve1' | 'token0Price' | 'token1Price'> {\n  volumeUSD: number\n  reserveUSD: number\n  reserve0: number\n  reserve1: number\n  token0Price: number\n  token1Price: number\n}\n\ninterface PoolsQueryResponse {\n  now: PoolFields[]\n  oneDayAgo: PoolFields[]\n  twoDaysAgo: PoolFields[]\n  oneWeekAgo: PoolFields[]\n  twoWeeksAgo: PoolFields[]\n}\n\n/**\n * Data for displaying pool tables (on multiple pages, used throughout the site)\n * Note: Don't try to refactor it to use variables, server throws error if blocks passed as undefined variable\n * only works if its hard-coded into query string\n */\nconst POOL_AT_BLOCK = (block: number | null, pools: string[]) => {\n  const blockString = block ? `block: {number: ${block}}` : ``\n  const addressesString = `[\"${pools.join('\",\"')}\"]`\n  return `pairs(\n    where: { id_in: ${addressesString} }\n    ${blockString}\n    orderBy: trackedReserveBNB\n    orderDirection: desc\n  ) {\n    id\n    reserve0\n    reserve1\n    reserveUSD\n    volumeUSD\n    token0Price\n    token1Price\n    token0 {\n      id\n      symbol\n      name\n    }\n    token1 {\n      id\n      symbol\n      name\n    }\n  }`\n}\n\nconst fetchPoolData = async (\n  block24h: number,\n  block48h: number,\n  block7d: number,\n  block14d: number,\n  poolAddresses: string[],\n) => {\n  try {\n    const query = gql`\n      query pools {\n        now: ${POOL_AT_BLOCK(null, poolAddresses)}\n        oneDayAgo: ${POOL_AT_BLOCK(block24h, poolAddresses)}\n        twoDaysAgo: ${POOL_AT_BLOCK(block48h, poolAddresses)}\n        oneWeekAgo: ${POOL_AT_BLOCK(block7d, poolAddresses)}\n        twoWeeksAgo: ${POOL_AT_BLOCK(block14d, poolAddresses)}\n      }\n    `\n    const data = await request<PoolsQueryResponse>(INFO_CLIENT, query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch pool data', error)\n    return { error: true }\n  }\n}\n\n// Transforms pools into \"0xADDRESS: { ...PoolFields }\" format and cast strings to numbers\nconst parsePoolData = (pairs?: PoolFields[]) => {\n  if (!pairs) {\n    return {}\n  }\n  return pairs.reduce((accum: { [address: string]: FormattedPoolFields }, poolData) => {\n    const { volumeUSD, reserveUSD, reserve0, reserve1, token0Price, token1Price } = poolData\n    accum[poolData.id] = {\n      ...poolData,\n      volumeUSD: parseFloat(volumeUSD),\n      reserveUSD: parseFloat(reserveUSD),\n      reserve0: parseFloat(reserve0),\n      reserve1: parseFloat(reserve1),\n      token0Price: parseFloat(token0Price),\n      token1Price: parseFloat(token1Price),\n    }\n    return accum\n  }, {})\n}\n\ninterface PoolDatas {\n  error: boolean\n  data?: {\n    [address: string]: PoolData\n  }\n}\n\n/**\n * Fetch top pools by liquidity\n */\nconst usePoolDatas = (poolAddresses: string[]): PoolDatas => {\n  const [fetchState, setFetchState] = useState<PoolDatas>({ error: false })\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await fetchPoolData(\n        block24h.number,\n        block48h.number,\n        block7d.number,\n        block14d.number,\n        poolAddresses,\n      )\n      if (error) {\n        setFetchState({ error: true })\n      } else {\n        const formattedPoolData = parsePoolData(data?.now)\n        const formattedPoolData24h = parsePoolData(data?.oneDayAgo)\n        const formattedPoolData48h = parsePoolData(data?.twoDaysAgo)\n        const formattedPoolData7d = parsePoolData(data?.oneWeekAgo)\n        const formattedPoolData14d = parsePoolData(data?.twoWeeksAgo)\n\n        // Calculate data and format\n        const formatted = poolAddresses.reduce((accum: { [address: string]: PoolData }, address) => {\n          // Undefined data is possible if pool is brand new and didn't exist one day ago or week ago.\n          const current: FormattedPoolFields | undefined = formattedPoolData[address]\n          const oneDay: FormattedPoolFields | undefined = formattedPoolData24h[address]\n          const twoDays: FormattedPoolFields | undefined = formattedPoolData48h[address]\n          const week: FormattedPoolFields | undefined = formattedPoolData7d[address]\n          const twoWeeks: FormattedPoolFields | undefined = formattedPoolData14d[address]\n\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n            current?.volumeUSD,\n            oneDay?.volumeUSD,\n            twoDays?.volumeUSD,\n          )\n          const [volumeUSDWeek, volumeUSDChangeWeek] = getChangeForPeriod(\n            current?.volumeUSD,\n            week?.volumeUSD,\n            twoWeeks?.volumeUSD,\n          )\n\n          const liquidityUSD = current ? current.reserveUSD : 0\n\n          const liquidityUSDChange = getPercentChange(current?.reserveUSD, oneDay?.reserveUSD)\n\n          const liquidityToken0 = current ? current.reserve0 : 0\n          const liquidityToken1 = current ? current.reserve1 : 0\n\n          const { totalFees24h, totalFees7d, lpFees24h, lpFees7d, lpApr7d } = getLpFeesAndApr(\n            volumeUSD,\n            volumeUSDWeek,\n            liquidityUSD,\n          )\n\n          if (current) {\n            accum[address] = {\n              address,\n              token0: {\n                address: current.token0.id,\n                name: current.token0.name,\n                symbol: current.token0.symbol,\n              },\n              token1: {\n                address: current.token1.id,\n                name: current.token1.name,\n                symbol: current.token1.symbol,\n              },\n              token0Price: current.token0Price,\n              token1Price: current.token1Price,\n              volumeUSD,\n              volumeUSDChange,\n              volumeUSDWeek,\n              volumeUSDChangeWeek,\n              totalFees24h,\n              totalFees7d,\n              lpFees24h,\n              lpFees7d,\n              lpApr7d,\n              liquidityUSD,\n              liquidityUSDChange,\n              liquidityToken0,\n              liquidityToken1,\n            }\n          }\n\n          return accum\n        }, {})\n        setFetchState({ data: formatted, error: false })\n      }\n    }\n\n    const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\n    if (poolAddresses.length > 0 && allBlocksAvailable && !blockError) {\n      fetch()\n    }\n  }, [poolAddresses, block24h, block48h, block7d, block14d, blockError])\n\n  return fetchState\n}\n\nexport default usePoolDatas\n","import { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\n\nexport interface BnbPrices {\n  current: number\n  oneDay: number\n  twoDay: number\n  week: number\n}\n\nconst BNB_PRICES = gql`\n  query prices($block24: Int!, $block48: Int!, $blockWeek: Int!) {\n    current: bundle(id: \"1\") {\n      bnbPrice\n    }\n    oneDay: bundle(id: \"1\", block: { number: $block24 }) {\n      bnbPrice\n    }\n    twoDay: bundle(id: \"1\", block: { number: $block48 }) {\n      bnbPrice\n    }\n    oneWeek: bundle(id: \"1\", block: { number: $blockWeek }) {\n      bnbPrice\n    }\n  }\n`\n\ninterface PricesResponse {\n  current: {\n    bnbPrice: string\n  }\n  oneDay: {\n    bnbPrice: string\n  }\n  twoDay: {\n    bnbPrice: string\n  }\n  oneWeek: {\n    bnbPrice: string\n  }\n}\n\nconst fetchBnbPrices = async (\n  block24: number,\n  block48: number,\n  blockWeek: number,\n): Promise<{ bnbPrices: BnbPrices | undefined; error: boolean }> => {\n  try {\n    const data = await request<PricesResponse>(INFO_CLIENT, BNB_PRICES, {\n      block24,\n      block48,\n      blockWeek,\n    })\n    return {\n      error: false,\n      bnbPrices: {\n        current: parseFloat(data.current?.bnbPrice ?? '0'),\n        oneDay: parseFloat(data.oneDay?.bnbPrice ?? '0'),\n        twoDay: parseFloat(data.twoDay?.bnbPrice ?? '0'),\n        week: parseFloat(data.oneWeek?.bnbPrice ?? '0'),\n      },\n    }\n  } catch (error) {\n    console.error('Failed to fetch BNB prices', error)\n    return {\n      error: true,\n      bnbPrices: undefined,\n    }\n  }\n}\n\n/**\n * Returns BNB prices at current, 24h, 48h, and 7d intervals\n */\nexport const useBnbPrices = (): BnbPrices | undefined => {\n  const [prices, setPrices] = useState<BnbPrices | undefined>()\n  const [error, setError] = useState(false)\n\n  const [t24, t48, tWeek] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24, t48, tWeek])\n\n  useEffect(() => {\n    const fetch = async () => {\n      const [block24, block48, blockWeek] = blocks\n      const { bnbPrices, error: fetchError } = await fetchBnbPrices(block24.number, block48.number, blockWeek.number)\n      if (fetchError) {\n        setError(true)\n      } else {\n        setPrices(bnbPrices)\n      }\n    }\n    if (!prices && !error && blocks && !blockError) {\n      fetch()\n    }\n  }, [error, prices, blocks, blockError])\n\n  return prices\n}\n","/* eslint-disable no-param-reassign */\nimport { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { getPercentChange, getChangeForPeriod, getAmountChange } from 'views/Info/utils/infoDataHelpers'\nimport { TokenData } from 'state/info/types'\nimport { useBnbPrices } from 'views/Info/hooks/useBnbPrices'\n\ninterface TokenFields {\n  id: string\n  symbol: string\n  name: string\n  derivedBNB: string // Price in BNB per token\n  derivedUSD: string // Price in USD per token\n  tradeVolumeUSD: string\n  totalTransactions: string\n  totalLiquidity: string\n}\n\ninterface FormattedTokenFields\n  extends Omit<TokenFields, 'derivedBNB' | 'derivedUSD' | 'tradeVolumeUSD' | 'totalTransactions' | 'totalLiquidity'> {\n  derivedBNB: number\n  derivedUSD: number\n  tradeVolumeUSD: number\n  totalTransactions: number\n  totalLiquidity: number\n}\n\ninterface TokenQueryResponse {\n  now: TokenFields[]\n  oneDayAgo: TokenFields[]\n  twoDaysAgo: TokenFields[]\n  oneWeekAgo: TokenFields[]\n  twoWeeksAgo: TokenFields[]\n}\n\n/**\n * Main token data to display on Token page\n */\nconst TOKEN_AT_BLOCK = (block: number | undefined, tokens: string[]) => {\n  const addressesString = `[\"${tokens.join('\",\"')}\"]`\n  const blockString = block ? `block: {number: ${block}}` : ``\n  return `tokens(\n      where: {id_in: ${addressesString}}\n      ${blockString}\n      orderBy: tradeVolumeUSD\n      orderDirection: desc\n    ) {\n      id\n      symbol\n      name\n      derivedBNB\n      derivedUSD\n      tradeVolumeUSD\n      totalTransactions\n      totalLiquidity\n    }\n  `\n}\n\nconst fetchTokenData = async (\n  block24h: number,\n  block48h: number,\n  block7d: number,\n  block14d: number,\n  tokenAddresses: string[],\n) => {\n  try {\n    const query = gql`\n      query tokens {\n        now: ${TOKEN_AT_BLOCK(null, tokenAddresses)}\n        oneDayAgo: ${TOKEN_AT_BLOCK(block24h, tokenAddresses)}\n        twoDaysAgo: ${TOKEN_AT_BLOCK(block48h, tokenAddresses)}\n        oneWeekAgo: ${TOKEN_AT_BLOCK(block7d, tokenAddresses)}\n        twoWeeksAgo: ${TOKEN_AT_BLOCK(block14d, tokenAddresses)}\n      }\n    `\n    const data = await request<TokenQueryResponse>(INFO_CLIENT, query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch token data', error)\n    return { error: true }\n  }\n}\n\n// Transforms tokens into \"0xADDRESS: { ...TokenFields }\" format and cast strings to numbers\nconst parseTokenData = (tokens?: TokenFields[]) => {\n  if (!tokens) {\n    return {}\n  }\n  return tokens.reduce((accum: { [address: string]: FormattedTokenFields }, tokenData) => {\n    const { derivedBNB, derivedUSD, tradeVolumeUSD, totalTransactions, totalLiquidity } = tokenData\n    accum[tokenData.id] = {\n      ...tokenData,\n      derivedBNB: parseFloat(derivedBNB),\n      derivedUSD: parseFloat(derivedUSD),\n      tradeVolumeUSD: parseFloat(tradeVolumeUSD),\n      totalTransactions: parseFloat(totalTransactions),\n      totalLiquidity: parseFloat(totalLiquidity),\n    }\n    return accum\n  }, {})\n}\n\ninterface TokenDatas {\n  error: boolean\n  data?: {\n    [address: string]: TokenData\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useFetchedTokenDatas = (tokenAddresses: string[]): TokenDatas => {\n  const [fetchState, setFetchState] = useState<TokenDatas>({ error: false })\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\n  const bnbPrices = useBnbPrices()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await fetchTokenData(\n        block24h.number,\n        block48h.number,\n        block7d.number,\n        block14d.number,\n        tokenAddresses,\n      )\n      if (error) {\n        setFetchState({ error: true })\n      } else {\n        const parsed = parseTokenData(data?.now)\n        const parsed24 = parseTokenData(data?.oneDayAgo)\n        const parsed48 = parseTokenData(data?.twoDaysAgo)\n        const parsed7d = parseTokenData(data?.oneWeekAgo)\n        const parsed14d = parseTokenData(data?.twoWeeksAgo)\n\n        // Calculate data and format\n        const formatted = tokenAddresses.reduce((accum: { [address: string]: TokenData }, address) => {\n          const current: FormattedTokenFields | undefined = parsed[address]\n          const oneDay: FormattedTokenFields | undefined = parsed24[address]\n          const twoDays: FormattedTokenFields | undefined = parsed48[address]\n          const week: FormattedTokenFields | undefined = parsed7d[address]\n          const twoWeeks: FormattedTokenFields | undefined = parsed14d[address]\n\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n            current?.tradeVolumeUSD,\n            oneDay?.tradeVolumeUSD,\n            twoDays?.tradeVolumeUSD,\n          )\n          const [volumeUSDWeek] = getChangeForPeriod(\n            current?.tradeVolumeUSD,\n            week?.tradeVolumeUSD,\n            twoWeeks?.tradeVolumeUSD,\n          )\n          const liquidityUSD = current ? current.totalLiquidity * current.derivedUSD : 0\n          const liquidityUSDOneDayAgo = oneDay ? oneDay.totalLiquidity * oneDay.derivedUSD : 0\n          const liquidityUSDChange = getPercentChange(liquidityUSD, liquidityUSDOneDayAgo)\n          const liquidityToken = current ? current.totalLiquidity : 0\n          // Prices of tokens for now, 24h ago and 7d ago\n          const priceUSD = current ? current.derivedBNB * bnbPrices.current : 0\n          const priceUSDOneDay = oneDay ? oneDay.derivedBNB * bnbPrices.oneDay : 0\n          const priceUSDWeek = week ? week.derivedBNB * bnbPrices.week : 0\n          const priceUSDChange = getPercentChange(priceUSD, priceUSDOneDay)\n          const priceUSDChangeWeek = getPercentChange(priceUSD, priceUSDWeek)\n          const txCount = getAmountChange(current?.totalTransactions, oneDay?.totalTransactions)\n\n          accum[address] = {\n            exists: !!current,\n            address,\n            name: current ? current.name : '',\n            symbol: current ? current.symbol : '',\n            volumeUSD,\n            volumeUSDChange,\n            volumeUSDWeek,\n            txCount,\n            liquidityUSD,\n            liquidityUSDChange,\n            liquidityToken,\n            priceUSD,\n            priceUSDChange,\n            priceUSDChangeWeek,\n          }\n\n          return accum\n        }, {})\n        setFetchState({ data: formatted, error: false })\n      }\n    }\n    const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\n    if (tokenAddresses.length > 0 && allBlocksAvailable && !blockError && bnbPrices) {\n      fetch()\n    }\n  }, [tokenAddresses, block24h, block48h, block7d, block14d, blockError, bnbPrices])\n\n  return fetchState\n}\n\nexport default useFetchedTokenDatas\n","import { useEffect, useState } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\n\ninterface TopTokensResponse {\n  tokenDayDatas: {\n    id: string\n  }[]\n}\n\n/**\n * Tokens to display on Home page\n * The actual data is later requested in tokenData.ts\n * Note: dailyTxns_gt: 300 is there to prevent fetching incorrectly priced tokens with high dailyVolumeUSD\n */\nconst fetchTopTokens = async (timestamp24hAgo: number): Promise<string[]> => {\n  try {\n    const query = gql`\n      query topTokens($blacklist: [String!], $timestamp24hAgo: Int) {\n        tokenDayDatas(\n          first: 30\n          where: { id_not_in: $blacklist, date_gt: $timestamp24hAgo }\n          orderBy: dailyVolumeUSD\n          orderDirection: desc\n        ) {\n          id\n        }\n      }\n    `\n    // const query = gql`\n    //   query topTokens($blacklist: [String!], $timestamp24hAgo: Int) {\n    //     tokenDayDatas(\n    //       first: 30\n    //       where: { dailyTxns_gt: 300, id_not_in: $blacklist, date_gt: $timestamp24hAgo }\n    //       orderBy: dailyVolumeUSD\n    //       orderDirection: desc\n    //     ) {\n    //       id\n    //     }\n    //   }\n    // `\n        \n    const data = await request<TopTokensResponse>(INFO_CLIENT, query, { blacklist: TOKEN_BLACKLIST, timestamp24hAgo })\n    // tokenDayDatas id has compound id \"0xTOKENADDRESS-NUMBERS\", extracting token address with .split('-')\n    return data.tokenDayDatas.map((t) => t.id.split('-')[0])\n  } catch (error) {\n    console.error('Failed to fetch top tokens', error)\n    return []\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useTopTokenAddresses = (): string[] => {\n  const [topTokenAddresses, setTopTokenAddresses] = useState([])\n  const [timestamp24hAgo] = getDeltaTimestamps()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const addresses = await fetchTopTokens(timestamp24hAgo)\n      setTopTokenAddresses(addresses)\n    }\n    if (topTokenAddresses.length === 0) {\n      fetch()\n    }\n  }, [topTokenAddresses, timestamp24hAgo])\n\n  return topTokenAddresses\n}\n\nexport default useTopTokenAddresses\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { ChartEntry } from 'state/info/types'\nimport { PCS_V2_START } from 'config/constants/info'\nimport { PairDayDatasResponse } from '../types'\nimport { mapPairDayData, fetchChartData } from '../helpers'\n\nconst getPoolChartData = async (skip: number, address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const query = gql`\n      query pairDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\n        pairDayDatas(\n          first: 1000\n          skip: $skip\n          where: { pairAddress: $address, date_gt: $startTime }\n          orderBy: date\n          orderDirection: asc\n        ) {\n          date\n          dailyVolumeUSD\n          reserveUSD\n        }\n      }\n    `\n    const { pairDayDatas } = await request<PairDayDatasResponse>(INFO_CLIENT, query, {\n      startTime: PCS_V2_START,\n      skip,\n      address,\n    })\n    const data = pairDayDatas.map(mapPairDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch pool chart data', error)\n    return { error: true }\n  }\n}\n\nconst fetchPoolChartData = async (address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  return fetchChartData(getPoolChartData, address)\n}\n\nexport default fetchPoolChartData\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { Transaction } from 'state/info/types'\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\n/**\n * Transactions of the given pool, used on Pool page\n */\nconst POOL_TRANSACTIONS = gql`\n  query poolTransactions($address: Bytes!) {\n    mints(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burns(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\n\ninterface TransactionResults {\n  mints: MintResponse[]\n  swaps: SwapResponse[]\n  burns: BurnResponse[]\n}\n\nconst fetchPoolTransactions = async (address: string): Promise<{ data?: Transaction[]; error: boolean }> => {\n  try {\n    const data = await request<TransactionResults>(INFO_CLIENT, POOL_TRANSACTIONS, {\n      address,\n    })\n    const mints = data.mints.map(mapMints)\n    const burns = data.burns.map(mapBurns)\n    const swaps = data.swaps.map(mapSwaps)\n    return { data: [...mints, ...burns, ...swaps], error: false }\n  } catch (error) {\n    console.error(`Failed to fetch transactions for pool ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchPoolTransactions\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { ChartEntry } from 'state/info/types'\nimport { PCS_V2_START } from 'config/constants/info'\nimport { TokenDayDatasResponse } from '../types'\nimport { mapDayData, fetchChartData } from '../helpers'\n\nconst getTokenChartData = async (skip: number, address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const query = gql`\n      query tokenDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\n        tokenDayDatas(\n          first: 1000\n          skip: $skip\n          where: { token: $address, date_gt: $startTime }\n          orderBy: date\n          orderDirection: asc\n        ) {\n          date\n          dailyVolumeUSD\n          totalLiquidityUSD\n        }\n      }\n    `\n    const { tokenDayDatas } = await request<TokenDayDatasResponse>(INFO_CLIENT, query, {\n      startTime: PCS_V2_START,\n      skip,\n      address,\n    })\n    const data = tokenDayDatas.map(mapDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch token chart data', error)\n    return { error: true }\n  }\n}\n\nconst fetchTokenChartData = async (address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  return fetchChartData(getTokenChartData, address)\n}\n\nexport default fetchTokenChartData\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { Transaction } from 'state/info/types'\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\n\n/**\n * Data to display transaction table on Token page\n */\nconst TOKEN_TRANSACTIONS = gql`\n  query tokenTransactions($address: Bytes!) {\n    mintsAs0: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    mintsAs1: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swapsAs0: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    swapsAs1: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { token1: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burnsAs0: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n    burnsAs1: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { token1: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\n\ninterface TransactionResults {\n  mintsAs0: MintResponse[]\n  mintsAs1: MintResponse[]\n  swapsAs0: SwapResponse[]\n  swapsAs1: SwapResponse[]\n  burnsAs0: BurnResponse[]\n  burnsAs1: BurnResponse[]\n}\n\nconst fetchTokenTransactions = async (address: string): Promise<{ data?: Transaction[]; error: boolean }> => {\n  try {\n    const data = await request<TransactionResults>(INFO_CLIENT, TOKEN_TRANSACTIONS, {\n      address,\n    })\n    const mints0 = data.mintsAs0.map(mapMints)\n    const mints1 = data.mintsAs1.map(mapMints)\n\n    const burns0 = data.burnsAs0.map(mapBurns)\n    const burns1 = data.burnsAs1.map(mapBurns)\n\n    const swaps0 = data.swapsAs0.map(mapSwaps)\n    const swaps1 = data.swapsAs1.map(mapSwaps)\n\n    return { data: [...mints0, ...mints1, ...burns0, ...burns1, ...swaps0, ...swaps1], error: false }\n  } catch (error) {\n    console.error(`Failed to fetch transactions for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchTokenTransactions\n","import { getUnixTime } from 'date-fns'\nimport { gql } from 'graphql-request'\nimport { getBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { multiQuery } from 'views/Info/utils/infoQueryHelpers'\nimport { PriceChartEntry } from 'state/info/types'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\n\nconst getPriceSubqueries = (tokenAddress: string, blocks: any) =>\n  blocks.map(\n    (block: any) => `\n      t${block.timestamp}:token(id:\"${tokenAddress}\", block: { number: ${block.number} }) { \n        derivedBNB\n      }\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \n        bnbPrice\n      }\n    `,\n  )\n\n/**\n * Price data for token and bnb based on block number\n */\nconst priceQueryConstructor = (subqueries: string[]) => {\n  return gql`\n    query tokenPriceData {\n      ${subqueries}\n    }\n  `\n}\n\nconst fetchTokenPriceData = async (\n  address: string,\n  interval: number,\n  startTimestamp: number,\n): Promise<{\n  data?: PriceChartEntry[]\n  error: boolean\n}> => {\n  // Construct timestamps to query against\n  const endTimestamp = getUnixTime(new Date())\n  const timestamps = []\n  let time = startTimestamp\n  while (time <= endTimestamp) {\n    timestamps.push(time)\n    time += interval\n  }\n  try {\n    const blocks = await getBlocksFromTimestamps(timestamps, 'asc', 500)\n    if (!blocks || blocks.length === 0) {\n      console.error('Error fetching blocks for timestamps', timestamps)\n      return {\n        error: false,\n      }\n    }\n\n    const prices: any | undefined = await multiQuery(\n      priceQueryConstructor,\n      getPriceSubqueries(address, blocks),\n      INFO_CLIENT,\n      200,\n    )\n\n    if (!prices) {\n      console.error('Price data failed to load')\n      return {\n        error: false,\n      }\n    }\n\n    // format token BNB price results\n    const tokenPrices: {\n      timestamp: string\n      derivedBNB: number\n      priceUSD: number\n    }[] = []\n\n    // Get Token prices in BNB\n    Object.keys(prices).forEach((priceKey) => {\n      const timestamp = priceKey.split('t')[1]\n      // if its BNB price e.g. `b123` split('t')[1] will be undefined and skip BNB price entry\n      if (timestamp) {\n        tokenPrices.push({\n          timestamp,\n          derivedBNB: prices[priceKey]?.derivedBNB ? parseFloat(prices[priceKey].derivedBNB) : 0,\n          priceUSD: 0,\n        })\n      }\n    })\n\n    // Go through BNB USD prices and calculate Token price based on it\n    Object.keys(prices).forEach((priceKey) => {\n      const timestamp = priceKey.split('b')[1]\n      // if its Token price e.g. `t123` split('b')[1] will be undefined and skip Token price entry\n      if (timestamp) {\n        const tokenPriceIndex = tokenPrices.findIndex((tokenPrice) => tokenPrice.timestamp === timestamp)\n        if (tokenPriceIndex >= 0) {\n          const { derivedBNB } = tokenPrices[tokenPriceIndex]\n          tokenPrices[tokenPriceIndex].priceUSD = parseFloat(prices[priceKey]?.bnbPrice ?? 0) * derivedBNB\n        }\n      }\n    })\n\n    // graphql-request does not guarantee same ordering of batched requests subqueries, hence sorting by timestamp from oldest to newest\n    tokenPrices.sort((a, b) => parseInt(a.timestamp, 10) - parseInt(b.timestamp, 10))\n\n    const formattedHistory = []\n\n    // for each timestamp, construct the open and close price\n    for (let i = 0; i < tokenPrices.length - 1; i++) {\n      formattedHistory.push({\n        time: parseFloat(tokenPrices[i].timestamp),\n        open: tokenPrices[i].priceUSD,\n        close: tokenPrices[i + 1].priceUSD,\n        high: tokenPrices[i + 1].priceUSD,\n        low: tokenPrices[i].priceUSD,\n      })\n    }\n\n    return { data: formattedHistory, error: false }\n  } catch (error) {\n    console.error(`Failed to fetch price data for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchTokenPriceData\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\n\n/**\n * Data for showing Pools table on the Token page\n */\nconst POOLS_FOR_TOKEN = gql`\n  query poolsForToken($address: Bytes!, $blacklist: [String!]) {\n    asToken0: pairs(\n      first: 15\n      orderBy: trackedReserveBNB\n      orderDirection: desc\n      where: { totalTransactions_gt: 100, token0: $address, token1_not_in: $blacklist }\n    ) {\n      id\n    }\n    asToken1: pairs(\n      first: 15\n      orderBy: trackedReserveBNB\n      orderDirection: desc\n      where: { totalTransactions_gt: 100, token1: $address, token0_not_in: $blacklist }\n    ) {\n      id\n    }\n  }\n`\n\ninterface PoolsForTokenResponse {\n  asToken0: {\n    id: string\n  }[]\n  asToken1: {\n    id: string\n  }[]\n}\n\nconst fetchPoolsForToken = async (\n  address: string,\n): Promise<{\n  error: boolean\n  addresses?: string[]\n}> => {\n  try {\n    const data = await request<PoolsForTokenResponse>(INFO_CLIENT, POOLS_FOR_TOKEN, {\n      address,\n      blacklist: TOKEN_BLACKLIST,\n    })\n    return {\n      error: false,\n      addresses: data.asToken0.concat(data.asToken1).map((p) => p.id),\n    }\n  } catch (error) {\n    console.error(`Failed to fetch pools for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchPoolsForToken\n","import { useCallback, useEffect, useState, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getUnixTime, startOfHour, Duration, sub } from 'date-fns'\nimport { AppState, AppDispatch } from 'state'\nimport { isAddress } from 'utils'\nimport { Transaction } from 'state/info/types'\nimport fetchPoolChartData from 'state/info/queries/pools/chartData'\nimport fetchPoolTransactions from 'state/info/queries/pools/transactions'\nimport fetchTokenChartData from 'state/info/queries/tokens/chartData'\nimport fetchTokenTransactions from 'state/info/queries/tokens/transactions'\nimport fetchTokenPriceData from 'state/info/queries/tokens/priceData'\nimport fetchPoolsForToken from 'state/info/queries/tokens/poolsForToken'\nimport {\n  updateProtocolData,\n  updateProtocolChartData,\n  updateProtocolTransactions,\n  updatePoolData,\n  addPoolKeys,\n  updatePoolChartData,\n  updatePoolTransactions,\n  updateTokenData,\n  addTokenKeys,\n  addTokenPoolAddresses,\n  updateTokenChartData,\n  updateTokenPriceData,\n  updateTokenTransactions,\n} from './actions'\nimport { ProtocolData, PoolData, TokenData, ChartEntry, PriceChartEntry } from './types'\n\n// Protocol hooks\n\nexport const useProtocolData = (): [ProtocolData | undefined, (protocolData: ProtocolData) => void] => {\n  const protocolData: ProtocolData | undefined = useSelector((state: AppState) => state.info.protocol.overview)\n\n  const dispatch = useDispatch<AppDispatch>()\n  const setProtocolData: (protocolData: ProtocolData) => void = useCallback(\n    (data: ProtocolData) => dispatch(updateProtocolData({ protocolData: data })),\n    [dispatch],\n  )\n\n  return [protocolData, setProtocolData]\n}\n\nexport const useProtocolChartData = (): [ChartEntry[] | undefined, (chartData: ChartEntry[]) => void] => {\n  const chartData: ChartEntry[] | undefined = useSelector((state: AppState) => state.info.protocol.chartData)\n  const dispatch = useDispatch<AppDispatch>()\n  const setChartData: (chartData: ChartEntry[]) => void = useCallback(\n    (data: ChartEntry[]) => dispatch(updateProtocolChartData({ chartData: data })),\n    [dispatch],\n  )\n  return [chartData, setChartData]\n}\n\nexport const useProtocolTransactions = (): [Transaction[] | undefined, (transactions: Transaction[]) => void] => {\n  const transactions: Transaction[] | undefined = useSelector((state: AppState) => state.info.protocol.transactions)\n  const dispatch = useDispatch<AppDispatch>()\n  const setTransactions: (transactions: Transaction[]) => void = useCallback(\n    (transactionsData: Transaction[]) => dispatch(updateProtocolTransactions({ transactions: transactionsData })),\n    [dispatch],\n  )\n  return [transactions, setTransactions]\n}\n\n// Pools hooks\n\nexport const useAllPoolData = (): {\n  [address: string]: { data?: PoolData }\n} => {\n  return useSelector((state: AppState) => state.info.pools.byAddress)\n}\n\nexport const useUpdatePoolData = (): ((pools: PoolData[]) => void) => {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback((pools: PoolData[]) => dispatch(updatePoolData({ pools })), [dispatch])\n}\n\nexport const useAddPoolKeys = (): ((addresses: string[]) => void) => {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback((poolAddresses: string[]) => dispatch(addPoolKeys({ poolAddresses })), [dispatch])\n}\n\nexport const usePoolDatas = (poolAddresses: string[]): PoolData[] => {\n  const allPoolData = useAllPoolData()\n  const addNewPoolKeys = useAddPoolKeys()\n\n  const untrackedAddresses = poolAddresses.reduce((accum: string[], address) => {\n    if (!Object.keys(allPoolData).includes(address)) {\n      accum.push(address)\n    }\n    return accum\n  }, [])\n\n  useEffect(() => {\n    if (untrackedAddresses) {\n      addNewPoolKeys(untrackedAddresses)\n    }\n  }, [addNewPoolKeys, untrackedAddresses])\n\n  const poolsWithData = poolAddresses\n    .map((address) => {\n      return allPoolData[address]?.data\n    })\n    .filter((pool) => pool)\n\n  return poolsWithData\n}\n\nexport const usePoolChartData = (address: string): ChartEntry[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const pool = useSelector((state: AppState) => state.info.pools.byAddress[address])\n  const chartData = pool?.chartData\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, data } = await fetchPoolChartData(address)\n      if (!fetchError && data) {\n        dispatch(updatePoolChartData({ poolAddress: address, chartData: data }))\n      }\n      if (fetchError) {\n        setError(fetchError)\n      }\n    }\n    if (!chartData && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, chartData])\n\n  return chartData\n}\n\nexport const usePoolTransactions = (address: string): Transaction[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const pool = useSelector((state: AppState) => state.info.pools.byAddress[address])\n  const transactions = pool?.transactions\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, data } = await fetchPoolTransactions(address)\n      if (fetchError) {\n        setError(true)\n      } else {\n        dispatch(updatePoolTransactions({ poolAddress: address, transactions: data }))\n      }\n    }\n    if (!transactions && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, transactions])\n\n  return transactions\n}\n\n// Tokens hooks\n\nexport const useAllTokenData = (): {\n  [address: string]: { data?: TokenData }\n} => {\n  return useSelector((state: AppState) => state.info.tokens.byAddress)\n}\n\nexport const useUpdateTokenData = (): ((tokens: TokenData[]) => void) => {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback(\n    (tokens: TokenData[]) => {\n      dispatch(updateTokenData({ tokens }))\n    },\n    [dispatch],\n  )\n}\n\nexport const useAddTokenKeys = (): ((addresses: string[]) => void) => {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback((tokenAddresses: string[]) => dispatch(addTokenKeys({ tokenAddresses })), [dispatch])\n}\n\nexport const useTokenDatas = (addresses?: string[]): TokenData[] | undefined => {\n  const allTokenData = useAllTokenData()\n  const addNewTokenKeys = useAddTokenKeys()\n\n  // if token not tracked yet track it\n  addresses?.forEach((a) => {\n    if (!allTokenData[a]) {\n      addNewTokenKeys([a])\n    }\n  })\n\n  const tokensWithData = useMemo(() => {\n    if (!addresses) {\n      return undefined\n    }\n    return addresses\n      .map((a) => {\n        return allTokenData[a]?.data\n      })\n      .filter((token) => token)\n  }, [addresses, allTokenData])\n\n  return tokensWithData\n}\n\nexport const useTokenData = (address: string | undefined): TokenData | undefined => {\n  const allTokenData = useAllTokenData()\n  const addNewTokenKeys = useAddTokenKeys()\n\n  if (!address || !isAddress(address)) {\n    return undefined\n  }\n\n  // if token not tracked yet track it\n  if (!allTokenData[address]) {\n    addNewTokenKeys([address])\n  }\n\n  return allTokenData[address]?.data\n}\n\nexport const usePoolsForToken = (address: string): string[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\n  const poolsForToken = token.poolAddresses\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, addresses } = await fetchPoolsForToken(address)\n      if (!fetchError && addresses) {\n        dispatch(addTokenPoolAddresses({ tokenAddress: address, poolAddresses: addresses }))\n      }\n      if (fetchError) {\n        setError(fetchError)\n      }\n    }\n    if (!poolsForToken && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, poolsForToken])\n\n  return poolsForToken\n}\n\nexport const useTokenChartData = (address: string): ChartEntry[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\n  const { chartData } = token\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, data } = await fetchTokenChartData(address)\n      if (!fetchError && data) {\n        dispatch(updateTokenChartData({ tokenAddress: address, chartData: data }))\n      }\n      if (fetchError) {\n        setError(fetchError)\n      }\n    }\n    if (!chartData && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, chartData])\n\n  return chartData\n}\n\nexport const useTokenPriceData = (\n  address: string,\n  interval: number,\n  timeWindow: Duration,\n): PriceChartEntry[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\n  const priceData = token?.priceData[interval]\n  const [error, setError] = useState(false)\n\n  // construct timestamps and check if we need to fetch more data\n  const oldestTimestampFetched = token?.priceData.oldestFetchedTimestamp\n  const utcCurrentTime = getUnixTime(new Date()) * 1000\n  const startTimestamp = getUnixTime(startOfHour(sub(utcCurrentTime, timeWindow)))\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { data, error: fetchingError } = await fetchTokenPriceData(address, interval, startTimestamp)\n      if (data) {\n        dispatch(\n          updateTokenPriceData({\n            tokenAddress: address,\n            secondsInterval: interval,\n            priceData: data,\n            oldestFetchedTimestamp: startTimestamp,\n          }),\n        )\n      }\n      if (fetchingError) {\n        setError(true)\n      }\n    }\n    if (!priceData && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, interval, oldestTimestampFetched, priceData, startTimestamp, timeWindow])\n\n  return priceData\n}\n\nexport const useTokenTransactions = (address: string): Transaction[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\n  const { transactions } = token\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, data } = await fetchTokenTransactions(address)\n      if (fetchError) {\n        setError(true)\n      } else if (data) {\n        dispatch(updateTokenTransactions({ tokenAddress: address, transactions: data }))\n      }\n    }\n    if (!transactions && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, transactions])\n\n  return transactions\n}\n","import React, { useEffect, useMemo } from 'react'\nimport useFetchProtocolData from 'state/info/queries/protocol/overview'\nimport useFetchGlobalChartData from 'state/info/queries/protocol/chart'\nimport fetchTopTransactions from 'state/info/queries/protocol/transactions'\nimport useTopPoolAddresses from 'state/info/queries/pools/topPools'\nimport usePoolDatas from 'state/info/queries/pools/poolData'\nimport useFetchedTokenDatas from 'state/info/queries/tokens/tokenData'\nimport useTopTokenAddresses from 'state/info/queries/tokens/topTokens'\nimport {\n  useProtocolData,\n  useProtocolChartData,\n  useProtocolTransactions,\n  useUpdatePoolData,\n  useAllPoolData,\n  useAddPoolKeys,\n  useAllTokenData,\n  useUpdateTokenData,\n  useAddTokenKeys,\n} from './hooks'\n\nexport const ProtocolUpdater: React.FC = () => {\n  const [protocolData, setProtocolData] = useProtocolData()\n  const { data: fetchedProtocolData, error } = useFetchProtocolData()\n\n  const [chartData, updateChartData] = useProtocolChartData()\n  const { data: fetchedChartData, error: chartError } = useFetchGlobalChartData()\n\n  const [transactions, updateTransactions] = useProtocolTransactions()\n\n  // update overview data if available and not set\n  useEffect(() => {\n    if (protocolData === undefined && fetchedProtocolData && !error) {\n      setProtocolData(fetchedProtocolData)\n    }\n  }, [error, fetchedProtocolData, protocolData, setProtocolData])\n\n  // update global chart data if available and not set\n  useEffect(() => {\n    if (chartData === undefined && fetchedChartData && !chartError) {\n      updateChartData(fetchedChartData)\n    }\n  }, [chartData, chartError, fetchedChartData, updateChartData])\n\n  useEffect(() => {\n    const fetch = async () => {\n      const data = await fetchTopTransactions()\n      if (data) {\n        updateTransactions(data)\n      }\n    }\n    if (!transactions) {\n      fetch()\n    }\n  }, [transactions, updateTransactions])\n\n  return null\n}\n\nexport const PoolUpdater: React.FC = () => {\n  const updatePoolData = useUpdatePoolData()\n  const addPoolKeys = useAddPoolKeys()\n\n  const allPoolData = useAllPoolData()\n  const addresses = useTopPoolAddresses()\n\n  // add top pools on first load\n  useEffect(() => {\n    if (addresses.length > 0) {\n      addPoolKeys(addresses)\n    }\n  }, [addPoolKeys, addresses])\n\n  // detect for which addresses we havent loaded pool data yet\n  const unfetchedPoolAddresses = useMemo(() => {\n    return Object.keys(allPoolData).reduce((accum: string[], address) => {\n      const poolData = allPoolData[address]\n      if (!poolData.data) {\n        accum.push(address)\n      }\n      return accum\n    }, [])\n  }, [allPoolData])\n\n  // fetch data for unfetched pools and update them\n  const { error: poolDataError, data: poolDatas } = usePoolDatas(unfetchedPoolAddresses)\n  useEffect(() => {\n    if (poolDatas && !poolDataError) {\n      updatePoolData(Object.values(poolDatas))\n    }\n  }, [poolDataError, poolDatas, updatePoolData])\n\n  return null\n}\n\nexport const TokenUpdater = (): null => {\n  const updateTokenDatas = useUpdateTokenData()\n  const addTokenKeys = useAddTokenKeys()\n\n  const allTokenData = useAllTokenData()\n  const addresses = useTopTokenAddresses()\n\n  // add top tokens on first load\n  useEffect(() => {\n    if (addresses.length > 0) {\n      addTokenKeys(addresses)\n    }\n  }, [addTokenKeys, addresses])\n\n  // detect for which addresses we havent loaded token data yet\n  const unfetchedTokenAddresses = useMemo(() => {\n    return Object.keys(allTokenData).reduce((accum: string[], key) => {\n      const tokenData = allTokenData[key]\n      if (!tokenData.data) {\n        accum.push(key)\n      }\n      return accum\n    }, [])\n  }, [allTokenData])\n\n  // fetch data for unfetched tokens and update them\n  const { error: tokenDataError, data: tokenDatas } = useFetchedTokenDatas(unfetchedTokenAddresses)\n  useEffect(() => {\n    if (tokenDatas && !tokenDataError) {\n      updateTokenDatas(Object.values(tokenDatas))\n    }\n  }, [tokenDataError, tokenDatas, updateTokenDatas])\n\n  return null\n}\n","import { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { useTokenDatas, usePoolDatas } from 'state/info/hooks'\nimport { TokenData, PoolData } from 'state/info/types'\nimport { MINIMUM_SEARCH_CHARACTERS } from 'config/constants/info'\n\nconst TOKEN_SEARCH = gql`\n  query tokens($symbol: String, $name: String, $id: String) {\n    asSymbol: tokens(first: 10, where: { symbol_contains: $symbol }, orderBy: tradeVolumeUSD, orderDirection: desc) {\n      id\n    }\n    asName: tokens(first: 10, where: { name_contains: $name }, orderBy: tradeVolumeUSD, orderDirection: desc) {\n      id\n    }\n    asAddress: tokens(first: 1, where: { id: $id }, orderBy: tradeVolumeUSD, orderDirection: desc) {\n      id\n    }\n  }\n`\n\nconst POOL_SEARCH = gql`\n  query pools($tokens: [Bytes]!, $id: String) {\n    as0: pairs(first: 10, where: { token0_in: $tokens }) {\n      id\n    }\n    as1: pairs(first: 10, where: { token1_in: $tokens }) {\n      id\n    }\n    asAddress: pairs(first: 1, where: { id: $id }) {\n      id\n    }\n  }\n`\n\ninterface SingleQueryResponse {\n  id: string[]\n}\n\ninterface TokenSearchResponse {\n  asSymbol: SingleQueryResponse[]\n  asName: SingleQueryResponse[]\n  asAddress: SingleQueryResponse[]\n}\ninterface PoolSearchResponse {\n  as0: SingleQueryResponse[]\n  as1: SingleQueryResponse[]\n  asAddress: SingleQueryResponse[]\n}\n\nconst getIds = (entityArrays: SingleQueryResponse[][]) => {\n  const ids = entityArrays\n    .reduce((entities, currentTokenArray) => [...entities, ...currentTokenArray], [])\n    .map((entity) => entity.id)\n  return Array.from(new Set(ids))\n}\n\nconst useFetchSearchResults = (\n  searchString: string,\n): {\n  tokens: TokenData[]\n  pools: PoolData[]\n  tokensLoading: boolean\n  poolsLoading: boolean\n  error: boolean\n} => {\n  const [searchResults, setSearchResults] = useState({\n    tokens: [], // Token ids found by search query\n    pools: [], // Pool ids found by search query\n    loading: false, // Search query is in progress\n    error: false, // GraphQL returned error\n  })\n\n  const searchStringTooShort = searchString.length < MINIMUM_SEARCH_CHARACTERS\n\n  // New value received, reset state\n  useEffect(() => {\n    setSearchResults({\n      tokens: [],\n      pools: [],\n      loading: !searchStringTooShort,\n      error: false,\n    })\n  }, [searchString, searchStringTooShort])\n\n  useEffect(() => {\n    const search = async () => {\n      try {\n        const tokens = await request<TokenSearchResponse>(INFO_CLIENT, TOKEN_SEARCH, {\n          symbol: searchString.toUpperCase(),\n          // Most well known tokens have first letter capitalized\n          name: searchString.charAt(0).toUpperCase() + searchString.slice(1),\n          id: searchString.toLowerCase(),\n        })\n        const tokenIds = getIds([tokens.asAddress, tokens.asSymbol, tokens.asName])\n        const pools = await request<PoolSearchResponse>(INFO_CLIENT, POOL_SEARCH, {\n          tokens: tokenIds,\n          id: searchString.toLowerCase(),\n        })\n        setSearchResults({\n          tokens: tokenIds,\n          pools: getIds([pools.asAddress, pools.as0, pools.as1]),\n          loading: false,\n          error: false,\n        })\n      } catch (error) {\n        console.error(`Search failed for ${searchString}`, error)\n        setSearchResults({\n          tokens: [],\n          pools: [],\n          loading: false,\n          error: true,\n        })\n      }\n    }\n    if (!searchStringTooShort) {\n      search()\n    }\n  }, [searchString, searchStringTooShort])\n\n  // Save ids to Redux\n  // Token and Pool updater will then go fetch full data for these addresses\n  // These hooks in turn will return data of tokens that have been fetched\n  const tokenDatasFull = useTokenDatas(searchResults.tokens)\n  const poolDatasFull = usePoolDatas(searchResults.pools)\n\n  // If above hooks returned not all tokens/pools it means\n  // that some requests for full data are in progress\n  const tokensLoading = tokenDatasFull.length !== searchResults.tokens.length || searchResults.loading\n  const poolsLoading = poolDatasFull.length !== searchResults.pools.length || searchResults.loading\n\n  return {\n    tokens: tokenDatasFull,\n    pools: poolDatasFull,\n    tokensLoading,\n    poolsLoading,\n    error: searchResults.error,\n  }\n}\n\nexport default useFetchSearchResults\n","import React, { useState } from 'react'\nimport { HelpIcon } from '@pancakeswap/uikit'\n\nconst BAD_SRCS: string[] = []\n\nexport interface LogoLoaderProps {\n  alt: string\n  src: string\n}\n\n/**\n * Renders an image by sequentially trying a list of URIs, and then eventually a fallback to HelpIcon\n */\nconst LogoLoader: React.FC<LogoLoaderProps> = ({ src, alt, ...rest }) => {\n  const [, refresh] = useState(0)\n\n  const srcFailedLoading = BAD_SRCS.includes(src)\n\n  if (src && !srcFailedLoading) {\n    return (\n      <img\n        {...rest}\n        alt={alt}\n        src={src}\n        onError={() => {\n          if (src) BAD_SRCS.push(src)\n          refresh((i) => i + 1)\n        }}\n      />\n    )\n  }\n\n  return <HelpIcon {...rest} />\n}\n\nexport default LogoLoader\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { isAddress } from 'utils'\nimport LogoLoader from './LogoLoader'\n\nconst StyledLogo = styled(LogoLoader)<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  border-radius: ${({ size }) => size};\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\n  background-color: ${({ theme }) => theme.colors.background};\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const CurrencyLogo: React.FC<{\n  address?: string\n  size?: string\n}> = ({ address, size = '24px', ...rest }) => {\n  const src = useMemo(() => {\n    const checksummedAddress = isAddress(address)\n    if (checksummedAddress) {\n      return `https://assets.trustwalletapp.com/blockchains/smartchain/assets/${checksummedAddress}/logo.png`\n    }\n    return null\n  }, [address])\n\n  return <StyledLogo size={size} src={src} alt=\"token logo\" {...rest} />\n}\n\nconst DoubleCurrencyWrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 32px;\n`\n\ninterface DoubleCurrencyLogoProps {\n  address0?: string\n  address1?: string\n  size?: number\n}\n\nexport const DoubleCurrencyLogo: React.FC<DoubleCurrencyLogoProps> = ({ address0, address1, size = 16 }) => {\n  return (\n    <DoubleCurrencyWrapper>\n      {address0 && <CurrencyLogo address={address0} size={`${size.toString()}px`} />}\n      {address1 && <CurrencyLogo address={address1} size={`${size.toString()}px`} />}\n    </DoubleCurrencyWrapper>\n  )\n}\n","import React, { HTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport { StarFillIcon, StarLineIcon } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\n\nconst HoverIcon = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst SaveIcon: React.FC<{ fill: boolean } & HTMLAttributes<HTMLDivElement>> = ({ fill = false, ...rest }) => {\n  const { theme } = useTheme()\n  return (\n    <HoverIcon {...rest}>\n      {fill ? (\n        <StarFillIcon stroke={theme.colors.warning} color={theme.colors.warning} />\n      ) : (\n        <StarLineIcon stroke={theme.colors.textDisabled} />\n      )}\n    </HoverIcon>\n  )\n}\n\nexport default SaveIcon\n","import React, { useRef, useState, useEffect, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Text, Input, Flex, Skeleton, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport useFetchSearchResults from 'state/info/queries/search'\nimport { CurrencyLogo, DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { useWatchlistTokens, useWatchlistPools } from 'state/user/hooks'\nimport SaveIcon from 'views/Info/components/SaveIcon'\nimport { useHistory } from 'react-router-dom'\nimport { usePoolDatas, useTokenDatas } from 'state/info/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport useDebounce from 'hooks/useDebounce'\nimport { MINIMUM_SEARCH_CHARACTERS } from 'config/constants/info'\nimport { PoolData } from 'state/info/types'\n\nconst Container = styled.div`\n  position: relative;\n  z-index: 30;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  z-index: 9999;\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n`\n\nconst Menu = styled.div<{ hide: boolean }>`\n  display: flex;\n  flex-direction: column;\n  z-index: 9999;\n  width: 100%;\n  top: 50px;\n  max-height: 400px;\n  overflow: auto;\n  right: 0;\n  padding: 1.5rem;\n  padding-bottom: 2.5rem;\n  position: absolute;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 8px;\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.04), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\n    0px 24px 32px rgba(0, 0, 0, 0.04);\n  display: ${({ hide }) => hide && 'none'};\n  border: 1px solid ${({ theme }) => theme.colors.secondary};\n  margin-top: 4px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0;\n    width: 500px;\n    max-height: 600px;\n  }\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-top: 0;\n    width: 800px;\n    max-height: 600px;\n  }\n`\n\nconst Blackout = styled.div`\n  position: absolute;\n  min-height: 100vh;\n  width: 100vw;\n  z-index: 10;\n  background-color: black;\n  opacity: 0.7;\n  left: 0;\n  top: 0;\n`\n\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  grid-template-columns: 1fr;\n  margin: 8px 0;\n  align-items: center;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: 1.5fr repeat(3, 1fr);\n  }\n`\n\nconst Break = styled.div`\n  height: 1px;\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  width: 100%;\n  margin: 16px 0;\n`\n\nconst HoverText = styled.div<{ hide: boolean }>`\n  color: ${({ theme }) => theme.colors.secondary};\n  display: ${({ hide }) => (hide ? 'none' : 'block')};\n  margin-top: 16px;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst HoverRowLink = styled.div`\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst OptionButton = styled.div<{ enabled: boolean }>`\n  width: fit-content;\n  padding: 4px 8px;\n  border-radius: 8px;\n  display: flex;\n  font-size: 12px;\n  font-weight: 600;\n  margin-right: 10px;\n  justify-content: center;\n  align-items: center;\n  background-color: ${({ theme, enabled }) => (enabled ? theme.colors.primary : 'transparent')};\n  color: ${({ theme, enabled }) => (enabled ? theme.card.background : theme.colors.secondary)};\n  :hover {\n    opacity: 0.6;\n    cursor: pointer;\n  }\n`\ntype BasicTokenData = {\n  address: string\n  symbol: string\n  name: string\n}\nconst tokenIncludesSearchTerm = (token: BasicTokenData, value: string) => {\n  return (\n    token.address.toLowerCase().includes(value.toLowerCase()) ||\n    token.symbol.toLowerCase().includes(value.toLowerCase()) ||\n    token.name.toLowerCase().includes(value.toLowerCase())\n  )\n}\n\nconst poolIncludesSearchTerm = (pool: PoolData, value: string) => {\n  return (\n    pool.address.toLowerCase().includes(value.toLowerCase()) ||\n    tokenIncludesSearchTerm(pool.token0, value) ||\n    tokenIncludesSearchTerm(pool.token1, value)\n  )\n}\n\nconst Search = () => {\n  const history = useHistory()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const menuRef = useRef<HTMLDivElement>(null)\n  const showMoreRef = useRef<HTMLDivElement>(null)\n\n  const [showMenu, setShowMenu] = useState(false)\n  const [value, setValue] = useState('')\n  const debouncedSearchTerm = useDebounce(value, 600)\n\n  const { tokens, pools, tokensLoading, poolsLoading, error } = useFetchSearchResults(debouncedSearchTerm)\n\n  const [tokensShown, setTokensShown] = useState(3)\n  const [poolsShown, setPoolsShown] = useState(3)\n\n  useEffect(() => {\n    setTokensShown(3)\n    setPoolsShown(3)\n  }, [debouncedSearchTerm])\n\n  const handleOutsideClick = (e: any) => {\n    const menuClick = menuRef.current && menuRef.current.contains(e.target)\n    const inputCLick = inputRef.current && inputRef.current.contains(e.target)\n    const showMoreClick = showMoreRef.current && showMoreRef.current.contains(e.target)\n\n    if (!menuClick && !inputCLick && !showMoreClick) {\n      setPoolsShown(3)\n      setTokensShown(3)\n      setShowMenu(false)\n    }\n  }\n\n  useEffect(() => {\n    if (showMenu) {\n      document.addEventListener('click', handleOutsideClick)\n      document.querySelector('body').style.overflow = 'hidden'\n    } else {\n      document.removeEventListener('click', handleOutsideClick)\n      document.querySelector('body').style.overflow = 'visible'\n    }\n\n    return () => {\n      document.removeEventListener('click', handleOutsideClick)\n    }\n  }, [showMenu])\n\n  // watchlist\n  const [savedTokens, addSavedToken] = useWatchlistTokens()\n  const [savedPools, addSavedPool] = useWatchlistPools()\n\n  const handleItemClick = (to: string) => {\n    setShowMenu(false)\n    setPoolsShown(3)\n    setTokensShown(3)\n    history.push(to)\n  }\n\n  // get date for watchlist\n  const watchListTokenData = useTokenDatas(savedTokens)\n  const watchListTokenLoading = watchListTokenData.length !== savedTokens.length\n  const watchListPoolData = usePoolDatas(savedPools)\n  const watchListPoolLoading = watchListPoolData.length !== savedPools.length\n\n  // filter on view\n  const [showWatchlist, setShowWatchlist] = useState(false)\n  const tokensForList = useMemo(() => {\n    if (showWatchlist) {\n      return watchListTokenData.filter((token) => tokenIncludesSearchTerm(token, value))\n    }\n    return tokens.sort((t0, t1) => (t0.volumeUSD > t1.volumeUSD ? -1 : 1))\n  }, [showWatchlist, tokens, watchListTokenData, value])\n\n  const poolForList = useMemo(() => {\n    if (showWatchlist) {\n      return watchListPoolData.filter((pool) => poolIncludesSearchTerm(pool, value))\n    }\n    return pools.sort((p0, p1) => (p0.volumeUSD > p1.volumeUSD ? -1 : 1))\n  }, [pools, showWatchlist, watchListPoolData, value])\n\n  const contentUnderTokenList = () => {\n    const isLoading = showWatchlist ? watchListTokenLoading : tokensLoading\n    const noTokensFound =\n      tokensForList.length === 0 && !isLoading && debouncedSearchTerm.length >= MINIMUM_SEARCH_CHARACTERS\n    const noWatchlistTokens = tokensForList.length === 0 && !isLoading\n    const showMessage = showWatchlist ? noWatchlistTokens : noTokensFound\n    const noTokensMessage = showWatchlist ? t('Saved tokens will appear here') : t('No results')\n    return (\n      <>\n        {isLoading && <Skeleton />}\n        {showMessage && <Text>{noTokensMessage}</Text>}\n        {!showWatchlist && debouncedSearchTerm.length < MINIMUM_SEARCH_CHARACTERS && (\n          <Text>{t('Search pools or tokens')}</Text>\n        )}\n      </>\n    )\n  }\n\n  const contentUnderPoolList = () => {\n    const isLoading = showWatchlist ? watchListPoolLoading : poolsLoading\n    const noPoolsFound =\n      poolForList.length === 0 && !poolsLoading && debouncedSearchTerm.length >= MINIMUM_SEARCH_CHARACTERS\n    const noWatchlistPools = poolForList.length === 0 && !isLoading\n    const showMessage = showWatchlist ? noWatchlistPools : noPoolsFound\n    const noPoolsMessage = showWatchlist ? t('Saved tokens will appear here') : t('No results')\n    return (\n      <>\n        {isLoading && <Skeleton />}\n        {showMessage && <Text>{noPoolsMessage}</Text>}\n        {!showWatchlist && debouncedSearchTerm.length < MINIMUM_SEARCH_CHARACTERS && (\n          <Text>{t('Search pools or tokens')}</Text>\n        )}\n      </>\n    )\n  }\n\n  return (\n    <>\n      {showMenu ? <Blackout /> : null}\n      <Container>\n        <StyledInput\n          type=\"text\"\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value)\n          }}\n          placeholder={t('Search pools or tokens')}\n          ref={inputRef}\n          onFocus={() => {\n            setShowMenu(true)\n          }}\n        />\n        <Menu hide={!showMenu} ref={menuRef}>\n          <Flex mb=\"16px\">\n            <OptionButton enabled={!showWatchlist} onClick={() => setShowWatchlist(false)}>\n              {t('Search')}\n            </OptionButton>\n            <OptionButton enabled={showWatchlist} onClick={() => setShowWatchlist(true)}>\n              {t('Watchlist')}\n            </OptionButton>\n          </Flex>\n          {error && <Text color=\"failure\">{t('Error occurred, please try again')}</Text>}\n\n          <ResponsiveGrid>\n            <Text bold color=\"secondary\">\n              {t('Tokens')}\n            </Text>\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Price')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Volume 24H')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Liquidity')}\n              </Text>\n            )}\n          </ResponsiveGrid>\n          {tokensForList.slice(0, tokensShown).map((token, i) => {\n            return (\n              // eslint-disable-next-line react/no-array-index-key\n              <HoverRowLink onClick={() => handleItemClick(`/info/token/${token.address}`)} key={i}>\n                <ResponsiveGrid>\n                  <Flex>\n                    <CurrencyLogo address={token.address} />\n                    <Text ml=\"10px\">\n                      <Text>{`${token.name} (${token.symbol})`}</Text>\n                    </Text>\n                    <SaveIcon\n                      id=\"watchlist-icon\"\n                      style={{ marginLeft: '8px' }}\n                      fill={savedTokens.includes(token.address)}\n                      onClick={(e) => {\n                        e.stopPropagation()\n                        addSavedToken(token.address)\n                      }}\n                    />\n                  </Flex>\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.priceUSD)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.volumeUSD)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.liquidityUSD)}</Text>}\n                </ResponsiveGrid>\n              </HoverRowLink>\n            )\n          })}\n          {contentUnderTokenList()}\n          <HoverText\n            onClick={() => {\n              setTokensShown(tokensShown + 5)\n            }}\n            hide={tokensForList.length <= tokensShown}\n            ref={showMoreRef}\n          >\n            {t('See more...')}\n          </HoverText>\n\n          <Break />\n          <ResponsiveGrid>\n            <Text bold color=\"secondary\" mb=\"8px\">\n              {t('Pools')}\n            </Text>\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Volume 24H')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Volume 7D')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Liquidity')}\n              </Text>\n            )}\n          </ResponsiveGrid>\n          {poolForList.slice(0, poolsShown).map((p, i) => {\n            return (\n              // eslint-disable-next-line react/no-array-index-key\n              <HoverRowLink onClick={() => handleItemClick(`/info/pool/${p.address}`)} key={i}>\n                <ResponsiveGrid>\n                  <Flex>\n                    <DoubleCurrencyLogo address0={p.token0.address} address1={p.token1.address} />\n                    <Text ml=\"10px\" style={{ whiteSpace: 'nowrap' }}>\n                      <Text>{`${p.token0.symbol} / ${p.token1.symbol}`}</Text>\n                    </Text>\n                    <SaveIcon\n                      id=\"watchlist-icon\"\n                      style={{ marginLeft: '10px' }}\n                      fill={savedPools.includes(p.address)}\n                      onClick={(e) => {\n                        e.stopPropagation()\n                        addSavedPool(p.address)\n                      }}\n                    />\n                  </Flex>\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.volumeUSD)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.volumeUSDWeek)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.liquidityUSD)}</Text>}\n                </ResponsiveGrid>\n              </HoverRowLink>\n            )\n          })}\n          {contentUnderPoolList()}\n          <HoverText\n            onClick={() => {\n              setPoolsShown(poolsShown + 5)\n            }}\n            hide={poolForList.length <= poolsShown}\n            ref={showMoreRef}\n          >\n            {t('See more...')}\n          </HoverText>\n        </Menu>\n      </Container>\n    </>\n  )\n}\n\nexport default Search\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link, useRouteMatch } from 'react-router-dom'\nimport { Box, Flex, ButtonMenu, ButtonMenuItem } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Search from 'views/Info/components/InfoSearch'\n\nconst NavWrapper = styled(Flex)`\n  background: ${({ theme }) => theme.colors.gradients.cardHeader};\n  justify-content: space-between;\n  padding: 20px 16px;\n  flex-direction: column;\n  gap: 8px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 20px 40px;\n    flex-direction: row;\n  }\n`\n\nconst InfoNav = () => {\n  const { t } = useTranslation()\n  const isPools = useRouteMatch(['/info/pools', '/info/pool', '/info/pair'])\n  const isTokens = useRouteMatch(['/info/tokens', '/info/token'])\n  let activeIndex = 0\n  if (isPools) {\n    activeIndex = 1\n  }\n  if (isTokens) {\n    activeIndex = 2\n  }\n  return (\n    <NavWrapper>\n      <Box>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n          <ButtonMenuItem as={Link} to=\"/info\">\n            {t('Overview')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={Link} to=\"/info/pools\">\n            {t('Pools')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={Link} to=\"/info/tokens\">\n            {t('Tokens')}\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </Box>\n      <Box width={['100%', '100%', '250px']}>\n        <Search />\n      </Box>\n    </NavWrapper>\n  )\n}\n\nexport default InfoNav\n","import React, { useEffect, Dispatch, SetStateAction } from 'react'\nimport { ResponsiveContainer, XAxis, YAxis, Tooltip, AreaChart, Area } from 'recharts'\nimport useTheme from 'hooks/useTheme'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { LineChartLoader } from 'views/Info/components/ChartLoaders'\nimport { useTranslation } from 'contexts/Localization'\n\nexport type LineChartProps = {\n  data: any[]\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of value\n} & React.HTMLAttributes<HTMLDivElement>\n\n// Calls setHoverValue and setHoverDate when part of chart is hovered\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\nconst HoverUpdater = ({ locale, payload, setHoverValue, setHoverDate }) => {\n  useEffect(() => {\n    setHoverValue(payload.value)\n    setHoverDate(payload.time.toLocaleString(locale, { year: 'numeric', day: 'numeric', month: 'short' }))\n  }, [locale, payload.value, payload.time, setHoverValue, setHoverDate])\n\n  return null\n}\n\n/**\n * Note: remember that it needs to be mounted inside the container with fixed height\n */\nconst LineChart = ({ data, setHoverValue, setHoverDate }: LineChartProps) => {\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { theme } = useTheme()\n  if (!data || data.length === 0) {\n    return <LineChartLoader />\n  }\n  return (\n    <ResponsiveContainer>\n      <AreaChart\n        data={data}\n        width={300}\n        height={308}\n        margin={{\n          top: 5,\n          right: 15,\n          left: 0,\n          bottom: 5,\n        }}\n        onMouseLeave={() => {\n          if (setHoverDate) setHoverDate(undefined)\n          if (setHoverValue) setHoverValue(undefined)\n        }}\n      >\n        <defs>\n          <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={theme.colors.inputSecondary} stopOpacity={0.5} />\n            <stop offset=\"100%\" stopColor={theme.colors.secondary} stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <XAxis\n          dataKey=\"time\"\n          axisLine={false}\n          tickLine={false}\n          tickFormatter={(time) => time.toLocaleDateString(undefined, { day: '2-digit' })}\n          minTickGap={10}\n        />\n        <YAxis\n          dataKey=\"value\"\n          tickCount={6}\n          scale=\"linear\"\n          axisLine={false}\n          tickLine={false}\n          fontSize=\"12px\"\n          tickFormatter={(val) => `$${formatAmount(val)}`}\n          orientation=\"right\"\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\n        />\n        <Tooltip\n          cursor={{ stroke: theme.colors.secondary }}\n          contentStyle={{ display: 'none' }}\n          formatter={(tooltipValue, name, props) => (\n            <HoverUpdater\n              locale={locale}\n              payload={props.payload}\n              setHoverValue={setHoverValue}\n              setHoverDate={setHoverDate}\n            />\n          )}\n        />\n        <Area dataKey=\"value\" type=\"monotone\" stroke={theme.colors.secondary} fill=\"url(#gradient)\" strokeWidth={2} />\n      </AreaChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default LineChart\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\nexport interface PercentProps extends TextProps {\n  value: number | undefined\n}\n\nconst Percent: React.FC<PercentProps> = ({ value, ...rest }) => {\n  if (!value || Number.isNaN(value)) {\n    return <Text {...rest}>-</Text>\n  }\n\n  const isNegative = value < 0\n\n  return (\n    <Text {...rest} color={isNegative ? 'failure' : 'success'}>\n      {isNegative ? '↓' : '↑'}\n      {Math.abs(value).toFixed(2)}%\n    </Text>\n  )\n}\n\nexport default Percent\n","import styled from 'styled-components'\nimport { Text, Flex } from '@pancakeswap/uikit'\n\nexport const ClickableColumnHeader = styled(Text)`\n  cursor: pointer;\n`\n\nexport const TableWrapper = styled(Flex)`\n  width: 100%;\n  padding-top: 16px;\n  flex-direction: column;\n  gap: 16px;\n  background-color: ${({ theme }) => theme.card.background};\n  border-radius: ${({ theme }) => theme.radii.card};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nexport const PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 0.2em;\n  margin-bottom: 1.2em;\n`\n\nexport const Arrow = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`\n\nexport const Break = styled.div`\n  height: 1px;\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  width: 100%;\n`\n","import React, { useState, useMemo, useCallback, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Box, Skeleton, useMatchBreakpoints, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { TokenData } from 'state/info/types'\nimport { Link } from 'react-router-dom'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\n/**\n *  Columns on different layouts\n *  6 = | # | Name | Price | Price Change | Volume 24H | TVL |\n *  5 = | # | Name | Price |              | Volume 24H | TVL |\n *  4 = | # | Name | Price |              | Volume 24H |     |\n *  2 = |   | Name |       |              | Volume 24H |     |\n *  On smallest screen Name is reduced to just symbol\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n\n  padding: 0 24px;\n\n  grid-template-columns: 20px 3fr repeat(4, 1fr);\n\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 2fr repeat(3, 1fr);\n    & :nth-child(4) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 20px 2fr repeat(2, 1fr);\n    & :nth-child(6) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 670px) {\n    grid-template-columns: 1fr 1fr;\n    > *:first-child {\n      display: none;\n    }\n    > *:nth-child(3) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(Link)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst ResponsiveLogo = styled(CurrencyLogo)`\n  @media screen and (max-width: 670px) {\n    width: 16px;\n    height: 16px;\n  }\n`\n\nconst TableLoader: React.FC = () => {\n  const loadingRow = (\n    <ResponsiveGrid>\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </ResponsiveGrid>\n  )\n  return (\n    <>\n      {loadingRow}\n      {loadingRow}\n      {loadingRow}\n    </>\n  )\n}\n\nconst DataRow: React.FC<{ tokenData: TokenData; index: number }> = ({ tokenData, index }) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  return (\n    <LinkWrapper to={`/info/token/${tokenData.address}`}>\n      <ResponsiveGrid>\n        <Flex>\n          <Text>{index + 1}</Text>\n        </Flex>\n        <Flex alignItems=\"center\">\n          <ResponsiveLogo address={tokenData.address} />\n          {(isXs || isSm) && <Text ml=\"8px\">{tokenData.symbol}</Text>}\n          {!isXs && !isSm && (\n            <Flex marginLeft=\"10px\">\n              <Text>{tokenData.name}</Text>\n              <Text ml=\"8px\">({tokenData.symbol})</Text>\n            </Flex>\n          )}\n        </Flex>\n        <Text fontWeight={400}>${formatAmount(tokenData.priceUSD, { notation: 'standard' })}</Text>\n        <Text fontWeight={400}>\n          <Percent value={tokenData.priceUSDChange} fontWeight={400} />\n        </Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.volumeUSD)}</Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\nconst SORT_FIELD = {\n  name: 'name',\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  priceUSD: 'priceUSD',\n  priceUSDChange: 'priceUSDChange',\n  priceUSDChangeWeek: 'priceUSDChangeWeek',\n}\n\nconst MAX_ITEMS = 10\n\nconst TokenTable: React.FC<{\n  tokenDatas: TokenData[] | undefined\n  maxItems?: number\n}> = ({ tokenDatas, maxItems = MAX_ITEMS }) => {\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n\n  const { t } = useTranslation()\n\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (tokenDatas) {\n      if (tokenDatas.length % maxItems === 0) {\n        extraPages = 0\n      }\n      setMaxPage(Math.floor(tokenDatas.length / maxItems) + extraPages)\n    }\n  }, [maxItems, tokenDatas])\n\n  const sortedTokens = useMemo(() => {\n    return tokenDatas\n      ? tokenDatas\n          .sort((a, b) => {\n            if (a && b) {\n              return a[sortField as keyof TokenData] > b[sortField as keyof TokenData]\n                ? (sortDirection ? -1 : 1) * 1\n                : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .slice(maxItems * (page - 1), page * maxItems)\n      : []\n  }, [tokenDatas, maxItems, page, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  if (!tokenDatas) {\n    return <Skeleton />\n  }\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.name)}\n          textTransform=\"uppercase\"\n        >\n          {t('Name')} {arrow(SORT_FIELD.name)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price')} {arrow(SORT_FIELD.priceUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSDChange)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price Change')} {arrow(SORT_FIELD.priceUSDChange)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n\n      <Break />\n      {sortedTokens.length > 0 ? (\n        <>\n          {sortedTokens.map((data, i) => {\n            if (data) {\n              return (\n                <React.Fragment key={data.address}>\n                  <DataRow index={(page - 1) * MAX_ITEMS + i} tokenData={data} />\n                  <Break />\n                </React.Fragment>\n              )\n            }\n            return null\n          })}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default TokenTable\n","import React, { useCallback, useState, useMemo, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport { Text, Flex, Box, Skeleton, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { PoolData } from 'state/info/types'\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\nimport { DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\n/**\n *  Columns on different layouts\n *  5 = | # | Pool | TVL | Volume 24H | Volume 7D |\n *  4 = | # | Pool |     | Volume 24H | Volume 7D |\n *  3 = | # | Pool |     | Volume 24H |           |\n *  2 = |   | Pool |     | Volume 24H |           |\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n  grid-template-columns: 20px 3.5fr repeat(5, 1fr);\n\n  padding: 0 24px;\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 1.5fr repeat(3, 1fr);\n    & :nth-child(4),\n    & :nth-child(5) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 500px) {\n    grid-template-columns: 20px 1.5fr repeat(1, 1fr);\n    & :nth-child(4),\n    & :nth-child(5),\n    & :nth-child(6),\n    & :nth-child(7) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 480px) {\n    grid-template-columns: 2.5fr repeat(1, 1fr);\n    > *:nth-child(1) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(Link)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst SORT_FIELD = {\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  volumeUSDWeek: 'volumeUSDWeek',\n  lpFees24h: 'lpFees24h',\n  lpApr7d: 'lpApr7d',\n}\n\nconst LoadingRow: React.FC = () => (\n  <ResponsiveGrid>\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n  </ResponsiveGrid>\n)\n\nconst TableLoader: React.FC = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nconst DataRow = ({ poolData, index }: { poolData: PoolData; index: number }) => {\n  return (\n    <LinkWrapper to={`/info/pool/${poolData.address}`}>\n      <ResponsiveGrid>\n        <Text>{index + 1}</Text>\n        <Flex>\n          <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} />\n          <Text ml=\"8px\">\n            {poolData.token0.symbol}/{poolData.token1.symbol}\n          </Text>\n        </Flex>\n        <Text>${formatAmount(poolData.volumeUSD)}</Text>\n        <Text>${formatAmount(poolData.volumeUSDWeek)}</Text>\n        <Text>${formatAmount(poolData.lpFees24h)}</Text>\n        <Text>{formatAmount(poolData.lpApr7d)}%</Text>\n        <Text>${formatAmount(poolData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\ninterface PoolTableProps {\n  poolDatas: PoolData[]\n  loading?: boolean // If true shows indication that SOME pools are loading, but the ones already fetched will be shown\n}\n\nconst PoolTable: React.FC<PoolTableProps> = ({ poolDatas, loading }) => {\n  // for sorting\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n  const { t } = useTranslation()\n\n  // pagination\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (poolDatas.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\n      extraPages = 0\n    }\n    setMaxPage(Math.floor(poolDatas.length / ITEMS_PER_INFO_TABLE_PAGE) + extraPages)\n  }, [poolDatas])\n\n  const sortedPools = useMemo(() => {\n    return poolDatas\n      ? poolDatas\n          .sort((a, b) => {\n            if (a && b) {\n              return a[sortField as keyof PoolData] > b[sortField as keyof PoolData]\n                ? (sortDirection ? -1 : 1) * 1\n                : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\n      : []\n  }, [page, poolDatas, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Pool')}\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSDWeek)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 7D')} {arrow(SORT_FIELD.volumeUSDWeek)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpFees24h)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward fees 24H')} {arrow(SORT_FIELD.lpFees24h)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpApr7d)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward APR')} {arrow(SORT_FIELD.lpApr7d)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n      <Break />\n      {sortedPools.length > 0 ? (\n        <>\n          {sortedPools.map((poolData, i) => {\n            if (poolData) {\n              return (\n                <React.Fragment key={poolData.address}>\n                  <DataRow index={(page - 1) * ITEMS_PER_INFO_TABLE_PAGE + i} poolData={poolData} />\n                  <Break />\n                </React.Fragment>\n              )\n            }\n            return null\n          })}\n          {loading && <LoadingRow />}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          {/* spacer */}\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default PoolTable\n","import React, { useEffect, Dispatch, SetStateAction } from 'react'\nimport { BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Bar } from 'recharts'\nimport useTheme from 'hooks/useTheme'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { BarChartLoader } from 'views/Info/components/ChartLoaders'\nimport { useTranslation } from 'contexts/Localization'\n\nexport type LineChartProps = {\n  data: any[]\n  height?: string\n  chartHeight?: string\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of value\n} & React.HTMLAttributes<HTMLDivElement>\n\nconst CustomBar = ({\n  x,\n  y,\n  width,\n  height,\n  fill,\n}: {\n  x: number\n  y: number\n  width: number\n  height: number\n  fill: string\n}) => {\n  return (\n    <g>\n      <rect x={x} y={y} fill={fill} width={width} height={height} rx=\"2\" />\n    </g>\n  )\n}\n\n// Calls setHoverValue and setHoverDate when part of chart is hovered\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\nconst HoverUpdater = ({ locale, payload, setHoverValue, setHoverDate }) => {\n  useEffect(() => {\n    setHoverValue(payload.value)\n    setHoverDate(payload.time.toLocaleString(locale, { year: 'numeric', day: 'numeric', month: 'short' }))\n  }, [locale, payload.value, payload.time, setHoverValue, setHoverDate])\n\n  return null\n}\n\nconst Chart = ({ data, setHoverValue, setHoverDate }: LineChartProps) => {\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { theme } = useTheme()\n  if (!data || data.length === 0) {\n    return <BarChartLoader />\n  }\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart\n        data={data}\n        margin={{\n          top: 5,\n          right: 15,\n          left: 0,\n          bottom: 5,\n        }}\n        onMouseLeave={() => {\n          setHoverDate(undefined)\n          setHoverValue(undefined)\n        }}\n      >\n        <XAxis\n          dataKey=\"time\"\n          axisLine={false}\n          tickLine={false}\n          tickFormatter={(time) => time.toLocaleDateString(undefined, { day: '2-digit' })}\n          minTickGap={10}\n        />\n        <YAxis\n          dataKey=\"value\"\n          tickCount={6}\n          scale=\"linear\"\n          axisLine={false}\n          tickLine={false}\n          color={theme.colors.textSubtle}\n          fontSize=\"12px\"\n          tickFormatter={(val) => `$${formatAmount(val)}`}\n          orientation=\"right\"\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\n        />\n        <Tooltip\n          cursor={{ fill: theme.colors.backgroundDisabled }}\n          contentStyle={{ display: 'none' }}\n          formatter={(tooltipValue, name, props) => (\n            <HoverUpdater\n              locale={locale}\n              payload={props.payload}\n              setHoverValue={setHoverValue}\n              setHoverDate={setHoverDate}\n            />\n          )}\n        />\n        <Bar\n          dataKey=\"value\"\n          fill={theme.colors.primary}\n          shape={(props) => (\n            <CustomBar height={props.height} width={props.width} x={props.x} y={props.y} fill={theme.colors.primary} />\n          )}\n        />\n      </BarChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default Chart\n","// TODO PCS refactor ternaries\n/* eslint-disable no-nested-ternary */\nimport React, { useCallback, useState, useMemo, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { formatDistanceToNowStrict } from 'date-fns'\nimport { Text, Flex, Box, Radio, Skeleton, LinkExternal, ArrowForwardIcon, ArrowBackIcon } from '@pancakeswap/uikit'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport { Transaction, TransactionType } from 'state/info/types'\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\nconst Wrapper = styled.div`\n  width: 100%;\n`\n\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n  grid-template-columns: 2fr 0.8fr repeat(4, 1fr);\n  padding: 0 24px;\n  @media screen and (max-width: 940px) {\n    grid-template-columns: 2fr repeat(4, 1fr);\n    & > *:nth-child(5) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 2fr repeat(2, 1fr);\n    & > *:nth-child(5) {\n      display: none;\n    }\n    & > *:nth-child(3) {\n      display: none;\n    }\n    & > *:nth-child(4) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 500px) {\n    grid-template-columns: 2fr 1fr;\n    & > *:nth-child(5) {\n      display: none;\n    }\n    & > *:nth-child(3) {\n      display: none;\n    }\n    & > *:nth-child(4) {\n      display: none;\n    }\n    & > *:nth-child(2) {\n      display: none;\n    }\n  }\n`\n\nconst RadioGroup = styled(Flex)`\n  align-items: center;\n  margin-right: 16px;\n  margin-top: 8px;\n  cursor: pointer;\n`\n\nconst SORT_FIELD = {\n  amountUSD: 'amountUSD',\n  timestamp: 'timestamp',\n  sender: 'sender',\n  amountToken0: 'amountToken0',\n  amountToken1: 'amountToken1',\n}\n\nconst TableLoader: React.FC = () => {\n  const loadingRow = (\n    <ResponsiveGrid>\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </ResponsiveGrid>\n  )\n  return (\n    <>\n      {loadingRow}\n      {loadingRow}\n      {loadingRow}\n    </>\n  )\n}\n\nconst DataRow: React.FC<{ transaction: Transaction }> = ({ transaction }) => {\n  const { t } = useTranslation()\n  const abs0 = Math.abs(transaction.amountToken0)\n  const abs1 = Math.abs(transaction.amountToken1)\n  const outputTokenSymbol = transaction.amountToken0 < 0 ? transaction.token0Symbol : transaction.token1Symbol\n  const inputTokenSymbol = transaction.amountToken1 < 0 ? transaction.token0Symbol : transaction.token1Symbol\n\n  return (\n    <ResponsiveGrid>\n      <LinkExternal href={getBscScanLink(transaction.hash, 'transaction')}>\n        <Text>\n          {transaction.type === TransactionType.MINT\n            ? t('Add %token0% and %token1%', { token0: transaction.token0Symbol, token1: transaction.token1Symbol })\n            : transaction.type === TransactionType.SWAP\n            ? t('Swap %token0% for %token1%', { token0: inputTokenSymbol, token1: outputTokenSymbol })\n            : t('Remove %token0% and %token1%', { token0: transaction.token0Symbol, token1: transaction.token1Symbol })}\n        </Text>\n      </LinkExternal>\n      <Text>${formatAmount(transaction.amountUSD)}</Text>\n      <Text>\n        <Text>{`${formatAmount(abs0)} ${transaction.token0Symbol}`}</Text>\n      </Text>\n      <Text>\n        <Text>{`${formatAmount(abs1)} ${transaction.token1Symbol}`}</Text>\n      </Text>\n      <LinkExternal href={getBscScanLink(transaction.sender, 'address')}>\n        {truncateHash(transaction.sender)}\n      </LinkExternal>\n      <Text>{formatDistanceToNowStrict(parseInt(transaction.timestamp, 10) * 1000)}</Text>\n    </ResponsiveGrid>\n  )\n}\n\nconst TransactionTable: React.FC<{\n  transactions: Transaction[]\n}> = ({ transactions }) => {\n  const [sortField, setSortField] = useState(SORT_FIELD.timestamp)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n\n  const { t } = useTranslation()\n\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n\n  const [txFilter, setTxFilter] = useState<TransactionType | undefined>(undefined)\n\n  const sortedTransactions = useMemo(() => {\n    const toBeAbsList = [SORT_FIELD.amountToken0, SORT_FIELD.amountToken1]\n    return transactions\n      ? transactions\n          .slice()\n          .sort((a, b) => {\n            if (a && b) {\n              const firstField = a[sortField as keyof Transaction]\n              const secondField = b[sortField as keyof Transaction]\n              const [first, second] = toBeAbsList.includes(sortField)\n                ? [Math.abs(firstField as number), Math.abs(secondField as number)]\n                : [firstField, secondField]\n              return first > second ? (sortDirection ? -1 : 1) * 1 : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .filter((x) => {\n            return txFilter === undefined || x.type === txFilter\n          })\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\n      : []\n  }, [transactions, page, sortField, sortDirection, txFilter])\n\n  // Update maxPage based on amount of items & applied filtering\n  useEffect(() => {\n    if (transactions) {\n      const filteredTransactions = transactions.filter((tx) => {\n        return txFilter === undefined || tx.type === txFilter\n      })\n      if (filteredTransactions.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\n        setMaxPage(Math.floor(filteredTransactions.length / ITEMS_PER_INFO_TABLE_PAGE))\n      } else {\n        setMaxPage(Math.floor(filteredTransactions.length / ITEMS_PER_INFO_TABLE_PAGE) + 1)\n      }\n    }\n  }, [transactions, txFilter])\n\n  const handleFilter = useCallback(\n    (newFilter: TransactionType) => {\n      if (newFilter !== txFilter) {\n        setTxFilter(newFilter)\n        setPage(1)\n      }\n    },\n    [txFilter],\n  )\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  return (\n    <Wrapper>\n      <Flex mb=\"16px\">\n        <Flex flexDirection={['column', 'row']}>\n          <RadioGroup onClick={() => handleFilter(undefined)}>\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === undefined} />\n            <Text ml=\"8px\">{t('All')}</Text>\n          </RadioGroup>\n\n          <RadioGroup onClick={() => handleFilter(TransactionType.SWAP)}>\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.SWAP} />\n            <Text ml=\"8px\">{t('Swaps')}</Text>\n          </RadioGroup>\n        </Flex>\n\n        <Flex flexDirection={['column', 'row']}>\n          <RadioGroup onClick={() => handleFilter(TransactionType.MINT)}>\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.MINT} />\n            <Text ml=\"8px\">{t('Adds')}</Text>\n          </RadioGroup>\n\n          <RadioGroup onClick={() => handleFilter(TransactionType.BURN)}>\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.BURN} />\n            <Text ml=\"8px\">{t('Removes')}</Text>\n          </RadioGroup>\n        </Flex>\n      </Flex>\n      <TableWrapper>\n        <ResponsiveGrid>\n          <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n            {t('Action')}\n          </Text>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.amountUSD)}\n            textTransform=\"uppercase\"\n          >\n            {t('Total Value')} {arrow(SORT_FIELD.amountUSD)}\n          </ClickableColumnHeader>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.amountToken0)}\n            textTransform=\"uppercase\"\n          >\n            {t('Token Amount')} {arrow(SORT_FIELD.amountToken0)}\n          </ClickableColumnHeader>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.amountToken1)}\n            textTransform=\"uppercase\"\n          >\n            {t('Token Amount')} {arrow(SORT_FIELD.amountToken1)}\n          </ClickableColumnHeader>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.sender)}\n            textTransform=\"uppercase\"\n          >\n            {t('Account')} {arrow(SORT_FIELD.sender)}\n          </ClickableColumnHeader>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.timestamp)}\n            textTransform=\"uppercase\"\n          >\n            {t('Time')} {arrow(SORT_FIELD.timestamp)}\n          </ClickableColumnHeader>\n        </ResponsiveGrid>\n        <Break />\n\n        {transactions ? (\n          <>\n            {sortedTransactions.map((transaction, index) => {\n              if (transaction) {\n                return (\n                  // eslint-disable-next-line react/no-array-index-key\n                  <React.Fragment key={index}>\n                    <DataRow transaction={transaction} />\n                    <Break />\n                  </React.Fragment>\n                )\n              }\n              return null\n            })}\n            {sortedTransactions.length === 0 ? (\n              <Flex justifyContent=\"center\">\n                <Text>{t('No Transactions')}</Text>\n              </Flex>\n            ) : undefined}\n            <PageButtons>\n              <Arrow\n                onClick={() => {\n                  setPage(page === 1 ? page : page - 1)\n                }}\n              >\n                <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n              </Arrow>\n\n              <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n              <Arrow\n                onClick={() => {\n                  setPage(page === maxPage ? page : page + 1)\n                }}\n              >\n                <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n              </Arrow>\n            </PageButtons>\n          </>\n        ) : (\n          <>\n            <TableLoader />\n            {/* spacer */}\n            <Box />\n          </>\n        )}\n      </TableWrapper>\n    </Wrapper>\n  )\n}\n\nexport default TransactionTable\n","import React, { useState, useMemo, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Box, Text, Heading, Card, Skeleton } from '@pancakeswap/uikit'\nimport { fromUnixTime } from 'date-fns'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\nimport {\n  useAllPoolData,\n  useAllTokenData,\n  useProtocolChartData,\n  useProtocolData,\n  useProtocolTransactions,\n} from 'state/info/hooks'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\n\nexport const ChartCardsContainer = styled(Flex)`\n  justify-content: space-between;\n  flex-direction: column;\n  width: 100%;\n  padding: 0;\n  gap: 1em;\n\n  & > * {\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  } ;\n`\n\nconst Overview: React.FC = () => {\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n  const [liquidityHover, setLiquidityHover] = useState<number | undefined>()\n  const [liquidityDateHover, setLiquidityDateHover] = useState<string | undefined>()\n  const [volumeHover, setVolumeHover] = useState<number | undefined>()\n  const [volumeDateHover, setVolumeDateHover] = useState<string | undefined>()\n\n  const [protocolData] = useProtocolData()\n  const [chartData] = useProtocolChartData()\n  const [transactions] = useProtocolTransactions()\n\n  const currentDate = new Date().toLocaleString(locale, { month: 'short', year: 'numeric', day: 'numeric' })\n\n  // Getting latest liquidity and volumeUSD to display on top of chart when not hovered\n  useEffect(() => {\n    if (volumeHover == null && protocolData) {\n      setVolumeHover(protocolData.volumeUSD)\n    }\n  }, [protocolData, volumeHover])\n  useEffect(() => {\n    if (liquidityHover == null && protocolData) {\n      setLiquidityHover(protocolData.liquidityUSD)\n    }\n  }, [liquidityHover, protocolData])\n\n  const formattedLiquidityData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.liquidityUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const formattedVolumeData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.volumeUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const allTokens = useAllTokenData()\n\n  const formattedTokens = useMemo(() => {\n    return Object.values(allTokens)\n      .map((token) => token.data)\n      .filter((token) => token)\n  }, [allTokens])\n\n  const allPoolData = useAllPoolData()\n  const poolDatas = useMemo(() => {\n    return Object.values(allPoolData)\n      .map((pool) => pool.data)\n      .filter((pool) => pool)\n  }, [allPoolData])\n\n  const somePoolsAreLoading = useMemo(() => {\n    return Object.values(allPoolData).some((pool) => !pool.data)\n  }, [allPoolData])\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\" id=\"info-overview-title\">\n        {t('PattieSwap Info & Analytics')}\n      </Heading>\n      <ChartCardsContainer>\n        <Card>\n          <Box p={['16px', '16px', '24px']}>\n            <Text bold color=\"secondary\">\n              {t('Liquidity')}\n            </Text>\n            {liquidityHover > 0 ? (\n              <Text bold fontSize=\"24px\">\n                ${formatAmount(liquidityHover)}\n              </Text>\n            ) : (\n              <Skeleton width=\"128px\" height=\"36px\" />\n            )}\n            <Text>{liquidityDateHover ?? currentDate}</Text>\n            <Box height=\"250px\">\n              <LineChart\n                data={formattedLiquidityData}\n                setHoverValue={setLiquidityHover}\n                setHoverDate={setLiquidityDateHover}\n              />\n            </Box>\n          </Box>\n        </Card>\n        <Card>\n          <Box p={['16px', '16px', '24px']}>\n            <Text bold color=\"secondary\">\n              {t('Volume 24H')}\n            </Text>\n            {volumeHover > 0 ? (\n              <Text bold fontSize=\"24px\">\n                ${formatAmount(volumeHover)}\n              </Text>\n            ) : (\n              <Skeleton width=\"128px\" height=\"36px\" />\n            )}\n            <Text>{volumeDateHover ?? currentDate}</Text>\n            <Box height=\"250px\">\n              <BarChart data={formattedVolumeData} setHoverValue={setVolumeHover} setHoverDate={setVolumeDateHover} />\n            </Box>\n          </Box>\n        </Card>\n      </ChartCardsContainer>\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Tokens')}\n      </Heading>\n      <TokenTable tokenDatas={formattedTokens} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Pools')}\n      </Heading>\n      <PoolTable poolDatas={poolDatas} loading={somePoolsAreLoading} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Transactions')}\n      </Heading>\n      <TransactionTable transactions={transactions} />\n    </Page>\n  )\n}\n\nexport default Overview\n","import React, { useMemo } from 'react'\nimport { Text, Heading, Card } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport { useAllPoolData, usePoolDatas } from 'state/info/hooks'\nimport { useWatchlistPools } from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\n\nconst PoolsOverview: React.FC = () => {\n  const { t } = useTranslation()\n\n  // get all the pool datas that exist\n  const allPoolData = useAllPoolData()\n  const poolDatas = useMemo(() => {\n    return Object.values(allPoolData)\n      .map((pool) => pool.data)\n      .filter((pool) => pool)\n  }, [allPoolData])\n\n  const [savedPools] = useWatchlistPools()\n  const watchlistPools = usePoolDatas(savedPools)\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\">\n        {t('Your Watchlist')}\n      </Heading>\n      <Card>\n        {watchlistPools.length > 0 ? (\n          <PoolTable poolDatas={watchlistPools} />\n        ) : (\n          <Text px=\"24px\" py=\"16px\">\n            {t('Saved pools will appear here')}\n          </Text>\n        )}\n      </Card>\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\" id=\"info-pools-title\">\n        {t('All Pools')}\n      </Heading>\n      <PoolTable poolDatas={poolDatas} />\n    </Page>\n  )\n}\n\nexport default PoolsOverview\n","import React, { useRef, useState, useEffect, useCallback, Dispatch, SetStateAction } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { createChart, IChartApi } from 'lightweight-charts'\nimport { format } from 'date-fns'\nimport useTheme from 'hooks/useTheme'\nimport { CandleChartLoader } from 'views/Info/components/ChartLoaders'\n\nconst CANDLE_CHART_HEIGHT = 250\n\nexport type LineChartProps = {\n  data: any[]\n  setValue?: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setLabel?: Dispatch<SetStateAction<string | undefined>> // used for value label on hover\n} & React.HTMLAttributes<HTMLDivElement>\n\nconst CandleChart = ({ data, setValue, setLabel, ...rest }: LineChartProps) => {\n  const { theme } = useTheme()\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const chartRef = useRef<HTMLDivElement>(null)\n  const [chartCreated, setChart] = useState<IChartApi | undefined>()\n\n  const handleResize = useCallback(() => {\n    if (chartCreated && chartRef?.current?.parentElement) {\n      chartCreated.resize(chartRef.current.parentElement.clientWidth - 32, CANDLE_CHART_HEIGHT)\n      chartCreated.timeScale().fitContent()\n      chartCreated.timeScale().scrollToPosition(0, false)\n    }\n  }, [chartCreated, chartRef])\n\n  // add event listener for resize\n  const isClient = typeof window === 'object'\n  useEffect(() => {\n    if (!isClient) {\n      return null\n    }\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [isClient, chartRef, handleResize]) // Empty array ensures that effect is only run on mount and unmount\n\n  // if chart not instantiated in canvas, create it\n  useEffect(() => {\n    if (!chartCreated && data && !!chartRef?.current?.parentElement) {\n      const chart = createChart(chartRef.current, {\n        height: CANDLE_CHART_HEIGHT,\n        width: chartRef.current.parentElement.clientWidth - 32,\n        layout: {\n          backgroundColor: 'transparent',\n          textColor: theme.colors.textSubtle,\n          fontFamily: 'Kanit, sans-serif',\n          fontSize: 12,\n        },\n        rightPriceScale: {\n          scaleMargins: {\n            top: 0.1,\n            bottom: 0.1,\n          },\n          borderVisible: false,\n        },\n        timeScale: {\n          borderVisible: false,\n          secondsVisible: true,\n          tickMarkFormatter: (unixTime: number) => {\n            return format(unixTime * 1000, 'MM/dd h:mm a')\n          },\n        },\n        watermark: {\n          visible: false,\n        },\n        grid: {\n          horzLines: {\n            visible: false,\n          },\n          vertLines: {\n            visible: false,\n          },\n        },\n        crosshair: {\n          horzLine: {\n            visible: false,\n            labelVisible: false,\n          },\n          mode: 1,\n          vertLine: {\n            visible: true,\n            labelVisible: false,\n            style: 3,\n            width: 1,\n            color: theme.colors.textSubtle,\n            labelBackgroundColor: theme.colors.primary,\n          },\n        },\n      })\n\n      chart.timeScale().fitContent()\n      setChart(chart)\n    }\n  }, [chartCreated, data, setValue, theme])\n\n  useEffect(() => {\n    if (chartCreated && data) {\n      const series = chartCreated.addCandlestickSeries({\n        upColor: theme.colors.success,\n        downColor: theme.colors.failure,\n        borderDownColor: theme.colors.failure,\n        borderUpColor: theme.colors.success,\n        wickDownColor: theme.colors.failure,\n        wickUpColor: theme.colors.success,\n      })\n\n      series.setData(data)\n\n      // update the title when hovering on the chart\n      chartCreated.subscribeCrosshairMove((param) => {\n        if (\n          chartRef?.current &&\n          (param === undefined ||\n            param.time === undefined ||\n            (param && param.point && param.point.x < 0) ||\n            (param && param.point && param.point.x > chartRef.current.clientWidth) ||\n            (param && param.point && param.point.y < 0) ||\n            (param && param.point && param.point.y > CANDLE_CHART_HEIGHT))\n        ) {\n          // reset values\n          if (setValue) setValue(undefined)\n          if (setLabel) setLabel(undefined)\n        } else if (series && param) {\n          const timestamp = param.time as number\n          const now = new Date(timestamp * 1000)\n          const time = `${now.toLocaleString(locale, {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric',\n            hour: 'numeric',\n            minute: '2-digit',\n            timeZone: 'UTC',\n          })} (UTC)`\n          const parsed = param.seriesPrices.get(series) as { open: number } | undefined\n          if (setValue) setValue(parsed?.open)\n          if (setLabel) setLabel(time)\n        }\n      })\n    }\n  }, [locale, chartCreated, data, setValue, setLabel, theme])\n\n  return (\n    <>\n      {!chartCreated && <CandleChartLoader />}\n      <div ref={chartRef} id=\"candle-chart\" {...rest} />\n    </>\n  )\n}\n\nexport default CandleChart\n","/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useState } from 'react'\nimport { RouteComponentProps, Link } from 'react-router-dom'\nimport {\n  Text,\n  Flex,\n  Box,\n  Button,\n  Card,\n  Breadcrumbs,\n  Heading,\n  Spinner,\n  LinkExternal,\n  useMatchBreakpoints,\n  ButtonMenu,\n  ButtonMenuItem,\n  HelpIcon,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport Page from 'components/Layout/Page'\nimport { getBscScanLink } from 'utils'\nimport { CurrencyLogo, DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport SaveIcon from 'views/Info/components/SaveIcon'\nimport { usePoolDatas, usePoolChartData, usePoolTransactions } from 'state/info/hooks'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\nimport { useWatchlistPools } from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport ChartCard from 'views/Info/components/InfoCharts/ChartCard'\n\nconst ContentLayout = styled.div`\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-gap: 1em;\n  margin-top: 16px;\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n  }\n`\n\nconst TokenButton = styled(Flex)`\n  padding: 8px 0px;\n  margin-right: 16px;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst LockedTokensContainer = styled(Flex)`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  background-color: ${({ theme }) => theme.colors.background};\n  padding: 16px;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: 8px;\n  border-radius: 16px;\n  max-width: 280px;\n`\n\nconst PoolPage: React.FC<RouteComponentProps<{ address: string }>> = ({\n  match: {\n    params: { address: routeAddress },\n  },\n}) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n  const [showWeeklyData, setShowWeeklyData] = useState(0)\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\n    t(`Based on last 7 days' performance. Does not account for impermanent loss`),\n    {},\n  )\n\n  // Needed to scroll up if user comes to this page by clicking on entry in the table\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  const address = routeAddress.toLowerCase()\n\n  const poolData = usePoolDatas([address])[0]\n  const chartData = usePoolChartData(address)\n  const transactions = usePoolTransactions(address)\n\n  const [watchlistPools, addPoolToWatchlist] = useWatchlistPools()\n\n  return (\n    <Page symbol={poolData ? `${poolData?.token0.symbol} / ${poolData?.token1.symbol}` : null}>\n      {poolData ? (\n        <>\n          <Flex justifyContent=\"space-between\" mb=\"16px\" flexDirection={['column', 'column', 'row']}>\n            <Breadcrumbs mb=\"32px\">\n              <Link to=\"/info\">\n                <Text color=\"primary\">{t('Info')}</Text>\n              </Link>\n              <Link to=\"/info/pools\">\n                <Text color=\"primary\">{t('Pools')}</Text>\n              </Link>\n              <Flex>\n                <Text mr=\"8px\">{`${poolData.token0.symbol} / ${poolData.token1.symbol}`}</Text>\n              </Flex>\n            </Breadcrumbs>\n            <Flex justifyContent={[null, null, 'flex-end']} mt={['8px', '8px', 0]}>\n              <LinkExternal mr=\"8px\" href={getBscScanLink(address, 'address')}>\n                {t('View on BscScan')}\n              </LinkExternal>\n              <SaveIcon fill={watchlistPools.includes(address)} onClick={() => addPoolToWatchlist(address)} />\n            </Flex>\n          </Flex>\n          <Flex flexDirection=\"column\">\n            <Flex alignItems=\"center\" mb={['8px', null]}>\n              <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} size={32} />\n              <Text\n                ml=\"38px\"\n                bold\n                fontSize={isXs || isSm ? '24px' : '40px'}\n                id=\"info-pool-pair-title\"\n              >{`${poolData.token0.symbol} / ${poolData.token1.symbol}`}</Text>\n            </Flex>\n            <Flex justifyContent=\"space-between\" flexDirection={['column', 'column', 'column', 'row']}>\n              <Flex flexDirection={['column', 'column', 'row']} mb={['8px', '8px', null]}>\n                <Link to={`/info/token/${poolData.token0.address}`}>\n                  <TokenButton>\n                    <CurrencyLogo address={poolData.token0.address} size=\"24px\" />\n                    <Text fontSize=\"16px\" ml=\"4px\" style={{ whiteSpace: 'nowrap' }} width=\"fit-content\">\n                      {`1 ${poolData.token0.symbol} =  ${formatAmount(poolData.token1Price, {\n                        notation: 'standard',\n                        displayThreshold: 0.001,\n                        tokenPrecision: true,\n                      })} ${poolData.token1.symbol}`}\n                    </Text>\n                  </TokenButton>\n                </Link>\n                <Link to={`/info/token/${poolData.token1.address}`}>\n                  <TokenButton ml={[null, null, '10px']}>\n                    <CurrencyLogo address={poolData.token1.address} size=\"24px\" />\n                    <Text fontSize=\"16px\" ml=\"4px\" style={{ whiteSpace: 'nowrap' }} width=\"fit-content\">\n                      {`1 ${poolData.token1.symbol} =  ${formatAmount(poolData.token0Price, {\n                        notation: 'standard',\n                        displayThreshold: 0.001,\n                        tokenPrecision: true,\n                      })} ${poolData.token0.symbol}`}\n                    </Text>\n                  </TokenButton>\n                </Link>\n              </Flex>\n              <Flex>\n                <Link to={`/add/${poolData.token0.address}/${poolData.token1.address}`}>\n                  <Button mr=\"8px\" variant=\"secondary\">\n                    {t('Add Liquidity')}\n                  </Button>\n                </Link>\n                <Link to={`/swap?inputCurrency=${poolData.token0.address}&outputCurrency=${poolData.token1.address}`}>\n                  <Button>{t('Trade')}</Button>\n                </Link>\n              </Flex>\n            </Flex>\n          </Flex>\n          <ContentLayout>\n            <Box>\n              <Card>\n                <Box p=\"24px\">\n                  <Flex justifyContent=\"space-between\">\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n                        {t('Liquidity')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        ${formatAmount(poolData.liquidityUSD)}\n                      </Text>\n                      <Percent value={poolData.liquidityUSDChange} />\n                    </Flex>\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n                        {t('LP reward APR')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        {formatAmount(poolData.lpApr7d)}%\n                      </Text>\n                      <Flex alignItems=\"center\">\n                        <span ref={targetRef}>\n                          <HelpIcon color=\"textSubtle\" />\n                        </span>\n                        <Text ml=\"4px\" fontSize=\"12px\" color=\"textSubtle\">\n                          {t('7D performance')}\n                        </Text>\n                        {tooltipVisible && tooltip}\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                  <Text color=\"secondary\" bold mt=\"24px\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Total Tokens Locked')}\n                  </Text>\n                  <LockedTokensContainer>\n                    <Flex justifyContent=\"space-between\">\n                      <Flex>\n                        <CurrencyLogo address={poolData.token0.address} size=\"24px\" />\n                        <Text small color=\"textSubtle\" ml=\"8px\">\n                          {poolData.token0.symbol}\n                        </Text>\n                      </Flex>\n                      <Text small>{formatAmount(poolData.liquidityToken0)}</Text>\n                    </Flex>\n                    <Flex justifyContent=\"space-between\">\n                      <Flex>\n                        <CurrencyLogo address={poolData.token1.address} size=\"24px\" />\n                        <Text small color=\"textSubtle\" ml=\"8px\">\n                          {poolData.token1.symbol}\n                        </Text>\n                      </Flex>\n                      <Text small>{formatAmount(poolData.liquidityToken1)}</Text>\n                    </Flex>\n                  </LockedTokensContainer>\n                </Box>\n              </Card>\n              <Card mt=\"16px\">\n                <Flex flexDirection=\"column\" p=\"24px\">\n                  <ButtonMenu\n                    activeIndex={showWeeklyData}\n                    onItemClick={(index) => setShowWeeklyData(index)}\n                    scale=\"sm\"\n                    variant=\"subtle\"\n                  >\n                    <ButtonMenuItem width=\"100%\">{t('24H')}</ButtonMenuItem>\n                    <ButtonMenuItem width=\"100%\">{t('7D')}</ButtonMenuItem>\n                  </ButtonMenu>\n                  <Flex mt=\"24px\">\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n                        {showWeeklyData ? t('Volume 7D') : t('Volume 24H')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        ${showWeeklyData ? formatAmount(poolData.volumeUSDWeek) : formatAmount(poolData.volumeUSD)}\n                      </Text>\n                      <Percent value={showWeeklyData ? poolData.volumeUSDChangeWeek : poolData.volumeUSDChange} />\n                    </Flex>\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n                        {showWeeklyData ? t('LP reward fees 7D') : t('LP reward fees 24H')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        ${showWeeklyData ? formatAmount(poolData.lpFees7d) : formatAmount(poolData.lpFees24h)}\n                      </Text>\n                      <Text color=\"textSubtle\" fontSize=\"12px\">\n                        {t('out of $%totalFees% total fees', {\n                          totalFees: showWeeklyData\n                            ? formatAmount(poolData.totalFees7d)\n                            : formatAmount(poolData.totalFees24h),\n                        })}\n                      </Text>\n                    </Flex>\n                  </Flex>\n                </Flex>\n              </Card>\n            </Box>\n            <ChartCard variant=\"pool\" chartData={chartData} />\n          </ContentLayout>\n          <Heading mb=\"16px\" mt=\"40px\" scale=\"lg\">\n            {t('Transactions')}\n          </Heading>\n          <TransactionTable transactions={transactions} />\n        </>\n      ) : (\n        <Flex mt=\"80px\" justifyContent=\"center\">\n          <Spinner />\n        </Flex>\n      )}\n    </Page>\n  )\n}\n\nexport default PoolPage\n","import React, { useMemo, useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Box, Card } from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport { useAllTokenData } from 'state/info/hooks'\nimport { TokenData } from 'state/info/types'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CardWrapper = styled(Link)`\n  display: inline-block;\n  min-width: 190px;\n  margin-left: 16px;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst TopMoverCard = styled(Box)`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.card};\n  padding: 16px;\n`\n\nexport const ScrollableRow = styled.div`\n  width: 100%;\n  overflow-x: auto;\n  padding: 16px 0;\n  white-space: nowrap;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst DataCard = ({ tokenData }: { tokenData: TokenData }) => {\n  return (\n    <CardWrapper to={`/info/token/${tokenData.address}`}>\n      <TopMoverCard>\n        <Flex>\n          <Box width=\"32px\" height=\"32px\">\n            {/* wrapped in a box because of alignment issues between img and svg */}\n            <CurrencyLogo address={tokenData.address} size=\"32px\" />\n          </Box>\n          <Box ml=\"16px\">\n            <Text>{tokenData.symbol}</Text>\n            <Flex alignItems=\"center\">\n              <Text fontSize=\"14px\" mr=\"6px\" lineHeight=\"16px\">\n                ${formatAmount(tokenData.priceUSD)}\n              </Text>\n              <Percent fontSize=\"14px\" value={tokenData.priceUSDChange} />\n            </Flex>\n          </Box>\n        </Flex>\n      </TopMoverCard>\n    </CardWrapper>\n  )\n}\n\nconst TopTokenMovers: React.FC = () => {\n  const allTokens = useAllTokenData()\n  const { t } = useTranslation()\n\n  const topPriceIncrease = useMemo(() => {\n    return Object.values(allTokens)\n      .sort(({ data: a }, { data: b }) => {\n        // eslint-disable-next-line no-nested-ternary\n        return a && b ? (Math.abs(a?.priceUSDChange) > Math.abs(b?.priceUSDChange) ? -1 : 1) : -1\n      })\n      .slice(0, Math.min(20, Object.values(allTokens).length))\n  }, [allTokens])\n\n  const increaseRef = useRef<HTMLDivElement>(null)\n  const moveLeftRef = useRef<boolean>(true)\n\n  useEffect(() => {\n    const scrollInterval = setInterval(() => {\n      if (increaseRef.current) {\n        if (increaseRef.current.scrollLeft === increaseRef.current.scrollWidth - increaseRef.current.clientWidth) {\n          moveLeftRef.current = false\n        } else if (increaseRef.current.scrollLeft === 0) {\n          moveLeftRef.current = true\n        }\n        increaseRef.current.scrollTo(\n          moveLeftRef.current ? increaseRef.current.scrollLeft + 1 : increaseRef.current.scrollLeft - 1,\n          0,\n        )\n      }\n    }, 30)\n\n    return () => {\n      clearInterval(scrollInterval)\n    }\n  }, [])\n\n  if (topPriceIncrease.length === 0 || !topPriceIncrease.some((entry) => entry.data)) {\n    return null\n  }\n\n  return (\n    <Card my=\"16px\">\n      <Text ml=\"16px\" mt=\"8px\">\n        {t('Top Movers')}\n      </Text>\n      <ScrollableRow ref={increaseRef}>\n        {topPriceIncrease.map((entry) =>\n          entry.data ? <DataCard key={`top-card-token-${entry.data?.address}`} tokenData={entry.data} /> : null,\n        )}\n      </ScrollableRow>\n    </Card>\n  )\n}\n\nexport default TopTokenMovers\n","import React, { useMemo, useEffect } from 'react'\nimport { Text, Heading, Card } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\nimport { useAllTokenData, useTokenDatas } from 'state/info/hooks'\nimport { useWatchlistTokens } from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport TopTokenMovers from 'views/Info/components/TopTokenMovers'\n\nconst TokensOverview: React.FC = () => {\n  const { t } = useTranslation()\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  const allTokens = useAllTokenData()\n\n  const formattedTokens = useMemo(() => {\n    return Object.values(allTokens)\n      .map((token) => token.data)\n      .filter((token) => token)\n  }, [allTokens])\n\n  const [savedTokens] = useWatchlistTokens()\n  const watchListTokens = useTokenDatas(savedTokens)\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\">\n        {t('Your Watchlist')}\n      </Heading>\n      {savedTokens.length > 0 ? (\n        <TokenTable tokenDatas={watchListTokens} />\n      ) : (\n        <Card>\n          <Text py=\"16px\" px=\"24px\">\n            {t('Saved tokens will appear here')}\n          </Text>\n        </Card>\n      )}\n      <TopTokenMovers />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\" id=\"info-tokens-title\">\n        {t('All Tokens')}\n      </Heading>\n      <TokenTable tokenDatas={formattedTokens} />\n    </Page>\n  )\n}\n\nexport default TokensOverview\n","import { useState, useEffect } from 'react'\n\n// endpoint to check asset exists and get url to CMC page\n// returns 400 status code if token is not on CMC\nconst CMC_ENDPOINT = 'https://3rdparty-apis.coinmarketcap.com/v1/cryptocurrency/contract?address='\n\n/**\n * Check if asset exists on CMC, if exists\n * return  url, if not return undefined\n * @param address token address (all lowercase, checksummed are not supported by CMC)\n */\nconst useCMCLink = (address: string): string | undefined => {\n  const [cmcPageUrl, setCMCPageUrl] = useState<string | undefined>(undefined)\n\n  useEffect(() => {\n    const fetchLink = async () => {\n      const result = await fetch(`${CMC_ENDPOINT}${address}`)\n      // if link exists, format the url\n      if (result.status === 200) {\n        result.json().then(({ data }) => {\n          setCMCPageUrl(data.url)\n        })\n      }\n    }\n    if (address) {\n      fetchLink()\n    }\n  }, [address])\n\n  return cmcPageUrl\n}\n\nexport default useCMCLink\n","/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useMemo } from 'react'\nimport { RouteComponentProps, Link } from 'react-router-dom'\nimport { Duration } from 'date-fns'\nimport styled from 'styled-components'\nimport {\n  Text,\n  Box,\n  Heading,\n  Button,\n  Card,\n  Flex,\n  Breadcrumbs,\n  Link as UIKitLink,\n  LinkExternal,\n  Spinner,\n  Image,\n  useMatchBreakpoints,\n} from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport useCMCLink from 'views/Info/hooks/useCMCLink'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport SaveIcon from 'views/Info/components/SaveIcon'\nimport {\n  usePoolDatas,\n  useTokenData,\n  usePoolsForToken,\n  useTokenChartData,\n  useTokenPriceData,\n  useTokenTransactions,\n} from 'state/info/hooks'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\nimport { useWatchlistTokens } from 'state/user/hooks'\nimport { ONE_HOUR_SECONDS } from 'config/constants/info'\nimport { useTranslation } from 'contexts/Localization'\nimport ChartCard from 'views/Info/components/InfoCharts/ChartCard'\n\nconst ContentLayout = styled.div`\n  margin-top: 16px;\n  display: grid;\n  grid-template-columns: 260px 1fr;\n  grid-gap: 1em;\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n  }\n`\n\nconst StyledCMCLink = styled(UIKitLink)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n\n  & :hover {\n    opacity: 0.8;\n  }\n`\nconst DEFAULT_TIME_WINDOW: Duration = { weeks: 1 }\n\nconst TokenPage: React.FC<RouteComponentProps<{ address: string }>> = ({\n  match: {\n    params: { address: routeAddress },\n  },\n}) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n\n  // Needed to scroll up if user comes to this page by clicking on entry in the table\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  const address = routeAddress.toLowerCase()\n\n  const cmcLink = useCMCLink(address)\n\n  const tokenData = useTokenData(address)\n  const poolsForToken = usePoolsForToken(address)\n  const poolDatas = usePoolDatas(poolsForToken ?? [])\n  const transactions = useTokenTransactions(address)\n  const chartData = useTokenChartData(address)\n\n  // pricing data\n  const priceData = useTokenPriceData(address, ONE_HOUR_SECONDS, DEFAULT_TIME_WINDOW)\n  const adjustedPriceData = useMemo(() => {\n    // Include latest available price\n    if (priceData && tokenData && priceData.length > 0) {\n      return [\n        ...priceData,\n        {\n          time: new Date().getTime() / 1000,\n          open: priceData[priceData.length - 1].close,\n          close: tokenData?.priceUSD,\n          high: tokenData?.priceUSD,\n          low: priceData[priceData.length - 1].close,\n        },\n      ]\n    }\n    return undefined\n  }, [priceData, tokenData])\n\n  const [watchlistTokens, addWatchlistToken] = useWatchlistTokens()\n\n  return (\n    <Page symbol={tokenData?.symbol}>\n      {tokenData ? (\n        !tokenData.exists ? (\n          <Card>\n            <Box p=\"16px\">\n              <Text>\n                {t('No pool has been created with this token yet. Create one')}\n                <Link style={{ display: 'inline', marginLeft: '6px' }} to={`/add/${address}`}>\n                  {t('here.')}\n                </Link>\n              </Text>\n            </Box>\n          </Card>\n        ) : (\n          <>\n            {/* Stuff on top */}\n            <Flex justifyContent=\"space-between\" mb=\"24px\" flexDirection={['column', 'column', 'row']}>\n              <Breadcrumbs mb=\"32px\">\n                <Link to=\"/info\">\n                  <Text color=\"primary\">{t('Info')}</Text>\n                </Link>\n                <Link to=\"/info/tokens\">\n                  <Text color=\"primary\">{t('Tokens')}</Text>\n                </Link>\n                <Flex>\n                  <Text mr=\"8px\">{tokenData.symbol}</Text>\n                  <Text>{`(${truncateHash(address)})`}</Text>\n                </Flex>\n              </Breadcrumbs>\n              <Flex justifyContent={[null, null, 'flex-end']} mt={['8px', '8px', 0]}>\n                <LinkExternal mr=\"8px\" color=\"primary\" href={getBscScanLink(address, 'address')}>\n                  {t('View on BscScan')}\n                </LinkExternal>\n                {cmcLink && (\n                  <StyledCMCLink href={cmcLink} rel=\"noopener noreferrer nofollow\" target=\"_blank\">\n                    <Image src=\"/images/CMC-logo.svg\" height={22} width={22} alt={t('View token on CoinMarketCap')} />\n                  </StyledCMCLink>\n                )}\n                <SaveIcon fill={watchlistTokens.includes(address)} onClick={() => addWatchlistToken(address)} />\n              </Flex>\n            </Flex>\n            <Flex justifyContent=\"space-between\" flexDirection={['column', 'column', 'column', 'row']}>\n              <Flex flexDirection=\"column\" mb={['8px', null]}>\n                <Flex alignItems=\"center\">\n                  <CurrencyLogo size=\"32px\" address={address} />\n                  <Text\n                    ml=\"12px\"\n                    bold\n                    lineHeight=\"0.7\"\n                    fontSize={isXs || isSm ? '24px' : '40px'}\n                    id=\"info-token-name-title\"\n                  >\n                    {tokenData.name}\n                  </Text>\n                  <Text ml=\"12px\" lineHeight=\"1\" color=\"textSubtle\" fontSize={isXs || isSm ? '14px' : '20px'}>\n                    ({tokenData.symbol})\n                  </Text>\n                </Flex>\n                <Flex mt=\"8px\" ml=\"46px\" alignItems=\"center\">\n                  <Text mr=\"16px\" bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.priceUSD, { notation: 'standard' })}\n                  </Text>\n                  <Percent value={tokenData.priceUSDChange} fontWeight={600} />\n                </Flex>\n              </Flex>\n              <Flex>\n                <Link to={`/add/${address}`}>\n                  <Button mr=\"8px\" variant=\"secondary\">\n                    {t('Add Liquidity')}\n                  </Button>\n                </Link>\n                <Link to={`/swap?inputCurrency=${address}`}>\n                  <Button>{t('Trade')}</Button>\n                </Link>\n              </Flex>\n            </Flex>\n\n            {/* data on the right side of chart */}\n            <ContentLayout>\n              <Card>\n                <Box p=\"24px\">\n                  <Text bold small color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Liquidity')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.liquidityUSD)}\n                  </Text>\n                  <Percent value={tokenData.liquidityUSDChange} />\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Volume 24H')}\n                  </Text>\n                  <Text bold fontSize=\"24px\" textTransform=\"uppercase\">\n                    ${formatAmount(tokenData.volumeUSD)}\n                  </Text>\n                  <Percent value={tokenData.volumeUSDChange} />\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Volume 7D')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.volumeUSDWeek)}\n                  </Text>\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Transactions 24H')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    {formatAmount(tokenData.txCount, { isInteger: true })}\n                  </Text>\n                </Box>\n              </Card>\n              {/* charts card */}\n              <ChartCard\n                variant=\"token\"\n                chartData={chartData}\n                tokenData={tokenData}\n                tokenPriceData={adjustedPriceData}\n              />\n            </ContentLayout>\n\n            {/* pools and transaction tables */}\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\n              {t('Pools')}\n            </Heading>\n\n            <PoolTable poolDatas={poolDatas} />\n\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\n              {t('Transactions')}\n            </Heading>\n\n            <TransactionTable transactions={transactions} />\n          </>\n        )\n      ) : (\n        <Flex mt=\"80px\" justifyContent=\"center\">\n          <Spinner />\n        </Flex>\n      )}\n    </Page>\n  )\n}\n\nexport default TokenPage\n","import React from 'react'\nimport { Redirect, RouteComponentProps } from 'react-router-dom'\nimport { isAddress } from 'ethers/lib/utils'\nimport TokenPage from './TokenPage'\n\nconst RedirectInvalidToken = (props: RouteComponentProps<{ address: string }>) => {\n  const {\n    match: {\n      params: { address },\n    },\n  } = props\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  if (!isAddress(address.toLowerCase())) {\n    return <Redirect to=\"/\" />\n  }\n  return <TokenPage {...props} />\n}\n\nexport default RedirectInvalidToken\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { PoolUpdater, ProtocolUpdater, TokenUpdater } from 'state/info/updaters'\nimport InfoNav from './components/InfoNav'\nimport Overview from './Overview'\nimport Pools from './Pools'\nimport PoolPage from './Pools/PoolPage'\nimport Tokens from './Tokens'\nimport RedirectInvalidToken from './Tokens/redirects'\n\nconst Info: React.FC = () => {\n  return (\n    <>\n      <ProtocolUpdater />\n      <PoolUpdater />\n      <TokenUpdater />\n      <InfoNav />\n      <Route path=\"/info\" exact>\n        <Overview />\n      </Route>\n      <Route path=\"/info/pools\" exact>\n        <Pools />\n      </Route>\n      <Route path=\"/info/tokens\" exact>\n        <Tokens />\n      </Route>\n      <Route exact path={['/info/tokens/:address', '/info/token/:address']} component={RedirectInvalidToken} />\n      <Route exact path={['/info/pools/:address', '/info/pool/:address', '/info/pair/:address']} component={PoolPage} />\n    </>\n  )\n}\n\nexport default Info\n"],"sourceRoot":""}