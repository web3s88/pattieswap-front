{"version":3,"sources":["views/Nft/market/components/StatBox.tsx","components/AddressInputSelect/index.tsx","views/Nft/market/components/MarketPageHeader.tsx","views/Nft/market/components/BannerHeader/AvatarImage.tsx","views/Nft/market/components/SearchBar.tsx","views/Nft/market/components/MarketPageTitle.tsx","views/Nft/market/components/BaseSubMenu.tsx","views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx","views/Nft/market/components/CollectibleCard/styles.tsx","views/Nft/market/hooks/useGetCollectionDistribution.tsx","../node_modules/lodash/sum.js","views/Nft/market/Collection/TopBar.tsx","views/Nft/market/Collection/LowestPriceStatBoxItem.tsx","views/Nft/market/Collection/Header.tsx","views/Nft/market/hooks/useGetLowestPrice.ts","../node_modules/lodash/capitalize.js","../node_modules/lodash/_baseSum.js","components/CollapsibleCard/index.tsx","views/Nft/market/Collection/Traits/styles.tsx","views/Nft/market/Collection/Traits/PancakeBunniesTraits.tsx","views/Nft/market/Collection/Traits/utils.tsx","views/Nft/market/Collection/Traits/CollectionTraits.tsx","views/Nft/market/Collection/Traits/index.tsx"],"names":["StatBoxItem","title","stat","props","fontSize","color","textAlign","height","width","mx","fontWeight","StatBox","styled","Flex","theme","colors","invertedContrast","cardBorder","radii","card","ResultStatus","SubMenu","div","input","inputSecondary","default","isOpen","AddressLink","Text","initialState","isFetching","resultFound","NOT_VALID","value","defaultValidAddressHandler","Promise","resolve","AddressInputSelect","onValidAddress","onAddressClick","useState","state","setState","t","useTranslation","useEffect","isAddress","a","prevState","hasResults","FOUND","NOT_FOUND","validAddressHandler","position","placeholder","subject","toLowerCase","onChange","evt","newValue","target","style","zIndex","paddingRight","top","right","onClick","px","MarketPageHeader","background","useTheme","isDark","AvatarImage","attrs","alt","src","borderColor","SearchBar","history","useHistory","push","nftsBaseUrl","MarketPageTitle","description","children","gridGap","alignItems","gridTemplateColumns","as","scale","mb","BaseSubMenu","SubMenuItems","StyledBannerImage","mediaQueries","sm","md","BannerHeader","bannerImage","bannerAlt","avatar","flexDirection","pb","BannerImage","bottom","left","BNBAmountLabel","amount","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","CostLabel","cost","bnbBusdPrice","priceInUsd","multiplyPriceByAmount","MetaRow","justifyContent","maxWidth","ellipsis","StyledCollectibleCard","Card","lg","LowestPriceMetaRow","lowestPrice","useGetCollectionDistributionPB","data","getCollectionDistributionApi","pancakeBunniesAddress","apiResponse","fetchTokens","useGetCollectionDistribution","collectionAddress","baseSum","require","identity","module","exports","array","length","BackLink","RouterLink","primary","TopBar","to","LowestPriceStatBoxItem","setLowestPrice","getLowestPriceInCollection","lowestCollectionPrice","fetchLowestPrice","formattedLowestPrice","symbol","Header","collection","useParams","totalSupply","numberTokensListed","totalVolumeBNB","banner","useLocation","pathname","hash","volume","parseFloat","itemsConfig","label","href","large","name","formatNumber","Number","address","Container","items","activeItem","mt","getBunnyIdFromNft","nft","bunnyId","attributes","find","attr","traitType","toString","useGetLowestPriceFromBunnyId","setIsFetching","getNftsMarketData","otherId","isTradable","response","tokenMarketData","currentAskPrice","useGetLowestPriceFromNft","isPancakeBunny","bunnyIdAttr","upperFirst","string","iteratee","result","index","current","CollapsibleCard","initialOpenState","setIsOpen","p","variant","StyledSortButton","button","secondary","TableWrapper","NftImage","Image","ClickableRow","tr","NftName","thumbnailSrc","mr","LowestPriceCell","PancakeBunniesTraits","tokenApiResponse","setTokenApiResponse","raritySort","setRaritySort","getNftsFromCollectionApi","totalMinted","sum","Object","values","attributesDistribution","sortedBunnieKeys","useMemo","keys","sort","bunnyIdA","bunnyIdB","bunnyCountA","bunnyCountB","sortBunniesByRarityBuilder","type","currentValue","map","count","percentage","image","thumbnail","times","bunnyCnt","CollectionTraits","total","traitValues","reduce","accum","traitValue","rarity","sortType","capitalize","prevRaritySort","orderBy","Traits","dispatch","useAppDispatch","useGetCollection","fetchCollection","py"],"mappings":"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","file":"static/js/10.0f81de80.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\n\nexport interface StatBoxItemProps extends BoxProps {\n  title: string\n  stat: string\n}\n\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\n  <Box {...props}>\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\n      {title}\n    </Text>\n    {stat === null ? (\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\n    ) : (\n      <Text fontWeight=\"600\" textAlign=\"center\">\n        {stat}\n      </Text>\n    )}\n  </Box>\n)\n\nconst StatBox = styled(Flex)`\n  align-items: center;\n  background: ${({ theme }) => theme.colors.invertedContrast};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.card};\n  justify-content: space-around;\n  padding: 8px;\n  width: 100%;\n`\n\nexport default StatBox\n","import React, { ChangeEvent, useState, useEffect } from 'react'\nimport { Box, BoxProps, Text, Input } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { isAddress } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport CircleLoader from 'components/Loader/CircleLoader'\n\nenum ResultStatus {\n  NOT_VALID,\n  FOUND,\n  NOT_FOUND,\n}\n\ninterface AddressInputSelectProps extends BoxProps {\n  onValidAddress?: (value: string) => Promise<boolean>\n  onAddressClick: (value: string) => void\n}\n\nconst SubMenu = styled.div<{ isOpen: boolean }>`\n  align-items: center;\n  background: ${({ theme }) => theme.colors.input};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 0 0 ${({ theme }) => theme.radii.default} ${({ theme }) => theme.radii.default};\n  left: 0;\n  padding-bottom: 8px;\n  padding-top: 16px;\n  position: absolute;\n  top: calc(100% - 12px);\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  width: 100%;\n  z-index: 15;\n\n  ${({ isOpen }) =>\n    isOpen &&\n    `\n    height: auto;\n    opacity: 1;\n    transform: scaleY(1);\n  `}\n`\n\nconst AddressLink = styled(Text)`\n  cursor: pointer;\n  overflow-wrap: break-word;\n  font-weight: bold;\n  padding-left: 16px;\n  padding-right: 16px;\n`\n\nconst initialState = {\n  isFetching: false,\n  resultFound: ResultStatus.NOT_VALID,\n  value: '',\n}\n\nconst defaultValidAddressHandler = () => Promise.resolve(true)\n\nconst AddressInputSelect: React.FC<AddressInputSelectProps> = ({\n  onValidAddress = defaultValidAddressHandler,\n  onAddressClick,\n  ...props\n}) => {\n  const [state, setState] = useState(initialState)\n  const { t } = useTranslation()\n  const { isFetching, resultFound, value } = state\n\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    const { value: newValue } = evt.target\n    setState((prevState) => ({\n      ...prevState,\n      value: newValue,\n    }))\n  }\n\n  const handleClick = () => {\n    setState(initialState)\n    onAddressClick(state.value)\n  }\n\n  // When we have a valid address fetch the data\n  useEffect(() => {\n    const isValidAddress = isAddress(value) !== false\n\n    const validAddressHandler = async () => {\n      try {\n        setState((prevState) => ({ ...prevState, isFetching: true }))\n        const hasResults = await onValidAddress(value)\n\n        setState((prevState) => ({\n          ...prevState,\n          isFetching: false,\n          resultFound: hasResults ? ResultStatus.FOUND : ResultStatus.NOT_FOUND,\n        }))\n      } catch {\n        setState((prevState) => ({ ...prevState, isFetching: false }))\n      }\n    }\n\n    if (isValidAddress) {\n      validAddressHandler()\n    } else {\n      setState((prevState) => ({ ...prevState, resultFound: ResultStatus.NOT_VALID }))\n    }\n  }, [value, onValidAddress, setState])\n\n  return (\n    <Box position=\"relative\" {...props}>\n      <Input\n        placeholder={t('Search %subject%', { subject: t('Address').toLowerCase() })}\n        value={state.value}\n        onChange={handleChange}\n        style={{ position: 'relative', zIndex: 16, paddingRight: '40px' }}\n      />\n      {isFetching && (\n        <Box position=\"absolute\" top=\"12px\" right=\"16px\" style={{ zIndex: 17 }}>\n          <CircleLoader />\n        </Box>\n      )}\n      <SubMenu isOpen={resultFound !== ResultStatus.NOT_VALID}>\n        {resultFound === ResultStatus.FOUND ? (\n          <AddressLink onClick={handleClick}>{state.value}</AddressLink>\n        ) : (\n          <Text px=\"16px\" fontWeight=\"bold\">\n            {t('No results found.')}\n          </Text>\n        )}\n      </SubMenu>\n    </Box>\n  )\n}\n\nexport default AddressInputSelect\n","import React from 'react'\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\nimport useTheme from 'hooks/useTheme'\n\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\n  const { theme } = useTheme()\n  const background = theme.isDark\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\n  return <PageHeader background={background} {...props} />\n}\n\nexport default MarketPageHeader\n","import styled from 'styled-components'\n\ninterface AvatarImageProps {\n  src: string\n  borderColor?: string\n  alt?: string\n}\n\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\n  alt,\n}))<AvatarImageProps>`\n  background: url('${({ src }) => src}');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default AvatarImage\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport AddressInputSelect from 'components/AddressInputSelect'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\n\nconst SearchBar: React.FC = (props) => {\n  const history = useHistory()\n\n  const handleAddressClick = (value: string) => {\n    history.push(`${nftsBaseUrl}/profile/${value}`)\n  }\n\n  return <AddressInputSelect onAddressClick={handleAddressClick} {...props} />\n}\n\nexport default SearchBar\n","import React, { ReactNode } from 'react'\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\n\ninterface MarketPageTitleProps extends GridProps {\n  title: string\n  description?: ReactNode\n}\n\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\n    <Box>\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\n        {title}\n      </Heading>\n      {description}\n    </Box>\n    <Box>{children}</Box>\n  </Grid>\n)\n\nexport default MarketPageTitle\n","import { SubMenuItems } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseSubMenu = styled(SubMenuItems)`\n  background-color: transparent;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n`\n\nexport default BaseSubMenu\n","import styled from 'styled-components'\n\ninterface StyledBannerImageProps {\n  src: string\n  alt?: string\n}\n\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\n  alt,\n}))<StyledBannerImageProps>`\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\n  background-image: url('${({ src }) => src}');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 100%;\n  border-radius: 32px;\n  height: 123px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 192px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    height: 256px;\n  }\n`\n\nexport default StyledBannerImage\n","import React, { ReactNode } from 'react'\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\nimport BannerImage from './BannerImage'\n\ninterface BannerHeaderProps extends FlexProps {\n  bannerImage: string\n  bannerAlt?: string\n  avatar?: ReactNode\n}\n\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\n  return (\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\n      <Box position=\"relative\" pb=\"56px\">\n        <BannerImage src={bannerImage} alt={bannerAlt} />\n        <Box position=\"absolute\" bottom={0} left={-4}>\n          <Flex alignItems=\"flex-end\">\n            {avatar}\n            {children}\n          </Flex>\n        </Box>\n      </Box>\n    </Flex>\n  )\n}\n\nexport default BannerHeader\n","import React, { ReactElement } from 'react'\nimport {\n  Card,\n  BinanceIcon,\n  Box,\n  BoxProps,\n  CameraIcon,\n  Flex,\n  FlexProps,\n  SellIcon,\n  Text,\n  WalletFilledIcon,\n  Skeleton,\n} from '@pancakeswap/uikit'\nimport { Price } from 'sdk'\nimport { useTranslation } from 'contexts/Localization'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport styled from 'styled-components'\n\nexport const Footer: React.FC<BoxProps> = ({ children, ...props }) => (\n  <Box borderTop={[null, null, null, '1px solid']} borderColor=\"cardBorder\" pt=\"8px\" {...props}>\n    {children}\n  </Box>\n)\n\ninterface BNBAmountLabelProps extends FlexProps {\n  amount: number\n}\n\nexport const BNBAmountLabel: React.FC<BNBAmountLabelProps> = ({ amount, ...props }) => (\n  <Flex alignItems=\"center\" {...props}>\n    <BinanceIcon width=\"16px\" mx=\"4px\" />\n    <Text fontWeight=\"600\">\n      {amount.toLocaleString(undefined, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 4,\n      })}\n    </Text>\n  </Flex>\n)\n\ninterface CostLabelProps extends FlexProps {\n  cost: number\n  bnbBusdPrice: Price\n}\n\nexport const CostLabel: React.FC<CostLabelProps> = ({ cost, bnbBusdPrice, ...props }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, cost)\n\n  return (\n    <Flex alignItems=\"center\" {...props}>\n      {priceInUsd > 0 && (\n        <Text fontSize=\"12px\" color=\"textSubtle\">{`($${priceInUsd.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })})`}</Text>\n      )}\n      <BNBAmountLabel amount={cost} />\n    </Flex>\n  )\n}\n\ninterface MetaRowProps extends FlexProps {\n  title: string\n}\n\nexport const MetaRow: React.FC<MetaRowProps> = ({ title, children, ...props }) => (\n  <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n    <Text fontSize=\"12px\" color=\"textSubtle\" maxWidth=\"120px\" ellipsis title={title}>\n      {title}\n    </Text>\n    <Box>{children}</Box>\n  </Flex>\n)\n\nexport interface NftTagProps extends FlexProps {\n  icon?: ReactElement\n  color?: string\n}\n\nexport const NftTag: React.FC<NftTagProps> = ({ icon, color = 'text', children, ...props }) => (\n  <Flex display=\"inline-flex\" alignItems=\"center\" height=\"24px\" {...props}>\n    {icon}\n    <Text color={color} fontSize=\"14px\" fontWeight=\"600\">\n      {children}\n    </Text>\n  </Flex>\n)\n\nexport const ProfileNftTag: React.FC<NftTagProps> = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <NftTag icon={<CameraIcon mr=\"4px\" width=\"16px\" color=\"textSubtle\" />} color=\"textSubtle\" {...props}>\n      {t('Profile')}\n    </NftTag>\n  )\n}\n\nexport const WalletNftTag: React.FC<NftTagProps> = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <NftTag icon={<WalletFilledIcon mr=\"4px\" width=\"16px\" color=\"secondary\" />} color=\"secondary\" {...props}>\n      {t('Wallet')}\n    </NftTag>\n  )\n}\n\nexport const SellingNftTag: React.FC<NftTagProps> = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <NftTag icon={<SellIcon mr=\"4px\" width=\"16px\" color=\"failure\" />} color=\"failure\" {...props}>\n      {t('Selling')}\n    </NftTag>\n  )\n}\n\nexport const StyledCollectibleCard = styled(Card)`\n  border-radius: 8px;\n  max-width: 320px;\n  transition: opacity 200ms;\n\n  & > div {\n    border-radius: 8px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    &:hover {\n      cursor: pointer;\n      opacity: 0.6;\n    }\n  }\n`\ninterface LowestPriceMetaRowProps {\n  lowestPrice: number\n  isFetching: boolean\n  bnbBusdPrice: Price\n}\n\nexport const LowestPriceMetaRow = ({ lowestPrice, isFetching, bnbBusdPrice }: LowestPriceMetaRowProps) => {\n  const { t } = useTranslation()\n\n  if (!isFetching && !lowestPrice) {\n    return null\n  }\n\n  return (\n    <MetaRow title={t('Lowest price')}>\n      {isFetching ? (\n        <Skeleton height=\"24px\" width=\"30px\" />\n      ) : (\n        <CostLabel cost={lowestPrice} bnbBusdPrice={bnbBusdPrice} />\n      )}\n    </MetaRow>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { getCollectionDistributionApi } from 'state/nftMarket/helpers'\nimport { ApiCollectionDistribution, ApiCollectionDistributionPB } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\ninterface State {\n  isFetching: boolean\n  data: ApiCollectionDistribution['data']\n}\n\nconst useGetCollectionDistribution = (collectionAddress: string) => {\n  const [state, setState] = useState<State>({ isFetching: false, data: null })\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      setState((prevState) => ({ ...prevState, isFetching: true }))\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistribution>(collectionAddress)\n      setState({\n        isFetching: false,\n        data: apiResponse.data,\n      })\n    }\n\n    fetchTokens()\n  }, [collectionAddress, setState])\n\n  return state\n}\n\ninterface StatePB {\n  isFetching: boolean\n  data: ApiCollectionDistributionPB['data']\n}\n\nexport const useGetCollectionDistributionPB = () => {\n  const [state, setState] = useState<StatePB>({ isFetching: false, data: null })\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      setState((prevState) => ({ ...prevState, isFetching: true }))\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistributionPB>(pancakeBunniesAddress)\n      setState({\n        isFetching: false,\n        data: apiResponse.data,\n      })\n    }\n\n    fetchTokens()\n  }, [setState])\n\n  return state\n}\n\nexport default useGetCollectionDistribution\n","var baseSum = require('./_baseSum'),\n    identity = require('./identity');\n\n/**\n * Computes the sum of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 3.4.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the sum.\n * @example\n *\n * _.sum([4, 2, 8, 6]);\n * // => 20\n */\nfunction sum(array) {\n  return (array && array.length)\n    ? baseSum(array, identity)\n    : 0;\n}\n\nmodule.exports = sum;\n","import React from 'react'\nimport { Box, ChevronLeftIcon, Flex } from '@pancakeswap/uikit'\nimport { Link as RouterLink } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport SearchBar from '../components/SearchBar'\n\nconst BackLink = styled(RouterLink)`\n  align-items: center;\n  color: ${({ theme }) => theme.colors.primary};\n  display: inline-flex;\n  font-weight: 600;\n`\n\nconst TopBar: React.FC = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n      <BackLink to={`${nftsBaseUrl}/collections`}>\n        <ChevronLeftIcon color=\"primary\" width=\"24px\" />\n        {t('All Collections')}\n      </BackLink>\n      <Box>\n        <SearchBar />\n      </Box>\n    </Flex>\n  )\n}\n\nexport default TopBar\n","import React, { useEffect, useState } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { getLowestPriceInCollection } from 'state/nftMarket/helpers'\nimport { StatBoxItem, StatBoxItemProps } from '../components/StatBox'\n\ninterface LowestPriceStatBoxItemProps extends Omit<StatBoxItemProps, 'title' | 'stat'> {\n  collectionAddress: string\n}\n\nconst LowestPriceStatBoxItem: React.FC<LowestPriceStatBoxItemProps> = ({ collectionAddress, ...props }) => {\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\n  const { t } = useTranslation()\n\n  useEffect(() => {\n    const fetchLowestPrice = async () => {\n      const lowestCollectionPrice = await getLowestPriceInCollection(collectionAddress)\n      setLowestPrice(lowestCollectionPrice)\n    }\n\n    fetchLowestPrice()\n  }, [collectionAddress, setLowestPrice])\n\n  const formattedLowestPrice =\n    lowestPrice === null\n      ? null\n      : lowestPrice.toLocaleString(undefined, {\n          minimumFractionDigits: 3,\n          maximumFractionDigits: 3,\n        })\n\n  return <StatBoxItem title={t('Lowest (%symbol%)', { symbol: 'BNB' })} stat={formattedLowestPrice} {...props} />\n}\n\nexport default LowestPriceStatBoxItem\n","import React from 'react'\nimport { useLocation, useParams } from 'react-router'\nimport { Text } from '@pancakeswap/uikit'\nimport { Collection } from 'state/nftMarket/types'\nimport { formatNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport Container from 'components/Layout/Container'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport MarketPageTitle from '../components/MarketPageTitle'\nimport StatBox, { StatBoxItem } from '../components/StatBox'\nimport BannerHeader from '../components/BannerHeader'\nimport AvatarImage from '../components/BannerHeader/AvatarImage'\nimport BaseSubMenu from '../components/BaseSubMenu'\nimport { nftsBaseUrl } from '../constants'\nimport TopBar from './TopBar'\nimport LowestPriceStatBoxItem from './LowestPriceStatBoxItem'\n\ninterface HeaderProps {\n  collection: Collection\n}\n\nconst Header: React.FC<HeaderProps> = ({ collection }) => {\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\n  const { totalSupply, numberTokensListed, totalVolumeBNB, banner, avatar } = collection\n  const { t } = useTranslation()\n  const { pathname, hash } = useLocation()\n\n  const volume = totalVolumeBNB\n    ? parseFloat(totalVolumeBNB).toLocaleString(undefined, {\n        minimumFractionDigits: 3,\n        maximumFractionDigits: 3,\n      })\n    : '0'\n\n  const itemsConfig = [\n    {\n      label: t('Items'),\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#items`,\n    },\n    {\n      label: t('Traits'),\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#traits`,\n    },\n    {\n      label: t('Activity'),\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#activity`,\n    },\n  ]\n\n  return (\n    <>\n      <MarketPageHeader>\n        <TopBar />\n        <BannerHeader bannerImage={banner.large} avatar={<AvatarImage src={avatar} />} />\n        <MarketPageTitle\n          title={collection.name}\n          description={collection.description ? <Text color=\"textSubtle\">{t(collection.description)}</Text> : null}\n        >\n          <StatBox>\n            <StatBoxItem title={t('Items')} stat={formatNumber(Number(totalSupply), 0, 0)} />\n            <StatBoxItem\n              title={t('Items listed')}\n              stat={numberTokensListed ? formatNumber(Number(numberTokensListed), 0, 0) : '0'}\n            />\n            <LowestPriceStatBoxItem collectionAddress={collection.address} />\n            <StatBoxItem title={t('Vol. (%symbol%)', { symbol: 'BNB' })} stat={volume} />\n          </StatBox>\n        </MarketPageTitle>\n      </MarketPageHeader>\n      <Container>\n        <BaseSubMenu items={itemsConfig} activeItem={`${pathname}${hash || '#items'}`} mt=\"24px\" mb=\"8px\" />\n      </Container>\n    </>\n  )\n}\n\nexport default Header\n","import { useEffect, useState } from 'react'\nimport { getNftsMarketData } from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\nexport interface LowestNftPrice {\n  isFetching: boolean\n  lowestPrice: number\n}\n\nconst getBunnyIdFromNft = (nft: NftToken): string => {\n  const bunnyId = nft.attributes?.find((attr) => attr.traitType === 'bunnyId')?.value\n  return bunnyId ? bunnyId.toString() : null\n}\n\nexport const useGetLowestPriceFromBunnyId = (bunnyId: string): LowestNftPrice => {\n  const [isFetching, setIsFetching] = useState<boolean>(false)\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\n\n  useEffect(() => {\n    const fetchLowestPrice = async () => {\n      try {\n        setIsFetching(true)\n        const response = await getNftsMarketData({ otherId: bunnyId, isTradable: true }, 1, 'currentAskPrice', 'asc')\n\n        if (response.length > 0) {\n          const [tokenMarketData] = response\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\n        }\n      } finally {\n        setIsFetching(false)\n      }\n    }\n\n    if (bunnyId) {\n      fetchLowestPrice()\n    }\n  }, [bunnyId])\n\n  return { isFetching, lowestPrice }\n}\n\nexport const useGetLowestPriceFromNft = (nft: NftToken): LowestNftPrice => {\n  const [isFetching, setIsFetching] = useState<boolean>(false)\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\n  const isPancakeBunny = nft.collectionAddress?.toLowerCase() === pancakeBunniesAddress.toLowerCase()\n\n  useEffect(() => {\n    const fetchLowestPrice = async () => {\n      const bunnyIdAttr = getBunnyIdFromNft(nft)\n      try {\n        setIsFetching(true)\n        const response = await getNftsMarketData(\n          { otherId: bunnyIdAttr, isTradable: true },\n          1,\n          'currentAskPrice',\n          'asc',\n        )\n\n        if (response.length > 0) {\n          const [tokenMarketData] = response\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\n        }\n      } finally {\n        setIsFetching(false)\n      }\n    }\n\n    if (isPancakeBunny && nft) {\n      fetchLowestPrice()\n    }\n  }, [isPancakeBunny, nft])\n\n  return { isFetching, lowestPrice }\n}\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","import React, { useState } from 'react'\nimport {\n  CardProps,\n  CardHeader,\n  Card,\n  Flex,\n  Heading,\n  IconButton,\n  ChevronUpIcon,\n  ChevronDownIcon,\n} from '@pancakeswap/uikit'\n\ninterface CollapsibleCardProps extends CardProps {\n  initialOpenState?: boolean\n  title: string\n}\n\nconst CollapsibleCard: React.FC<CollapsibleCardProps> = ({ initialOpenState = true, title, children, ...props }) => {\n  const [isOpen, setIsOpen] = useState(initialOpenState)\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  return (\n    <Card {...props}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Heading as=\"h3\">{title}</Heading>\n          <IconButton variant=\"text\" scale=\"sm\" onClick={toggleOpen}>\n            {isOpen ? <ChevronUpIcon width=\"24px\" /> : <ChevronDownIcon width=\"24px\" />}\n          </IconButton>\n        </Flex>\n      </CardHeader>\n      {isOpen && children}\n    </Card>\n  )\n}\n\nexport default CollapsibleCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Image, Text } from '@pancakeswap/uikit'\n\nexport const StyledSortButton = styled.button`\n  border: none;\n  cursor: pointer;\n  background: none;\n  color: ${({ theme }) => theme.colors.secondary};\n  font-weight: bold;\n`\n\nexport const TableWrapper = styled.div`\n  -webkit-overflow-scrolling: touch;\n  min-width: 320px;\n  overflow-x: auto;\n`\n\nexport const NftImage = styled(Image)`\n  flex: none;\n  & > img {\n    border-radius: 8px;\n  }\n`\n\nexport const ClickableRow = styled.tr`\n  cursor: pointer;\n\n  &:hover {\n    td {\n      opacity: 0.65;\n    }\n  }\n`\n\nexport const NftName: React.FC<{ thumbnailSrc: string; name: string }> = ({ thumbnailSrc, name }) => (\n  <Flex alignItems=\"center\">\n    <NftImage src={thumbnailSrc} width={48} height={48} mr=\"8px\" />\n    <Text>{name}</Text>\n  </Flex>\n)\n","import React, { useEffect, useMemo, useState } from 'react'\nimport { Skeleton, Table, Td, Th, Flex, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\nimport { useHistory } from 'react-router'\nimport times from 'lodash/times'\nimport sum from 'lodash/sum'\nimport { formatNumber } from 'utils/formatBalance'\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\nimport { ApiResponseCollectionTokens } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport CollapsibleCard from 'components/CollapsibleCard'\nimport { useGetLowestPriceFromBunnyId } from '../../hooks/useGetLowestPrice'\nimport { BNBAmountLabel } from '../../components/CollectibleCard/styles'\nimport { sortBunniesByRarityBuilder } from './utils'\nimport { nftsBaseUrl } from '../../constants'\nimport { SortType } from '../../types'\nimport { ClickableRow, NftName, StyledSortButton, TableWrapper } from './styles'\n\ninterface PancakeBunniesTraitsProps {\n  collectionAddress: string\n}\n\nconst LowestPriceCell: React.FC<{ bunnyId: string }> = ({ bunnyId }) => {\n  const { isFetching, lowestPrice } = useGetLowestPriceFromBunnyId(bunnyId)\n\n  if (isFetching) {\n    return (\n      <Flex justifyContent=\"flex-end\" width=\"100px\">\n        <Skeleton height=\"24px\" width=\"48px\" />\n      </Flex>\n    )\n  }\n\n  if (!lowestPrice) {\n    return null\n  }\n\n  return <BNBAmountLabel justifyContent=\"flex-end\" amount={lowestPrice} width=\"100px\" />\n}\n\nconst PancakeBunniesTraits: React.FC<PancakeBunniesTraitsProps> = ({ collectionAddress }) => {\n  const [tokenApiResponse, setTokenApiResponse] = useState<ApiResponseCollectionTokens>(null)\n  const [raritySort, setRaritySort] = useState<SortType>('asc')\n  const { t } = useTranslation()\n  const { push } = useHistory()\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      const apiResponse = await getNftsFromCollectionApi(collectionAddress)\n      setTokenApiResponse(apiResponse)\n    }\n\n    fetchTokens()\n  }, [collectionAddress, setTokenApiResponse])\n\n  const totalMinted = tokenApiResponse ? sum(Object.values(tokenApiResponse.attributesDistribution)) : 0\n\n  const sortedBunnieKeys = useMemo(() => {\n    if (!tokenApiResponse) return []\n\n    return Object.keys(tokenApiResponse.data).sort(sortBunniesByRarityBuilder({ raritySort, data: tokenApiResponse }))\n  }, [raritySort, tokenApiResponse])\n\n  const toggleRaritySort = () => {\n    setRaritySort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\n  }\n\n  return (\n    <>\n      {tokenApiResponse ? (\n        <CollapsibleCard title={t('Bunny Id')}>\n          <TableWrapper>\n            <Table>\n              <thead>\n                <tr>\n                  <Th textAlign=\"left\">{t('Name')}</Th>\n                  <Th>{t('Count')}</Th>\n                  <Th>\n                    <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\n                      <Flex alignItems=\"center\">\n                        {t('Rarity')}\n                        {raritySort === 'asc' ? <ArrowUpIcon color=\"secondary\" /> : <ArrowDownIcon color=\"secondary\" />}\n                      </Flex>\n                    </StyledSortButton>\n                  </Th>\n                  <Th textAlign=\"right\">{t('Lowest')}</Th>\n                </tr>\n              </thead>\n              <tbody>\n                {sortedBunnieKeys.map((bunnyId) => {\n                  const nft = tokenApiResponse.data[bunnyId]\n                  if (!nft) {\n                    // Some bunnies don't exist on testnet\n                    return null\n                  }\n                  const count: number = tokenApiResponse.attributesDistribution[bunnyId] ?? 0\n                  const percentage = (count / totalMinted) * 100\n                  const handleClick = () => {\n                    push(`${nftsBaseUrl}/collections/${collectionAddress}/${bunnyId}`)\n                  }\n\n                  return (\n                    <ClickableRow key={bunnyId} onClick={handleClick} title={t('Click to view NFT')}>\n                      <Td>\n                        <NftName thumbnailSrc={nft.image.thumbnail} name={nft.name} />\n                      </Td>\n                      <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\n                      <Td textAlign=\"center\">{`${formatNumber(percentage, 0, 2)}%`}</Td>\n                      <Td textAlign=\"right\" width=\"100px\">\n                        <LowestPriceCell bunnyId={bunnyId} />\n                      </Td>\n                    </ClickableRow>\n                  )\n                })}\n              </tbody>\n            </Table>\n          </TableWrapper>\n        </CollapsibleCard>\n      ) : (\n        <CollapsibleCard title={t('Loading...')}>\n          <Table>\n            <thead>\n              <tr>\n                <Th textAlign=\"left\">{t('Name')}</Th>\n                <Th>{t('Count')}</Th>\n                <Th>{t('Rarity')}</Th>\n                <Th>{t('Lowest')}</Th>\n              </tr>\n            </thead>\n            <tbody>\n              {times(19).map((bunnyCnt) => (\n                <tr key={bunnyCnt}>\n                  <Td>\n                    <Flex alignItems=\"center\">\n                      <Skeleton height=\"48px\" width=\"48px\" mr=\"8px\" />\n                      <Skeleton width=\"100px\" />\n                    </Flex>\n                  </Td>\n                  <Td>\n                    <Skeleton />\n                  </Td>\n                  <Td>\n                    <Skeleton />\n                  </Td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </CollapsibleCard>\n      )}\n    </>\n  )\n}\n\nexport default PancakeBunniesTraits\n","import { ApiResponseCollectionTokens } from 'state/nftMarket/types'\n\ntype sortBuilder = {\n  data: ApiResponseCollectionTokens\n  raritySort: string\n}\n\nexport const sortBunniesByRarityBuilder =\n  ({ raritySort, data }: sortBuilder) =>\n  (bunnyIdA, bunnyIdB) => {\n    const bunnyCountA = data.attributesDistribution[bunnyIdA] ?? 0\n    const bunnyCountB = data.attributesDistribution[bunnyIdB] ?? 0\n\n    return raritySort === 'asc' ? bunnyCountA - bunnyCountB : bunnyCountB - bunnyCountA\n  }\n","import React, { useState } from 'react'\nimport times from 'lodash/times'\nimport capitalize from 'lodash/capitalize'\nimport sum from 'lodash/sum'\nimport orderBy from 'lodash/orderBy'\nimport { ArrowDownIcon, ArrowUpIcon, Flex, Skeleton, Table, Td, Th } from '@pancakeswap/uikit'\nimport { formatNumber } from 'utils/formatBalance'\nimport CollapsibleCard from 'components/CollapsibleCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { SortType } from '../../types'\nimport { StyledSortButton, TableWrapper } from './styles'\nimport useGetCollectionDistribution from '../../hooks/useGetCollectionDistribution'\n\ninterface CollectionTraitsProps {\n  collectionAddress: string\n}\n\nconst CollectionTraits: React.FC<CollectionTraitsProps> = ({ collectionAddress }) => {\n  const { data, isFetching } = useGetCollectionDistribution(collectionAddress)\n  const [raritySort, setRaritySort] = useState<Record<string, SortType>>({})\n  const { t } = useTranslation()\n\n  if (isFetching) {\n    return (\n      <CollapsibleCard title={t('Loading...')}>\n        <Table>\n          <thead>\n            <tr>\n              <Th textAlign=\"left\">{t('Name')}</Th>\n              <Th width=\"100px\">{t('Count')}</Th>\n              <Th width=\"160px\">{t('Rarity')}</Th>\n            </tr>\n          </thead>\n          <tbody>\n            {times(19).map((bunnyCnt) => (\n              <tr key={bunnyCnt}>\n                <Td>\n                  <Skeleton width=\"100px\" />\n                </Td>\n                <Td>\n                  <Skeleton />\n                </Td>\n                <Td>\n                  <Skeleton />\n                </Td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </CollapsibleCard>\n    )\n  }\n\n  return (\n    <>\n      {data &&\n        Object.keys(data).map((traitType, index) => {\n          const total = sum(Object.values(data[traitType]))\n\n          // Parse the distribution values into an array to make it easier to sort\n          const traitValues: { value: string; count: number; rarity: number }[] = Object.keys(data[traitType]).reduce(\n            (accum, traitValue) => {\n              const count = data[traitType][traitValue]\n              const rarity = (count / total) * 100\n\n              return [...accum, { value: traitValue, count, rarity }]\n            },\n            [],\n          )\n          const sortType = raritySort[traitType] || 'desc'\n\n          const toggleRaritySort = () => {\n            setRaritySort((prevRaritySort) => {\n              if (!prevRaritySort[traitType]) {\n                return {\n                  ...prevRaritySort,\n                  [traitType]: 'asc',\n                }\n              }\n\n              return {\n                ...prevRaritySort,\n                [traitType]: prevRaritySort[traitType] === 'asc' ? 'desc' : 'asc',\n              }\n            })\n          }\n\n          return (\n            <CollapsibleCard key={traitType} title={capitalize(traitType)} initialOpenState={index <= 1} mb=\"32px\">\n              <TableWrapper>\n                <Table>\n                  <thead>\n                    <tr>\n                      <Th textAlign=\"left\">{t('Name')}</Th>\n                      <Th width=\"100px\">{t('Count')}</Th>\n                      <Th width=\"160px\">\n                        <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\n                          <Flex alignItems=\"center\">\n                            {t('Rarity')}\n                            {raritySort[traitType] === 'asc' ? (\n                              <ArrowUpIcon color=\"secondary\" />\n                            ) : (\n                              <ArrowDownIcon color=\"secondary\" />\n                            )}\n                          </Flex>\n                        </StyledSortButton>\n                      </Th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {orderBy(traitValues, 'rarity', sortType).map(({ value, count, rarity }) => {\n                      return (\n                        <tr key={value}>\n                          <Td>{capitalize(value)}</Td>\n                          <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\n                          <Td textAlign=\"center\">{`${formatNumber(rarity, 0, 2)}%`}</Td>\n                        </tr>\n                      )\n                    })}\n                  </tbody>\n                </Table>\n              </TableWrapper>\n            </CollapsibleCard>\n          )\n        })}\n    </>\n  )\n}\n\nexport default CollectionTraits\n","import React, { useEffect } from 'react'\nimport { useParams } from 'react-router'\nimport Container from 'components/Layout/Container'\nimport { useAppDispatch } from 'state'\nimport { useGetCollection } from 'state/nftMarket/hooks'\nimport { fetchCollection } from 'state/nftMarket/reducer'\nimport Header from '../Header'\nimport PancakeBunniesTraits from './PancakeBunniesTraits'\nimport { pancakeBunniesAddress } from '../../constants'\nimport CollectionTraits from './CollectionTraits'\n\nconst Traits = () => {\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\n  const dispatch = useAppDispatch()\n  const collection = useGetCollection(collectionAddress)\n\n  useEffect(() => {\n    if (collectionAddress) {\n      dispatch(fetchCollection(collectionAddress))\n    }\n  }, [collectionAddress, dispatch])\n\n  return (\n    <>\n      <Header collection={collection} />\n      <Container py=\"40px\">\n        {collectionAddress === pancakeBunniesAddress ? (\n          <PancakeBunniesTraits collectionAddress={collectionAddress} />\n        ) : (\n          <CollectionTraits collectionAddress={collectionAddress} />\n        )}\n      </Container>\n    </>\n  )\n}\n\nexport default Traits\n"],"sourceRoot":""}