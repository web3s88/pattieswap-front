{"version":3,"sources":["views/Nft/market/components/StatBox.tsx","components/AddressInputSelect/index.tsx","views/Nft/market/components/MarketPageHeader.tsx","views/Nft/market/components/BannerHeader/AvatarImage.tsx","views/Nft/market/components/SearchBar.tsx","views/Nft/market/components/MarketPageTitle.tsx","views/Nft/market/components/Activity/NoNftsImage.tsx","views/Nft/market/components/BaseSubMenu.tsx","views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx","views/Nft/market/components/PaginationButtons.tsx","views/Nft/market/components/ProfileCell.tsx","views/Nft/market/Collection/TopBar.tsx","views/Nft/market/Collection/LowestPriceStatBoxItem.tsx","views/Nft/market/Collection/Header.tsx","components/TableLoader.tsx","views/Nft/market/components/Activity/ActivityEventText.tsx","views/Nft/market/components/Activity/MobileModal.tsx","views/Nft/market/components/Activity/ActivityPrice.tsx","views/Nft/market/components/Activity/ActivityRow.tsx","views/Nft/market/ActivityHistory/utils/sortActivity.tsx","views/Nft/market/ActivityHistory/ClearAllButton.tsx","views/Nft/market/ActivityHistory/ActivityFilter.tsx","views/Nft/market/ActivityHistory/ActivityFilters.tsx","views/Nft/market/ActivityHistory/ActivityHistory.tsx","views/Nft/market/Collection/Activity/index.tsx"],"names":["StatBoxItem","title","stat","props","fontSize","color","textAlign","height","width","mx","fontWeight","StatBox","styled","Flex","theme","colors","invertedContrast","cardBorder","radii","card","ResultStatus","SubMenu","div","input","inputSecondary","default","isOpen","AddressLink","Text","initialState","isFetching","resultFound","NOT_VALID","value","defaultValidAddressHandler","Promise","resolve","AddressInputSelect","onValidAddress","onAddressClick","useState","state","setState","t","useTranslation","useEffect","isAddress","a","prevState","hasResults","FOUND","NOT_FOUND","validAddressHandler","position","placeholder","subject","toLowerCase","onChange","evt","newValue","target","style","zIndex","paddingRight","top","right","onClick","px","MarketPageHeader","background","useTheme","isDark","AvatarImage","attrs","alt","src","borderColor","SearchBar","history","useHistory","push","nftsBaseUrl","MarketPageTitle","description","children","gridGap","alignItems","gridTemplateColumns","as","scale","mb","NoNftsImage","BaseSubMenu","SubMenuItems","StyledBannerImage","mediaQueries","sm","md","BannerHeader","bannerImage","bannerAlt","avatar","flexDirection","pb","BannerImage","bottom","left","PageButtons","Arrow","primary","Avatar","img","StyledFlex","ProfileCell","accountAddress","useGetProfileAvatar","username","profileNft","nft","usernameFetchStatus","avatarFetchStatus","profileName","sellerProfilePicComponent","mr","ProfileAvatarFetchStatus","FETCHED","image","thumbnail","to","display","lineHeight","truncateHash","BackLink","RouterLink","TopBar","justifyContent","LowestPriceStatBoxItem","collectionAddress","lowestPrice","setLowestPrice","getLowestPriceInCollection","lowestCollectionPrice","fetchLowestPrice","formattedLowestPrice","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","symbol","Header","collection","useParams","totalSupply","numberTokensListed","totalVolumeBNB","banner","useLocation","pathname","hash","volume","parseFloat","itemsConfig","label","href","large","name","formatNumber","Number","address","Container","items","activeItem","mt","GridItem","LoadingRow","useMatchBreakpoints","isXs","isSm","TableLoader","ActivityEventText","marketEvent","events","MarketEvent","NEW","text","CANCEL","MODIFY","BUY","SELL","RoundedImage","Image","MobileModal","activity","bnbBusdPrice","localeTimestamp","onDismiss","isUserActivity","chainId","useActiveWeb3React","priceAsFloat","price","priceInUsd","multiplyPriceByAmount","headerBackground","gradients","cardHeader","maxWidth","collectionName","bold","p","otherParty","seller","buyer","pt","Link","external","getBscScanLink","tx","ActivityPrice","justifySelf","ActivityRow","isNftActivity","timestampAsMs","timestamp","Date","year","month","day","hour","minute","useModal","onPresentMobileModal","isPBCollection","pancakeBunniesAddress","tokenId","attributes","find","attribute","traitType","event","stopPropagation","sortActivity","askOrders","transactions","allActivity","map","askOrderHistory","orderType","AskOrderType","getAskOrderEvent","askPrice","id","transactionHistory","length","sort","activityItem1","activityItem2","timestamp1","ethers","BigNumber","from","sub","toNumber","ClearAllButton","dispatch","useAppDispatch","variant","removeAllActivityFilters","TriggerButton","Button","hasItem","CloseButton","IconButton","eventName","eventType","ActivityFilter","nftActivityFilters","useGetNftActivityFilters","isEventSelected","typeFilters","some","nftActivityFilter","addActivityTypeFilters","field","removeActivityTypeFilters","ScrollableFlexContainer","ActivityFilters","textTransform","isEmpty","ActivityHistory","currentPage","maxPage","paginationData","setPaginationData","activitiesSlice","setActivitiesSlice","nftMetadata","setNftMetadata","isLoading","setIsLoading","isInitialized","setIsInitialized","queryPage","setQueryPage","useLastUpdated","lastUpdated","refresh","setLastUpdated","useBNBBusdPrice","nftActivityFiltersString","JSON","stringify","fetchCollectionActivity","nftActivityFiltersParsed","parse","getCollectionActivity","collectionActivity","Math","ceil","console","error","fetchActivityNftMetadata","activityNftTokenIds","uniqBy","getNftsFromDifferentCollectionsApi","nfts","slice","py","gap","padding","disabled","nftMeta","metaNft","borderTop","page","Activity","useGetCollection"],"mappings":"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","file":"static/js/9.5432c24f.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\n\nexport interface StatBoxItemProps extends BoxProps {\n  title: string\n  stat: string\n}\n\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\n  <Box {...props}>\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\n      {title}\n    </Text>\n    {stat === null ? (\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\n    ) : (\n      <Text fontWeight=\"600\" textAlign=\"center\">\n        {stat}\n      </Text>\n    )}\n  </Box>\n)\n\nconst StatBox = styled(Flex)`\n  align-items: center;\n  background: ${({ theme }) => theme.colors.invertedContrast};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.card};\n  justify-content: space-around;\n  padding: 8px;\n  width: 100%;\n`\n\nexport default StatBox\n","import React, { ChangeEvent, useState, useEffect } from 'react'\nimport { Box, BoxProps, Text, Input } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { isAddress } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport CircleLoader from 'components/Loader/CircleLoader'\n\nenum ResultStatus {\n  NOT_VALID,\n  FOUND,\n  NOT_FOUND,\n}\n\ninterface AddressInputSelectProps extends BoxProps {\n  onValidAddress?: (value: string) => Promise<boolean>\n  onAddressClick: (value: string) => void\n}\n\nconst SubMenu = styled.div<{ isOpen: boolean }>`\n  align-items: center;\n  background: ${({ theme }) => theme.colors.input};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 0 0 ${({ theme }) => theme.radii.default} ${({ theme }) => theme.radii.default};\n  left: 0;\n  padding-bottom: 8px;\n  padding-top: 16px;\n  position: absolute;\n  top: calc(100% - 12px);\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  width: 100%;\n  z-index: 15;\n\n  ${({ isOpen }) =>\n    isOpen &&\n    `\n    height: auto;\n    opacity: 1;\n    transform: scaleY(1);\n  `}\n`\n\nconst AddressLink = styled(Text)`\n  cursor: pointer;\n  overflow-wrap: break-word;\n  font-weight: bold;\n  padding-left: 16px;\n  padding-right: 16px;\n`\n\nconst initialState = {\n  isFetching: false,\n  resultFound: ResultStatus.NOT_VALID,\n  value: '',\n}\n\nconst defaultValidAddressHandler = () => Promise.resolve(true)\n\nconst AddressInputSelect: React.FC<AddressInputSelectProps> = ({\n  onValidAddress = defaultValidAddressHandler,\n  onAddressClick,\n  ...props\n}) => {\n  const [state, setState] = useState(initialState)\n  const { t } = useTranslation()\n  const { isFetching, resultFound, value } = state\n\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    const { value: newValue } = evt.target\n    setState((prevState) => ({\n      ...prevState,\n      value: newValue,\n    }))\n  }\n\n  const handleClick = () => {\n    setState(initialState)\n    onAddressClick(state.value)\n  }\n\n  // When we have a valid address fetch the data\n  useEffect(() => {\n    const isValidAddress = isAddress(value) !== false\n\n    const validAddressHandler = async () => {\n      try {\n        setState((prevState) => ({ ...prevState, isFetching: true }))\n        const hasResults = await onValidAddress(value)\n\n        setState((prevState) => ({\n          ...prevState,\n          isFetching: false,\n          resultFound: hasResults ? ResultStatus.FOUND : ResultStatus.NOT_FOUND,\n        }))\n      } catch {\n        setState((prevState) => ({ ...prevState, isFetching: false }))\n      }\n    }\n\n    if (isValidAddress) {\n      validAddressHandler()\n    } else {\n      setState((prevState) => ({ ...prevState, resultFound: ResultStatus.NOT_VALID }))\n    }\n  }, [value, onValidAddress, setState])\n\n  return (\n    <Box position=\"relative\" {...props}>\n      <Input\n        placeholder={t('Search %subject%', { subject: t('Address').toLowerCase() })}\n        value={state.value}\n        onChange={handleChange}\n        style={{ position: 'relative', zIndex: 16, paddingRight: '40px' }}\n      />\n      {isFetching && (\n        <Box position=\"absolute\" top=\"12px\" right=\"16px\" style={{ zIndex: 17 }}>\n          <CircleLoader />\n        </Box>\n      )}\n      <SubMenu isOpen={resultFound !== ResultStatus.NOT_VALID}>\n        {resultFound === ResultStatus.FOUND ? (\n          <AddressLink onClick={handleClick}>{state.value}</AddressLink>\n        ) : (\n          <Text px=\"16px\" fontWeight=\"bold\">\n            {t('No results found.')}\n          </Text>\n        )}\n      </SubMenu>\n    </Box>\n  )\n}\n\nexport default AddressInputSelect\n","import React from 'react'\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\nimport useTheme from 'hooks/useTheme'\n\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\n  const { theme } = useTheme()\n  const background = theme.isDark\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\n  return <PageHeader background={background} {...props} />\n}\n\nexport default MarketPageHeader\n","import styled from 'styled-components'\n\ninterface AvatarImageProps {\n  src: string\n  borderColor?: string\n  alt?: string\n}\n\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\n  alt,\n}))<AvatarImageProps>`\n  background: url('${({ src }) => src}');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default AvatarImage\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport AddressInputSelect from 'components/AddressInputSelect'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\n\nconst SearchBar: React.FC = (props) => {\n  const history = useHistory()\n\n  const handleAddressClick = (value: string) => {\n    history.push(`${nftsBaseUrl}/profile/${value}`)\n  }\n\n  return <AddressInputSelect onAddressClick={handleAddressClick} {...props} />\n}\n\nexport default SearchBar\n","import React, { ReactNode } from 'react'\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\n\ninterface MarketPageTitleProps extends GridProps {\n  title: string\n  description?: ReactNode\n}\n\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\n    <Box>\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\n        {title}\n      </Heading>\n      {description}\n    </Box>\n    <Box>{children}</Box>\n  </Grid>\n)\n\nexport default MarketPageTitle\n","import styled from 'styled-components'\n\nconst NoNftsImage = styled.div`\n  background: url('/images/nfts/no-profile-md.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default NoNftsImage\n","import { SubMenuItems } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseSubMenu = styled(SubMenuItems)`\n  background-color: transparent;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n`\n\nexport default BaseSubMenu\n","import styled from 'styled-components'\n\ninterface StyledBannerImageProps {\n  src: string\n  alt?: string\n}\n\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\n  alt,\n}))<StyledBannerImageProps>`\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\n  background-image: url('${({ src }) => src}');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 100%;\n  border-radius: 32px;\n  height: 123px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 192px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    height: 256px;\n  }\n`\n\nexport default StyledBannerImage\n","import React, { ReactNode } from 'react'\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\nimport BannerImage from './BannerImage'\n\ninterface BannerHeaderProps extends FlexProps {\n  bannerImage: string\n  bannerAlt?: string\n  avatar?: ReactNode\n}\n\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\n  return (\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\n      <Box position=\"relative\" pb=\"56px\">\n        <BannerImage src={bannerImage} alt={bannerAlt} />\n        <Box position=\"absolute\" bottom={0} left={-4}>\n          <Flex alignItems=\"flex-end\">\n            {avatar}\n            {children}\n          </Flex>\n        </Box>\n      </Box>\n    </Flex>\n  )\n}\n\nexport default BannerHeader\n","import styled from 'styled-components'\n\nexport const PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`\n\nexport const Arrow = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, BunnyPlaceholderIcon, Skeleton, Text } from '@pancakeswap/uikit'\nimport truncateHash from 'utils/truncateHash'\nimport { useGetProfileAvatar } from 'state/profile/hooks'\nimport { ProfileAvatarFetchStatus } from 'state/types'\nimport { Link } from 'react-router-dom'\nimport { nftsBaseUrl } from '../constants'\n\nconst Avatar = styled.img`\n  margin-right: 4px;\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-right: 12px;\n  }\n`\n\nconst StyledFlex = styled(Flex)`\n  align-items: center;\n  transition: opacity 200ms ease-in;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nconst ProfileCell: React.FC<{ accountAddress: string }> = ({ accountAddress }) => {\n  const { username, nft: profileNft, usernameFetchStatus, avatarFetchStatus } = useGetProfileAvatar(accountAddress)\n  const profileName = username || '-'\n\n  let sellerProfilePicComponent = <Skeleton width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\n  if (avatarFetchStatus === ProfileAvatarFetchStatus.FETCHED) {\n    if (profileNft?.image?.thumbnail) {\n      sellerProfilePicComponent = <Avatar src={profileNft?.image?.thumbnail} />\n    } else {\n      sellerProfilePicComponent = <BunnyPlaceholderIcon width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\n    }\n  }\n\n  return (\n    <Link to={`${nftsBaseUrl}/profile/${accountAddress}`}>\n      <StyledFlex>\n        {sellerProfilePicComponent}\n        <Box display=\"inline\">\n          <Text lineHeight=\"1.25\">{truncateHash(accountAddress)}</Text>\n          {usernameFetchStatus !== ProfileAvatarFetchStatus.FETCHED ? (\n            <Skeleton />\n          ) : (\n            <Text lineHeight=\"1.25\">{profileName}</Text>\n          )}\n        </Box>\n      </StyledFlex>\n    </Link>\n  )\n}\n\nexport default ProfileCell\n","import React from 'react'\nimport { Box, ChevronLeftIcon, Flex } from '@pancakeswap/uikit'\nimport { Link as RouterLink } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport SearchBar from '../components/SearchBar'\n\nconst BackLink = styled(RouterLink)`\n  align-items: center;\n  color: ${({ theme }) => theme.colors.primary};\n  display: inline-flex;\n  font-weight: 600;\n`\n\nconst TopBar: React.FC = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n      <BackLink to={`${nftsBaseUrl}/collections`}>\n        <ChevronLeftIcon color=\"primary\" width=\"24px\" />\n        {t('All Collections')}\n      </BackLink>\n      <Box>\n        <SearchBar />\n      </Box>\n    </Flex>\n  )\n}\n\nexport default TopBar\n","import React, { useEffect, useState } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { getLowestPriceInCollection } from 'state/nftMarket/helpers'\nimport { StatBoxItem, StatBoxItemProps } from '../components/StatBox'\n\ninterface LowestPriceStatBoxItemProps extends Omit<StatBoxItemProps, 'title' | 'stat'> {\n  collectionAddress: string\n}\n\nconst LowestPriceStatBoxItem: React.FC<LowestPriceStatBoxItemProps> = ({ collectionAddress, ...props }) => {\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\n  const { t } = useTranslation()\n\n  useEffect(() => {\n    const fetchLowestPrice = async () => {\n      const lowestCollectionPrice = await getLowestPriceInCollection(collectionAddress)\n      setLowestPrice(lowestCollectionPrice)\n    }\n\n    fetchLowestPrice()\n  }, [collectionAddress, setLowestPrice])\n\n  const formattedLowestPrice =\n    lowestPrice === null\n      ? null\n      : lowestPrice.toLocaleString(undefined, {\n          minimumFractionDigits: 3,\n          maximumFractionDigits: 3,\n        })\n\n  return <StatBoxItem title={t('Lowest (%symbol%)', { symbol: 'BNB' })} stat={formattedLowestPrice} {...props} />\n}\n\nexport default LowestPriceStatBoxItem\n","import React from 'react'\nimport { useLocation, useParams } from 'react-router'\nimport { Text } from '@pancakeswap/uikit'\nimport { Collection } from 'state/nftMarket/types'\nimport { formatNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport Container from 'components/Layout/Container'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport MarketPageTitle from '../components/MarketPageTitle'\nimport StatBox, { StatBoxItem } from '../components/StatBox'\nimport BannerHeader from '../components/BannerHeader'\nimport AvatarImage from '../components/BannerHeader/AvatarImage'\nimport BaseSubMenu from '../components/BaseSubMenu'\nimport { nftsBaseUrl } from '../constants'\nimport TopBar from './TopBar'\nimport LowestPriceStatBoxItem from './LowestPriceStatBoxItem'\n\ninterface HeaderProps {\n  collection: Collection\n}\n\nconst Header: React.FC<HeaderProps> = ({ collection }) => {\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\n  const { totalSupply, numberTokensListed, totalVolumeBNB, banner, avatar } = collection\n  const { t } = useTranslation()\n  const { pathname, hash } = useLocation()\n\n  const volume = totalVolumeBNB\n    ? parseFloat(totalVolumeBNB).toLocaleString(undefined, {\n        minimumFractionDigits: 3,\n        maximumFractionDigits: 3,\n      })\n    : '0'\n\n  const itemsConfig = [\n    {\n      label: t('Items'),\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#items`,\n    },\n    {\n      label: t('Traits'),\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#traits`,\n    },\n    {\n      label: t('Activity'),\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#activity`,\n    },\n  ]\n\n  return (\n    <>\n      <MarketPageHeader>\n        <TopBar />\n        <BannerHeader bannerImage={banner.large} avatar={<AvatarImage src={avatar} />} />\n        <MarketPageTitle\n          title={collection.name}\n          description={collection.description ? <Text color=\"textSubtle\">{t(collection.description)}</Text> : null}\n        >\n          <StatBox>\n            <StatBoxItem title={t('Items')} stat={formatNumber(Number(totalSupply), 0, 0)} />\n            <StatBoxItem\n              title={t('Items listed')}\n              stat={numberTokensListed ? formatNumber(Number(numberTokensListed), 0, 0) : '0'}\n            />\n            <LowestPriceStatBoxItem collectionAddress={collection.address} />\n            <StatBoxItem title={t('Vol. (%symbol%)', { symbol: 'BNB' })} stat={volume} />\n          </StatBox>\n        </MarketPageTitle>\n      </MarketPageHeader>\n      <Container>\n        <BaseSubMenu items={itemsConfig} activeItem={`${pathname}${hash || '#items'}`} mt=\"24px\" mb=\"8px\" />\n      </Container>\n    </>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Skeleton, Td, useMatchBreakpoints } from '@pancakeswap/uikit'\n\nconst GridItem = styled(Flex)`\n  align-items: center;\n`\n\nconst LoadingRow: React.FC = () => {\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  return (\n    <tr>\n      <Td>\n        <GridItem>\n          <Skeleton height={[162, null, 64]} width={[80, null, 200]} />\n        </GridItem>\n      </Td>\n      <Td>\n        <GridItem justifyContent=\"flex-end\">\n          <Skeleton height={[66, null, 24]} width={64} />\n        </GridItem>\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={42} width={64} />\n            </GridItem>\n          </Td>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={48} width={124} />\n            </GridItem>\n          </Td>\n        </>\n      )}\n      <Td>\n        <GridItem justifyContent=\"center\">\n          <Skeleton height={[36, null, 24]} width={[80, null, 120]} />\n        </GridItem>\n      </Td>\n    </tr>\n  )\n}\n\nconst TableLoader: React.FC = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nexport default TableLoader\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { MarketEvent } from '../../../../../state/nftMarket/types'\n\ninterface ActivityEventTextProps extends TextProps {\n  marketEvent: MarketEvent\n}\n\nconst ActivityEventText: React.FC<ActivityEventTextProps> = ({ marketEvent, ...props }) => {\n  const { t } = useTranslation()\n\n  const events = {\n    [MarketEvent.NEW]: {\n      text: t('Listed'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.CANCEL]: {\n      text: t('Delisted'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.MODIFY]: {\n      text: t('Modified'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.BUY]: {\n      text: t('Bought'),\n      color: 'success',\n    },\n    [MarketEvent.SELL]: {\n      text: t('Sold'),\n      color: 'failure',\n    },\n  }\n\n  return (\n    <Text {...props} color={events[marketEvent].color}>\n      {events[marketEvent].text}\n    </Text>\n  )\n}\n\nexport default ActivityEventText\n","import React from 'react'\nimport { InjectedModalProps, Modal, Flex, Text, Button, Image, Link, BinanceIcon } from '@pancakeswap/uikit'\nimport { Price } from 'sdk'\nimport useTheme from 'hooks/useTheme'\nimport styled from 'styled-components'\nimport { Activity, NftToken } from 'state/nftMarket/types'\nimport { LightGreyCard } from 'components/Card'\nimport { useTranslation } from 'contexts/Localization'\nimport truncateHash from 'utils/truncateHash'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils'\nimport ActivityEventText from './ActivityEventText'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\ninterface MobileModalProps extends InjectedModalProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n  localeTimestamp: string\n  isUserActivity?: boolean\n}\n\nconst MobileModal: React.FC<MobileModalProps> = ({\n  nft,\n  activity,\n  bnbBusdPrice,\n  localeTimestamp,\n  onDismiss,\n  isUserActivity = false,\n}) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const priceAsFloat = parseFloat(activity.price)\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, priceAsFloat)\n\n  return (\n    <Modal title={t('Transaction Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\n        <Flex alignItems=\"center\" mb=\"16px\" justifyContent=\"space-between\">\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n              {nft.collectionName}\n            </Text>\n            <Text bold>{nft.name}</Text>\n          </Flex>\n        </Flex>\n        <LightGreyCard p=\"16px\">\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\n            <ActivityEventText fontSize=\"14px\" marketEvent={activity.marketEvent} />\n            {priceAsFloat ? (\n              <Flex justifyContent=\"flex-end\" alignItems=\"center\">\n                <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n                <Text mr=\"4px\" bold>\n                  {priceAsFloat}\n                </Text>\n                <Text color=\"textSubtle\">\n                  {`(~$${priceInUsd.toLocaleString(undefined, {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2,\n                  })})`}\n                </Text>\n              </Flex>\n            ) : (\n              '-'\n            )}\n          </Flex>\n          {isUserActivity ? (\n            <Flex mb=\"24px\" justifyContent=\"space-between\">\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {t('From/To')}\n              </Text>\n              <Text>{activity.otherParty ? truncateHash(activity.otherParty) : '-'}</Text>\n            </Flex>\n          ) : (\n            <>\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">\n                  {t('From')}\n                </Text>\n                <Text>{activity.seller ? truncateHash(activity.seller) : '-'}</Text>\n              </Flex>\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">\n                  {t('To')}\n                </Text>\n                <Text>{activity.buyer ? truncateHash(activity.buyer) : '-'}</Text>\n              </Flex>\n            </>\n          )}\n          <Flex justifyContent=\"space-between\">\n            <Text fontSize=\"14px\" color=\"textSubtle\">\n              {t('Date')}\n            </Text>\n            <Text>{localeTimestamp}</Text>\n          </Flex>\n        </LightGreyCard>\n        <Flex flexDirection=\"column\" pt=\"16px\" alignItems=\"center\">\n          <Button as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            {t('View on BscScan')}\n          </Button>\n        </Flex>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default MobileModal\n","import React from 'react'\nimport { Flex, BinanceIcon, Text, Skeleton } from '@pancakeswap/uikit'\nimport { multiplyPriceByAmount } from 'utils/prices'\n\nconst ActivityPrice = ({ bnbBusdPrice, price }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, price)\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n      {price ? (\n        <>\n          <Flex justifySelf=\"flex-start\" alignItems=\"center\">\n            <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n            <Text maxWidth=\"80px\" bold>\n              {price.toLocaleString(undefined, {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 5,\n              })}\n            </Text>\n          </Flex>\n          {priceInUsd ? (\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`(~$${priceInUsd.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2,\n              })})`}\n            </Text>\n          ) : (\n            <Skeleton height=\"18px\" width=\"42px\" />\n          )}\n        </>\n      ) : (\n        '-'\n      )}\n    </Flex>\n  )\n}\n\nexport default ActivityPrice\n","import React from 'react'\nimport { Image, Flex, Text, Td, IconButton, Link, OpenNewIcon, useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { Activity, NftToken } from 'state/nftMarket/types'\nimport { Price } from 'sdk'\nimport styled from 'styled-components'\nimport { getBscScanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\nimport MobileModal from './MobileModal'\nimport ActivityPrice from './ActivityPrice'\nimport ActivityEventText from './ActivityEventText'\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../../constants'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\ninterface ActivityRowProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n  isUserActivity?: boolean\n  isNftActivity?: boolean\n}\n\nconst ActivityRow: React.FC<ActivityRowProps> = ({\n  activity,\n  bnbBusdPrice,\n  nft,\n  isUserActivity = false,\n  isNftActivity = false,\n}) => {\n  const { chainId } = useActiveWeb3React()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const priceAsFloat = parseFloat(activity.price)\n  const timestampAsMs = parseFloat(activity.timestamp) * 1000\n  const localeTimestamp = new Date(timestampAsMs).toLocaleString(undefined, {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n  })\n  const [onPresentMobileModal] = useModal(\n    <MobileModal\n      nft={nft}\n      activity={activity}\n      localeTimestamp={localeTimestamp}\n      bnbBusdPrice={bnbBusdPrice}\n      isUserActivity={isUserActivity}\n    />,\n  )\n  const isPBCollection = nft ? nft.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase() : false\n  const tokenId =\n    nft && isPBCollection\n      ? nft.attributes.find((attribute) => attribute.traitType === 'bunnyId')?.value\n      : nft\n      ? nft.tokenId\n      : null\n\n  return (\n    <tr {...((isXs || isSm) && { onClick: onPresentMobileModal })}>\n      {!isNftActivity ? (\n        <Td\n          {...((isXs || isSm) && {\n            onClick: (event) => {\n              event.stopPropagation()\n            },\n          })}\n        >\n          <RouterLink to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}/${tokenId}` : ``}>\n            <Flex justifyContent=\"flex-start\" alignItems=\"center\" flexDirection={['column', null, 'row']}>\n              <RoundedImage\n                src={nft?.image.thumbnail}\n                alt={nft?.name}\n                width={64}\n                height={64}\n                mr={[0, null, '16px']}\n                mb={['8px', null, 0]}\n              />\n              <Flex flexDirection=\"column\">\n                <Text textAlign={['center', null, 'left']} color=\"textSubtle\" fontSize=\"14px\">\n                  {nft?.collectionName}\n                </Text>\n                <Text textAlign={['center', null, 'left']} bold>\n                  {nft?.name}\n                </Text>\n              </Flex>\n            </Flex>\n          </RouterLink>\n        </Td>\n      ) : null}\n      <Td>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <ActivityEventText marketEvent={activity.marketEvent} />\n        </Flex>\n        {isXs || isSm ? <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} /> : null}\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} />\n          </Td>\n          {isUserActivity ? (\n            <Td>\n              <Flex justifyContent=\"center\" alignItems=\"center\">\n                {activity.otherParty ? <ProfileCell accountAddress={activity.otherParty} /> : '-'}\n              </Flex>\n            </Td>\n          ) : (\n            <>\n              <Td>\n                <Flex justifyContent=\"center\" alignItems=\"center\">\n                  {activity.seller ? <ProfileCell accountAddress={activity.seller} /> : '-'}\n                </Flex>\n              </Td>\n              <Td>\n                <Flex justifyContent=\"center\" alignItems=\"center\">\n                  {activity.buyer ? <ProfileCell accountAddress={activity.buyer} /> : '-'}\n                </Flex>\n              </Td>\n            </>\n          )}\n        </>\n      )}\n      <Td>\n        <Flex justifyContent=\"center\">\n          <Text textAlign=\"center\" fontSize={isXs || isSm ? '12px' : '16px'}>\n            {localeTimestamp}\n          </Text>\n        </Flex>\n      </Td>\n      {isXs || isSm ? null : (\n        <Td>\n          <IconButton as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            <OpenNewIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Td>\n      )}\n    </tr>\n  )\n}\n\nexport default ActivityRow\n","import { ethers } from 'ethers'\nimport { Activity, AskOrder, AskOrderType, MarketEvent, Transaction } from 'state/nftMarket/types'\n\nexport const sortActivity = ({\n  askOrders = [],\n  transactions = [],\n}: {\n  askOrders?: AskOrder[]\n  transactions?: Transaction[]\n}): Activity[] => {\n  const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\n    switch (orderType) {\n      case AskOrderType.CANCEL:\n        return MarketEvent.CANCEL\n      case AskOrderType.MODIFY:\n        return MarketEvent.MODIFY\n      case AskOrderType.NEW:\n        return MarketEvent.NEW\n      default:\n        return MarketEvent.MODIFY\n    }\n  }\n\n  const transformTransactions = (transactionsHistory: Transaction[]): Activity[] => {\n    const transformedTransactions = transactionsHistory.map((transactionHistory) => {\n      const marketEvent = MarketEvent.SELL\n      const { timestamp, nft } = transactionHistory\n      const price = transactionHistory.askPrice\n      const tx = transactionHistory.id\n      const buyer = transactionHistory.buyer.id\n      const seller = transactionHistory.seller.id\n      return { marketEvent, price, timestamp, nft, tx, buyer, seller }\n    })\n\n    return transformedTransactions\n  }\n\n  const transformAskOrders = (askOrdersHistory: AskOrder[]): Activity[] => {\n    const transformedAskOrders = askOrdersHistory.map((askOrderHistory) => {\n      const marketEvent = getAskOrderEvent(askOrderHistory.orderType)\n      const price = askOrderHistory.askPrice\n      const { timestamp, nft } = askOrderHistory\n      const tx = askOrderHistory.id\n      const seller = askOrderHistory?.seller.id\n      return { marketEvent, price, timestamp, nft, tx, seller }\n    })\n\n    return transformedAskOrders\n  }\n\n  const allActivity = [...transformAskOrders(askOrders), ...transformTransactions(transactions)]\n  if (allActivity.length > 0) {\n    const sortedByMostRecent = allActivity.sort((activityItem1, activityItem2) => {\n      const timestamp1 = ethers.BigNumber.from(activityItem1.timestamp)\n      const timestamp2 = ethers.BigNumber.from(activityItem2.timestamp)\n      return timestamp2.sub(timestamp1).toNumber()\n    })\n\n    return sortedByMostRecent\n  }\n  return []\n}\n","import React from 'react'\nimport { Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { removeAllActivityFilters } from 'state/nftMarket/reducer'\n\ninterface ClearAllButtonProps extends ButtonProps {\n  collectionAddress: string\n}\n\nconst ClearAllButton: React.FC<ClearAllButtonProps> = ({ collectionAddress, ...props }) => {\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n\n  const clearAll = () => {\n    dispatch(removeAllActivityFilters(collectionAddress))\n  }\n\n  return (\n    <Button key=\"clear-all\" variant=\"text\" scale=\"sm\" onClick={clearAll} {...props}>\n      {t('Clear')}\n    </Button>\n  )\n}\n\nexport default ClearAllButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Button, Flex, IconButton, CloseIcon } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { addActivityTypeFilters, removeActivityTypeFilters } from 'state/nftMarket/reducer'\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { MarketEvent } from '../../../../state/nftMarket/types'\n\ninterface ActivityFilterProps {\n  eventType: MarketEvent\n  collectionAddress: string\n}\n\nconst TriggerButton = styled(Button)<{ hasItem: boolean }>`\n  ${({ hasItem }) =>\n    hasItem &&\n    `  \n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n    padding-right: 8px;\n  `}\n`\n\nconst CloseButton = styled(IconButton)`\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n`\n\nconst eventName = (t: ContextApi['t'], eventType: string) => {\n  switch (eventType) {\n    case MarketEvent.CANCEL:\n      return t('Delisted')\n    case MarketEvent.MODIFY:\n      return t('Modified')\n    case MarketEvent.NEW:\n      return t('Listed')\n    case MarketEvent.SELL:\n      return t('Sold')\n    default:\n      return ''\n  }\n}\n\nexport const ActivityFilter: React.FC<ActivityFilterProps> = ({ eventType, collectionAddress }) => {\n  const nftActivityFilters = useGetNftActivityFilters(collectionAddress)\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n\n  const isEventSelected = nftActivityFilters.typeFilters.some((nftActivityFilter) => nftActivityFilter === eventType)\n\n  const handleMenuClick = () => {\n    if (!isEventSelected) {\n      dispatch(addActivityTypeFilters({ collection: collectionAddress, field: eventType }))\n    }\n  }\n\n  const handleClearItem = () => {\n    dispatch(removeActivityTypeFilters({ collection: collectionAddress, field: eventType }))\n  }\n\n  return (\n    <Flex alignItems=\"center\" mr=\"4px\" mb=\"4px\">\n      <Box>\n        <TriggerButton\n          onClick={handleMenuClick}\n          variant={isEventSelected ? 'subtle' : 'light'}\n          scale=\"sm\"\n          hasItem={isEventSelected}\n        >\n          {eventName(t, eventType)}\n        </TriggerButton>\n      </Box>\n      {isEventSelected && (\n        <CloseButton variant={isEventSelected ? 'subtle' : 'light'} scale=\"sm\" onClick={handleClearItem}>\n          <CloseIcon color=\"currentColor\" width=\"18px\" />\n        </CloseButton>\n      )}\n    </Flex>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport isEmpty from 'lodash/isEmpty'\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\nimport { Collection, MarketEvent } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport ClearAllButton from './ClearAllButton'\nimport { ActivityFilter } from './ActivityFilter'\n\nexport const Container = styled(Flex)`\n  gap: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    align-items: center;\n    flex-grow: 2;\n  }\n`\n\nconst ScrollableFlexContainer = styled(Flex)`\n  align-items: center;\n  flex: 1;\n  flex-wrap: nowrap;\n  overflow-x: auto;\n  -webkit-overflow-scrolling: touch;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-wrap: wrap;\n    overflow-x: revert;\n  }\n`\n\ninterface FiltersProps {\n  collection: Collection\n}\n\nconst ActivityFilters: React.FC<FiltersProps> = ({ collection }) => {\n  const { address } = collection || { address: '' }\n  const { t } = useTranslation()\n\n  const nftActivityFilters = useGetNftActivityFilters(address)\n\n  return (\n    <Container justifyContent=\"space-between\" flexDirection={['column', 'column', 'row']}>\n      <Text textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" bold>\n        {t('Filter by')}\n      </Text>\n      <ScrollableFlexContainer>\n        {[MarketEvent.NEW, MarketEvent.CANCEL, MarketEvent.MODIFY, MarketEvent.SELL].map((eventType) => {\n          return <ActivityFilter key={eventType} eventType={eventType} collectionAddress={address} />\n        })}\n      </ScrollableFlexContainer>\n      {!isEmpty(nftActivityFilters.typeFilters) ? <ClearAllButton collectionAddress={address} /> : null}\n    </Container>\n  )\n}\n\nexport default ActivityFilters\n","import React, { useEffect, useState } from 'react'\nimport { uniqBy } from 'lodash'\nimport { isAddress } from 'utils'\nimport { useAppDispatch } from 'state'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  Box,\n  Button,\n  Flex,\n  Table,\n  Text,\n  Th,\n  useMatchBreakpoints,\n} from '@pancakeswap/uikit'\nimport { getCollectionActivity, getNftsFromDifferentCollectionsApi } from 'state/nftMarket/helpers'\nimport Container from 'components/Layout/Container'\nimport TableLoader from 'components/TableLoader'\nimport { Activity, Collection, NftToken, TokenIdWithCollectionAddress } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport useTheme from 'hooks/useTheme'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\nimport { Arrow, PageButtons } from '../components/PaginationButtons'\nimport NoNftsImage from '../components/Activity/NoNftsImage'\nimport ActivityFilters from './ActivityFilters'\nimport ActivityRow from '../components/Activity/ActivityRow'\nimport { sortActivity } from './utils/sortActivity'\n\nconst MAX_PER_PAGE = 8\n\nconst MAX_PER_QUERY = 100\n\ninterface ActivityHistoryProps {\n  collection?: Collection\n}\n\nconst ActivityHistory: React.FC<ActivityHistoryProps> = ({ collection }) => {\n  const dispatch = useAppDispatch()\n  const { address: collectionAddress } = collection || { address: '' }\n  const nftActivityFilters = useGetNftActivityFilters(collectionAddress)\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const [paginationData, setPaginationData] = useState<{\n    activity: Activity[]\n    currentPage: number\n    maxPage: number\n  }>({\n    activity: [],\n    currentPage: 1,\n    maxPage: 1,\n  })\n  const [activitiesSlice, setActivitiesSlice] = useState<Activity[]>([])\n  const [nftMetadata, setNftMetadata] = useState<NftToken[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [isInitialized, setIsInitialized] = useState(false)\n  const [queryPage, setQueryPage] = useState(1)\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\n  const bnbBusdPrice = useBNBBusdPrice()\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  const nftActivityFiltersString = JSON.stringify(nftActivityFilters)\n\n  useEffect(() => {\n    const fetchCollectionActivity = async () => {\n      try {\n        setIsLoading(true)\n        const nftActivityFiltersParsed = JSON.parse(nftActivityFiltersString)\n        const collectionActivity = await getCollectionActivity(\n          collectionAddress.toLowerCase(),\n          nftActivityFiltersParsed,\n          MAX_PER_QUERY,\n        )\n        const activity = sortActivity(collectionActivity)\n        setPaginationData({\n          activity,\n          currentPage: 1,\n          maxPage: Math.ceil(activity.length / MAX_PER_PAGE) || 1,\n        })\n        setIsLoading(false)\n        setIsInitialized(true)\n      } catch (error) {\n        console.error('Failed to fetch collection activity', error)\n      }\n    }\n\n    if ((collectionAddress && isAddress(collectionAddress)) || collectionAddress === '') {\n      fetchCollectionActivity()\n    }\n  }, [dispatch, collectionAddress, nftActivityFiltersString, lastUpdated])\n\n  useEffect(() => {\n    const fetchActivityNftMetadata = async () => {\n      const activityNftTokenIds = uniqBy(\n        activitiesSlice.map((activity): TokenIdWithCollectionAddress => {\n          return { tokenId: activity.nft.tokenId, collectionAddress: activity.nft.collection.id }\n        }),\n        'tokenId',\n      )\n      const nfts = await getNftsFromDifferentCollectionsApi(activityNftTokenIds)\n      setNftMetadata(nfts)\n    }\n\n    if (activitiesSlice.length > 0) {\n      fetchActivityNftMetadata()\n    }\n  }, [activitiesSlice])\n\n  useEffect(() => {\n    const slice = paginationData.activity.slice(\n      MAX_PER_PAGE * (paginationData.currentPage - 1),\n      MAX_PER_PAGE * paginationData.currentPage,\n    )\n    setActivitiesSlice(slice)\n  }, [paginationData])\n\n  return (\n    <Box py=\"32px\">\n      <Container px={[0, null, '24px']}>\n        <Flex\n          style={{ gap: '16px', padding: '0 16px' }}\n          alignItems={[null, null, 'center']}\n          flexDirection={['column', 'column', 'row']}\n        >\n          <ActivityFilters collection={collection} />\n          <Button\n            scale=\"sm\"\n            disabled={isLoading}\n            onClick={() => {\n              refresh()\n            }}\n          >\n            {t('Refresh')}\n          </Button>\n        </Flex>\n      </Container>\n      <Container>\n        {paginationData.activity.length === 0 &&\n        nftMetadata.length === 0 &&\n        activitiesSlice.length === 0 &&\n        !isLoading ? (\n          <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n            <NoNftsImage />\n            <Text pt=\"8px\" bold>\n              {t('No NFT market history found')}\n            </Text>\n          </Flex>\n        ) : (\n          <>\n            <Table>\n              <thead>\n                <tr>\n                  <Th textAlign={['center', null, 'left']}> {t('Item')}</Th>\n                  <Th textAlign=\"right\"> {t('Event')}</Th>\n                  {isXs || isSm ? null : (\n                    <>\n                      <Th textAlign=\"right\"> {t('Price')}</Th>\n                      <Th textAlign=\"center\"> {t('From')}</Th>\n                      <Th textAlign=\"center\"> {t('To')}</Th>\n                    </>\n                  )}\n                  <Th textAlign=\"center\"> {t('Date')}</Th>\n                  {isXs || isSm ? null : <Th />}\n                </tr>\n              </thead>\n\n              <tbody>\n                {!isInitialized ? (\n                  <TableLoader />\n                ) : (\n                  activitiesSlice.map((activity) => {\n                    const nftMeta = nftMetadata.find((metaNft) => metaNft.tokenId === activity.nft.tokenId)\n                    return (\n                      <ActivityRow\n                        key={`${activity.marketEvent}#${activity.nft.tokenId}#${activity.timestamp}#${activity.tx}`}\n                        activity={activity}\n                        nft={nftMeta}\n                        bnbBusdPrice={bnbBusdPrice}\n                      />\n                    )\n                  })\n                )}\n              </tbody>\n            </Table>\n            <Flex\n              borderTop={`1px ${theme.colors.cardBorder} solid`}\n              pt=\"24px\"\n              flexDirection=\"column\"\n              justifyContent=\"space-between\"\n              height=\"100%\"\n            >\n              <PageButtons>\n                <Arrow\n                  onClick={() => {\n                    if (paginationData.currentPage !== 1) {\n                      setPaginationData((prevState) => ({\n                        ...prevState,\n                        currentPage: prevState.currentPage - 1,\n                      }))\n                    }\n                  }}\n                >\n                  <ArrowBackIcon color={paginationData.currentPage === 1 ? 'textDisabled' : 'primary'} />\n                </Arrow>\n                <Text>\n                  {t('Page %page% of %maxPage%', {\n                    page: paginationData.currentPage,\n                    maxPage: paginationData.maxPage,\n                  })}\n                </Text>\n                <Arrow\n                  onClick={async () => {\n                    if (paginationData.currentPage !== paginationData.maxPage) {\n                      setPaginationData((prevState) => ({\n                        ...prevState,\n                        currentPage: prevState.currentPage + 1,\n                      }))\n\n                      if (\n                        paginationData.maxPage - paginationData.currentPage === 1 &&\n                        paginationData.activity.length === MAX_PER_QUERY * queryPage\n                      ) {\n                        try {\n                          setIsLoading(true)\n                          const nftActivityFiltersParsed = JSON.parse(nftActivityFiltersString)\n                          const collectionActivity = await getCollectionActivity(\n                            collectionAddress.toLowerCase(),\n                            nftActivityFiltersParsed,\n                            MAX_PER_QUERY * (queryPage + 1),\n                          )\n                          const activity = sortActivity(collectionActivity)\n                          setPaginationData((prevState) => {\n                            return {\n                              ...prevState,\n                              activity,\n                              maxPage: Math.ceil(activity.length / MAX_PER_PAGE) || 1,\n                            }\n                          })\n                          setIsLoading(false)\n                          setQueryPage((prevState) => prevState + 1)\n                        } catch (error) {\n                          console.error('Failed to fetch collection activity', error)\n                        }\n                      }\n                    }\n                  }}\n                >\n                  <ArrowForwardIcon\n                    color={paginationData.currentPage === paginationData.maxPage ? 'textDisabled' : 'primary'}\n                  />\n                </Arrow>\n              </PageButtons>\n            </Flex>\n          </>\n        )}\n      </Container>\n    </Box>\n  )\n}\n\nexport default ActivityHistory\n","import React from 'react'\nimport { useParams } from 'react-router'\nimport { useGetCollection } from 'state/nftMarket/hooks'\nimport Header from '../Header'\nimport ActivityHistory from '../../ActivityHistory/ActivityHistory'\n\nconst Activity = () => {\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\n  const collection = useGetCollection(collectionAddress)\n\n  return (\n    <>\n      <Header collection={collection} />\n      <ActivityHistory collection={collection} />\n    </>\n  )\n}\n\nexport default Activity\n"],"sourceRoot":""}